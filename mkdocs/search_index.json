{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to Loop\n\u2301\n\n\n\n\n\n\nIntroduction\n\u2301\n\n\nLoop\n is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others.  \n\n\nThe app is built on top of \nLoopKit\n. LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop.\n\n\nPlease understand that this project:\n\n\n\n\nIs highly experimental\n\n\nIs not approved for therapy\n\n\n\n\nUsing the open source Loop app template, you can build an insulin delivery system that uses specific commercial and open source hardware and software technologies to bring together the insulin pump, continuous glucose monitor (CGM), and insulin dosing algorithm to create a continuous insulin basal dosing \u201cLoop\u201d.  This Loop predicts future glucose based on basal-rate schedules, carbohydrate intake, insulin on board, and current CGM readings.  These glucose forecasts provide Loop with the information needed to recommend a temporary basal rate to attain a targeted glucose range in the future.  The system can either operate as an \u201copen loop\u201d by making recommendations to the user for their approval before enacting or as a \u201cclosed loop\u201d by automatically setting the recommended temporary basal rate.  \nYou take full responsibility for building and running this system and do so at your own risk.\n\n\nYou should undertake this project in stages. For example, first \u201copen loop\u201d to familiarize yourself with Loop\u2019s operation. Also, investigate the code to ensure you understand what it is recommending and why. Then when you progress to \u201cclosed loop\u201d, do so safely by starting with appropriate safety limits and only progress to higher limits after several days of no lows. Please ask questions at this point about why Loop is making the recommendations it does.  It should be similar to the therapy decisions you would make yourself.  If the recommendations it makes are different than you would make, try to figure out why.\n\n\nDevelopment History\n\u2301\n\n\nLoop has been developed as an open-source, shared project.  For a really interesting read about the history of Loop development, check out this \nHistory of Loop and LoopKit\n post, written by Loop developer Nate Racklyeft.  The project continues to be a labor-of-love by a community of users; maintained and improved by volunteers.\n\n\nStay in the Loop!\n\u2301\n\n\nSign up for the Loop Users announcement list\n to stay informed of critical issues that may arise.\n\n\nJoin the gitter chat at \nhttps://gitter.im/LoopKit/Loop\n\n\nThere is also a \nLooped Facebook Group\n that you might wish to join for support.  When you request to join the group, please remember to check your messages box on facebook and respond to the message.\n\n\nContribute\n\u2301\n\n\nPlease consider submitting any updates and improvements to the docmentation that you want to share by submitting PRs to the \nloopdocs repo\n.  Also, read the \nLICENSE\n and \nCODE_OF_CONDUCT\n.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-loop",
            "text": "",
            "title": "Welcome to Loop"
        },
        {
            "location": "/#introduction",
            "text": "Loop  is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others.    The app is built on top of  LoopKit . LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop.  Please understand that this project:   Is highly experimental  Is not approved for therapy   Using the open source Loop app template, you can build an insulin delivery system that uses specific commercial and open source hardware and software technologies to bring together the insulin pump, continuous glucose monitor (CGM), and insulin dosing algorithm to create a continuous insulin basal dosing \u201cLoop\u201d.  This Loop predicts future glucose based on basal-rate schedules, carbohydrate intake, insulin on board, and current CGM readings.  These glucose forecasts provide Loop with the information needed to recommend a temporary basal rate to attain a targeted glucose range in the future.  The system can either operate as an \u201copen loop\u201d by making recommendations to the user for their approval before enacting or as a \u201cclosed loop\u201d by automatically setting the recommended temporary basal rate.   You take full responsibility for building and running this system and do so at your own risk.  You should undertake this project in stages. For example, first \u201copen loop\u201d to familiarize yourself with Loop\u2019s operation. Also, investigate the code to ensure you understand what it is recommending and why. Then when you progress to \u201cclosed loop\u201d, do so safely by starting with appropriate safety limits and only progress to higher limits after several days of no lows. Please ask questions at this point about why Loop is making the recommendations it does.  It should be similar to the therapy decisions you would make yourself.  If the recommendations it makes are different than you would make, try to figure out why.",
            "title": "Introduction"
        },
        {
            "location": "/#development-history",
            "text": "Loop has been developed as an open-source, shared project.  For a really interesting read about the history of Loop development, check out this  History of Loop and LoopKit  post, written by Loop developer Nate Racklyeft.  The project continues to be a labor-of-love by a community of users; maintained and improved by volunteers.",
            "title": "Development History"
        },
        {
            "location": "/#stay-in-the-loop",
            "text": "Sign up for the Loop Users announcement list  to stay informed of critical issues that may arise.  Join the gitter chat at  https://gitter.im/LoopKit/Loop  There is also a  Looped Facebook Group  that you might wish to join for support.  When you request to join the group, please remember to check your messages box on facebook and respond to the message.",
            "title": "Stay in the Loop!"
        },
        {
            "location": "/#contribute",
            "text": "Please consider submitting any updates and improvements to the docmentation that you want to share by submitting PRs to the  loopdocs repo .  Also, read the  LICENSE  and  CODE_OF_CONDUCT .",
            "title": "Contribute"
        },
        {
            "location": "/setup/overview/",
            "text": "Requirements\n\u2301\n\n\nLoop has both Hardware and Software requirements.  In general, to use Loop you need to have six components.\n\n\n\n\nCompatible insulin pump\n\n\nCompatible CGM\n\n\nRileyLink\n\n\nCompatible iPhone/iPod Touch\n\n\nApple computer running Sierra macOS 10.12 or later\n\n\nXcode (a free Apple application)\n\n\n\n\nYou will need to be able to install software on your computer and sign up as an Apple Developer to install the Loop app to your iPhone. You do not have to own an Apple computer to run Loop on a day-to-day basis, but you will need access to an Apple computer anytime you need to build or update your Loop app. For the most part, if you are comfortable with installing Apple software programs on your computer, you will have no problem building and running Loop. There are detailed step-by-step instructions included in these docs.  You should be doing this yourself so you can understand how to fix it when it breaks. You may want to help another person get set up on Loop, and that is noble, but you will serve them much better if you support them doing the work themselves, rather than doing it for them.   \n\n\n\n\n\n\n\n\n\nBuilding your Loop\n\u2301\n\n\nBuilding your Loop app is actually quite easy.  The harder part will be having the patience to read all the documents you should before starting a closed loop.  New Loop users are so excited to get started that they skip reading all the great info that these docs contain.  So, as you begin the build...please include time to read the documents that follow what happens AFTER you successfully build your Loop app.\n\n\nIf you have any questions, these docs have a nice search feature that may help you find your answers pretty quickly too.\n\n\nThe basic installation involves:\n\n\n\n\nMaking sure you have macOS Sierra and the application Xcode 9\n\n\nDownloading the Loop code\n\n\nAdding your Apple developer account to Xcode\n\n\nMaking some basic edits to the Loop code using Xcode\n\n\nSigning your app with your Apple developer account\n\n\nPressing a \"build\" button to install the Loop app onto your iPhone\n\n\nEntering the needed information (basals, etc) into Loop app to start using the looping features",
            "title": "Overview"
        },
        {
            "location": "/setup/overview/#requirements",
            "text": "Loop has both Hardware and Software requirements.  In general, to use Loop you need to have six components.   Compatible insulin pump  Compatible CGM  RileyLink  Compatible iPhone/iPod Touch  Apple computer running Sierra macOS 10.12 or later  Xcode (a free Apple application)   You will need to be able to install software on your computer and sign up as an Apple Developer to install the Loop app to your iPhone. You do not have to own an Apple computer to run Loop on a day-to-day basis, but you will need access to an Apple computer anytime you need to build or update your Loop app. For the most part, if you are comfortable with installing Apple software programs on your computer, you will have no problem building and running Loop. There are detailed step-by-step instructions included in these docs.  You should be doing this yourself so you can understand how to fix it when it breaks. You may want to help another person get set up on Loop, and that is noble, but you will serve them much better if you support them doing the work themselves, rather than doing it for them.",
            "title": "Requirements"
        },
        {
            "location": "/setup/overview/#building-your-loop",
            "text": "Building your Loop app is actually quite easy.  The harder part will be having the patience to read all the documents you should before starting a closed loop.  New Loop users are so excited to get started that they skip reading all the great info that these docs contain.  So, as you begin the build...please include time to read the documents that follow what happens AFTER you successfully build your Loop app.  If you have any questions, these docs have a nice search feature that may help you find your answers pretty quickly too.  The basic installation involves:   Making sure you have macOS Sierra and the application Xcode 9  Downloading the Loop code  Adding your Apple developer account to Xcode  Making some basic edits to the Loop code using Xcode  Signing your app with your Apple developer account  Pressing a \"build\" button to install the Loop app onto your iPhone  Entering the needed information (basals, etc) into Loop app to start using the looping features",
            "title": "Building your Loop"
        },
        {
            "location": "/setup/requirements/pump/",
            "text": "Insulin Pump\n\u2301\n\n\n\n\nThere are a number of insulin pumps manufactured between 2006 \u2013 2012 by Medtronic which are compatible.  Compatibility has two requirements; (1) pump model and (2) firmware.  \n\n\nThe Loop-compatible pumps are as follows:\n\n\n\n  \n\n    \n\n      \n\n      \nInsulin Pump\n\n    \n\n    \n\n      \nMM 515/715\n\n      \nMM 522/722\n2\n\n      \nMM 523/723\n3\n\n      \nMM 554/754\n4\n\n    \n\n  \n\n  \n\n    \n\n      \nCGM\n\n      \nDexcom G4\n1\n \n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n    \n\n    \n\n      \nDexcom G5\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n    \n\n    \n\n      \nMM CGM\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n      \n\u2705\n\n    \n\n  \n\n\n\n\n\n1\n. Offline access to glucose requires a Receiver with Share and the \nShare2 app\n to be running on the same iPhone as the Loop app is installed. Internet-dependent access via Share servers is also supported.\n\n2\n. x22 model pumps were produced before firmware security patches were implemented, therefore these models are compatible because they will have firmware 2.4A or lower only.  You can double check, but thus far all x22 pumps we have seen have compatible firmware.\n\n3\n. Firmware 2.4A or lower is required for using Closed Loop and Bolus features.\n\n4\n. Worldwide Veo (2.6A or lower) or Canadian/Australian Veo (2.7A or lower) is required for using Closed Loop and Bolus features. US version of this pump is not available.\n\n\n\n\nIf you want to triple check compatibility, you can check for presence/absence of \"PC connect\" in the pump.  If PC Connect is present, then the pump is NOT compatible.  You can find PC connect in the Medtronic's Main Menu, Utilities, Connect Devices.  PC Connect, if present, will be the first option showing in that menu, above the word \"Meters\".  If you do \nNOT\n see PC Connect there...good!\n\n\n\n\n\n\n\n\n\n\n\nPump Model\n\u2301\n\n\nTo determine your pump model, look at the back side of your pump.  There should be a sticker on the underside of the pump.  On the right hand side of the sticker, it says REF MMT-XXXXXX\n\n\n\n\nIn the example above, it says the pump model is:  MMT-722NAS\n\n\nMMT         Pump Manufacturer Model (MiniMed Medtronic)\n722         Pump Model Number\nNA          Pump Region (NA=North America, CA=Canada/Australia, WW=Worldwide)\nS           Pump Color (S=Smoke, L=Clear/Lucite, B=Blue, P=Pink/Purple)\n\n\n\n\nSome pumps may have an \u201cL\u201d or \u201cS\u201d or \"R\" before the pump region, e.g. a model number like MMT-LNAS.  This does not affect Loop compatibility.\n\n\nThe difference between the Medtronic 500 series and the 700 series pumps is the size of the insulin reservoirs.  The 500 series pumps use a 180 unit reservoir, and the 700 series pumps use a 300 unit reservoir (or smaller 180 unit reservoir, if you want).\n\n\nThe differences between Medtronic x22 pumps and x23/x54 pumps are primarily three features.  \n\n\n\n\n\n\nThe x23/x54 pumps will allow for increments of 0.025 units, whereas the x22 pumps have larger increments of 0.05 units.  Loop will have the insulin delivery automatically rounded by the pump to the units available in the pump model, and any smaller adjustments (to make up for the rounding) will be made through Loop\u2019s use of temp basals.  \n\n\n\n\n\n\nAdditionally, because of the way Loop fetches information from the pump, the x23/x54 series of pumps are slightly better at conserving battery life through the use of the MySentry.  x22 pumps do not use MySentry.  \n\n\n\n\n\n\nThe x23/x54 series pumps are also faster at delivering large boluses (up to several times faster for boluses > 10 units).\n\n\n\n\n\n\nPump Firmware\n\u2301\n\n\nA pump\u2019s firmware is the internal software that runs your pump.  Older Medtronic firmware allows Loop to act as a \u201cremote control\u201d to set temp basals and report back pump data.  Newer firmware disabled that \u201cremote control\u201d access and therefore cannot be used with these DIY closed-loop systems.  There is currently no ability to downgrade a pump\u2019s firmware or replace it with older firmware.  Before you buy a used pump, make sure you are getting one with compatible firmware.\n\n\nTo find your pump\u2019s firmware you will need to power it up.  If the pump has not been powered on for some time (i.e., has been in storage without a battery for awhile), it will run through a start-up count and the firmware version will appear on the bottom right of the pump\u2019s screen.  Don\u2019t turn away, as the version number will only be displayed for a little while before the screen moves onto other information displays.  \n\n\nIf the pump has been active recently or has a reservoir installed, follow these steps:\n\n\n\n\n\n\nPress the \n button on your pump.  \n\n\n\n\n\n\nScroll down with the \n button to the bottom of the status display.  \n\n\n\n\n\n\nRead the bottom line of the display.\n\n\n\n\n\n\n\n\nOther pumps\n\u2301\n\n\nWhile we all would love to have our {insert your favorite manufacturer} pump be compatible with a DIY closed-loop system like Loop, unfortunately it just isn't possible right now.  There are efforts being made to crack the software code on other pumps (like Animas and Omnipod), and when they are successful...believe me...we will tell you about it!\n\n\nFinding a Medtronic pump\n\u2301\n\n\nFinding a compatible Medtronic pump is probably the most difficult part for most new Loopers.  Our suggestion:\n\n\n\n\n\n\nTalk to friends in the diabetic community.  \n\n\n\n\n\n\nAsk your endocrinologist.  \n\n\n\n\n\n\nAsk at a local JDRF chapter meeting if someone has an old backup pump they'd be willing to donate to you.  \n\n\n\n\n\n\nJoin diabetic supply groups in Facebook; both for-trade and for-sale groups.  \n\n\n\n\n\n\nCheck Craigslist often and be willing to expand your search area to include larger cities.  \n\n\n\n\n\n\nSearch \nMedwow\n for used Medtronic pumps\n\n\n\n\n\n\nSafe Purchasing\n\u2301\n\n\nIf you choose to purchase from a remote or unknown seller, here are some tips for safe purchasing:\n\n\n\n\n\n\nUse Paypal and purchase using the \"Goods and Services\" payment option.  This costs nothing for the buyer, but the seller will lose 2.95% of the sale to Paypal fees.  Paypal offers some protection for both buyer and seller in the event of fraud.  \n\n\n\n\n\n\nAsk for photos of the pump.  Check to make sure the serial number of the pump on the backside matches the serial number of the pump showing in the display menu.  Ask for a short video of the pump, or at least a photo of the pump turned on, so that you can see the pump's firmware and model number.  Cracks and some wear on these pumps is expected...these pumps are not usually free of any marks.  Many people are successfully looping on pumps that have cracks and rub marks...but you may want to ask if you are concerned about any you see.  \n\n\n\n\n\n\nAsk for shipping that includes a tracking number.  USPS Priority Mail's smallest box is a great option.  It's only $7.15 and includes tracking.  Ask the seller to add a small bit of packing protection such as bubble wrap around the pump to keep it safe during shipping.  Make sure you get a tracking number within a reasonable period of time after you have paid.  \n\n\n\n\n\n\nRed flags that may indicate a scam:\n\n\n\n\n\n\nAsking for payment through \"friends and family\" on Paypal, especially if you don't know the person or have any solid references for them.  Paying in that way offers you no buyer protection.  It's just like giving the seller cash, so you had better trust the seller.  \n\n\n\n\n\n\nOffering an \"almost new\" pump is a big red flag.  These pumps should be at least 5 years old by now.  Do you really think a 5 year old pump should be unused and sitting in shrink wrap at this point?  Seems highly suspicious.  \n\n\n\n\n\n\nNot able to provide new pictures of the pump when requested.  Sure they posted some pictures with the ad, but what if they just downloaded them from other people's ads?  The seller should be able to furnish a couple \"new\" photos are your request.  A good one to ask for is the battery and reservoir tops so you can see the condition of those.\n\n\n\n\n\n\nPump Supplies\n\u2301\n\n\nMedtronic will not typically want to sell pump supplies directly to customers who do not have an in-warranty Medtronic pump registered in their system.  Ask your insurance about purchasing pump supplies through a durable medical equipment (DME) provider.  If you are brand new to Medtronic infusion sites, you may want to ask for help from friends to try a variety of infusion sets before purchasing a full 90-day supply of any in particular.",
            "title": "Insulin Pump"
        },
        {
            "location": "/setup/requirements/pump/#insulin-pump",
            "text": "There are a number of insulin pumps manufactured between 2006 \u2013 2012 by Medtronic which are compatible.  Compatibility has two requirements; (1) pump model and (2) firmware.    The Loop-compatible pumps are as follows:  \n   \n     \n       \n       Insulin Pump \n     \n     \n       MM 515/715 \n       MM 522/722 2 \n       MM 523/723 3 \n       MM 554/754 4 \n     \n   \n   \n     \n       CGM \n       Dexcom G4 1   \n       \u2705 \n       \u2705 \n       \u2705 \n       \u2705 \n     \n     \n       Dexcom G5 \n       \u2705 \n       \u2705 \n       \u2705 \n       \u2705 \n     \n     \n       MM CGM \n       \u2705 \n       \u2705 \n       \u2705 \n       \u2705 \n     \n     1 . Offline access to glucose requires a Receiver with Share and the  Share2 app  to be running on the same iPhone as the Loop app is installed. Internet-dependent access via Share servers is also supported. 2 . x22 model pumps were produced before firmware security patches were implemented, therefore these models are compatible because they will have firmware 2.4A or lower only.  You can double check, but thus far all x22 pumps we have seen have compatible firmware. 3 . Firmware 2.4A or lower is required for using Closed Loop and Bolus features. 4 . Worldwide Veo (2.6A or lower) or Canadian/Australian Veo (2.7A or lower) is required for using Closed Loop and Bolus features. US version of this pump is not available.   If you want to triple check compatibility, you can check for presence/absence of \"PC connect\" in the pump.  If PC Connect is present, then the pump is NOT compatible.  You can find PC connect in the Medtronic's Main Menu, Utilities, Connect Devices.  PC Connect, if present, will be the first option showing in that menu, above the word \"Meters\".  If you do  NOT  see PC Connect there...good!",
            "title": "Insulin Pump"
        },
        {
            "location": "/setup/requirements/pump/#pump-model",
            "text": "To determine your pump model, look at the back side of your pump.  There should be a sticker on the underside of the pump.  On the right hand side of the sticker, it says REF MMT-XXXXXX   In the example above, it says the pump model is:  MMT-722NAS  MMT         Pump Manufacturer Model (MiniMed Medtronic)\n722         Pump Model Number\nNA          Pump Region (NA=North America, CA=Canada/Australia, WW=Worldwide)\nS           Pump Color (S=Smoke, L=Clear/Lucite, B=Blue, P=Pink/Purple)  Some pumps may have an \u201cL\u201d or \u201cS\u201d or \"R\" before the pump region, e.g. a model number like MMT-LNAS.  This does not affect Loop compatibility.  The difference between the Medtronic 500 series and the 700 series pumps is the size of the insulin reservoirs.  The 500 series pumps use a 180 unit reservoir, and the 700 series pumps use a 300 unit reservoir (or smaller 180 unit reservoir, if you want).  The differences between Medtronic x22 pumps and x23/x54 pumps are primarily three features.      The x23/x54 pumps will allow for increments of 0.025 units, whereas the x22 pumps have larger increments of 0.05 units.  Loop will have the insulin delivery automatically rounded by the pump to the units available in the pump model, and any smaller adjustments (to make up for the rounding) will be made through Loop\u2019s use of temp basals.      Additionally, because of the way Loop fetches information from the pump, the x23/x54 series of pumps are slightly better at conserving battery life through the use of the MySentry.  x22 pumps do not use MySentry.      The x23/x54 series pumps are also faster at delivering large boluses (up to several times faster for boluses > 10 units).",
            "title": "Pump Model"
        },
        {
            "location": "/setup/requirements/pump/#pump-firmware",
            "text": "A pump\u2019s firmware is the internal software that runs your pump.  Older Medtronic firmware allows Loop to act as a \u201cremote control\u201d to set temp basals and report back pump data.  Newer firmware disabled that \u201cremote control\u201d access and therefore cannot be used with these DIY closed-loop systems.  There is currently no ability to downgrade a pump\u2019s firmware or replace it with older firmware.  Before you buy a used pump, make sure you are getting one with compatible firmware.  To find your pump\u2019s firmware you will need to power it up.  If the pump has not been powered on for some time (i.e., has been in storage without a battery for awhile), it will run through a start-up count and the firmware version will appear on the bottom right of the pump\u2019s screen.  Don\u2019t turn away, as the version number will only be displayed for a little while before the screen moves onto other information displays.    If the pump has been active recently or has a reservoir installed, follow these steps:    Press the   button on your pump.      Scroll down with the   button to the bottom of the status display.      Read the bottom line of the display.",
            "title": "Pump Firmware"
        },
        {
            "location": "/setup/requirements/pump/#other-pumps",
            "text": "While we all would love to have our {insert your favorite manufacturer} pump be compatible with a DIY closed-loop system like Loop, unfortunately it just isn't possible right now.  There are efforts being made to crack the software code on other pumps (like Animas and Omnipod), and when they are successful...believe me...we will tell you about it!",
            "title": "Other pumps"
        },
        {
            "location": "/setup/requirements/pump/#finding-a-medtronic-pump",
            "text": "Finding a compatible Medtronic pump is probably the most difficult part for most new Loopers.  Our suggestion:    Talk to friends in the diabetic community.      Ask your endocrinologist.      Ask at a local JDRF chapter meeting if someone has an old backup pump they'd be willing to donate to you.      Join diabetic supply groups in Facebook; both for-trade and for-sale groups.      Check Craigslist often and be willing to expand your search area to include larger cities.      Search  Medwow  for used Medtronic pumps",
            "title": "Finding a Medtronic pump"
        },
        {
            "location": "/setup/requirements/pump/#safe-purchasing",
            "text": "If you choose to purchase from a remote or unknown seller, here are some tips for safe purchasing:    Use Paypal and purchase using the \"Goods and Services\" payment option.  This costs nothing for the buyer, but the seller will lose 2.95% of the sale to Paypal fees.  Paypal offers some protection for both buyer and seller in the event of fraud.      Ask for photos of the pump.  Check to make sure the serial number of the pump on the backside matches the serial number of the pump showing in the display menu.  Ask for a short video of the pump, or at least a photo of the pump turned on, so that you can see the pump's firmware and model number.  Cracks and some wear on these pumps is expected...these pumps are not usually free of any marks.  Many people are successfully looping on pumps that have cracks and rub marks...but you may want to ask if you are concerned about any you see.      Ask for shipping that includes a tracking number.  USPS Priority Mail's smallest box is a great option.  It's only $7.15 and includes tracking.  Ask the seller to add a small bit of packing protection such as bubble wrap around the pump to keep it safe during shipping.  Make sure you get a tracking number within a reasonable period of time after you have paid.      Red flags that may indicate a scam:    Asking for payment through \"friends and family\" on Paypal, especially if you don't know the person or have any solid references for them.  Paying in that way offers you no buyer protection.  It's just like giving the seller cash, so you had better trust the seller.      Offering an \"almost new\" pump is a big red flag.  These pumps should be at least 5 years old by now.  Do you really think a 5 year old pump should be unused and sitting in shrink wrap at this point?  Seems highly suspicious.      Not able to provide new pictures of the pump when requested.  Sure they posted some pictures with the ad, but what if they just downloaded them from other people's ads?  The seller should be able to furnish a couple \"new\" photos are your request.  A good one to ask for is the battery and reservoir tops so you can see the condition of those.",
            "title": "Safe Purchasing"
        },
        {
            "location": "/setup/requirements/pump/#pump-supplies",
            "text": "Medtronic will not typically want to sell pump supplies directly to customers who do not have an in-warranty Medtronic pump registered in their system.  Ask your insurance about purchasing pump supplies through a durable medical equipment (DME) provider.  If you are brand new to Medtronic infusion sites, you may want to ask for help from friends to try a variety of infusion sets before purchasing a full 90-day supply of any in particular.",
            "title": "Pump Supplies"
        },
        {
            "location": "/setup/requirements/cgm/",
            "text": "Continuous Glucose Monitor\n\u2301\n\n\nA continuous glucose monitor (CGM) provides Loop with current blood glucose readings.  These readings allow Loop to predict what the current glucose trend is, and predict the future glucose based on carbohydrate input and basal profiles. The following are the types of CGMs compatible with Loop.  CGM readings are a required part of looping.  If your Loop is unable to retreive BG data, it will not be able to loop.\n\n\nDexcom G5 CGM \n\u2301\n\n\nDexcom G5 receives CGM data directly to the Dexcom G5 Mobile app on your iPhone via Bluetooth.  It does not require the use of a G5 stand-alone receiver.\n\n\nDexcom G4 CGM with Share Receiver \n\u2301\n\n\nDexcom G4 Share system transmits CGM data from the transmitter to a Dexcom G4 Share Receiver.  The receiver, in turn, connects to the Dexcom Share2 app on your iPhone via Bluetooth.  The Share2 app uploads CGM data to the Dexcom servers.  \n\n\nMedtronic CGM \n\u2301\n\n\nThe Minimed Enlite CGM, available with the Medtronic 523/723 and 554/754, wirelessly sends blood glucose readings to the pump.  Loop can read the Medtronic CGM data directly from the pump using the RileyLink.  \n\n\nOffline Use\n\u2301\n\n\nOffline use means using Loop when there is no cell data or internet available.  For the offline Loop use, the iPhone's Bluetooth still needs to be active; and for Dexcom system's, the Share2 or G5 Mobile apps also still need to be active.  If you put your iPhone into Airplane mode, remember to turn back on the Bluetooth to keep your Loop running.\n\n\nDexcom Servers\n\u2301\n\n\nIn some instances, the Loop may fail to eavesdrop on the Bluetooth transmissions of the CGM systems.  When that happens, the Loop can pull directly from Dexcom Servers to get the data (assuming you have entered your Share account information in the Loop settings).  When Loop is operating in this mode, you will see a small cloud in the CGM reading in the Loop app.  Operating in this mode requires a working internet or cell connection.",
            "title": "CGM"
        },
        {
            "location": "/setup/requirements/cgm/#continuous-glucose-monitor",
            "text": "A continuous glucose monitor (CGM) provides Loop with current blood glucose readings.  These readings allow Loop to predict what the current glucose trend is, and predict the future glucose based on carbohydrate input and basal profiles. The following are the types of CGMs compatible with Loop.  CGM readings are a required part of looping.  If your Loop is unable to retreive BG data, it will not be able to loop.",
            "title": "Continuous Glucose Monitor"
        },
        {
            "location": "/setup/requirements/cgm/#dexcom-g5-cgm",
            "text": "Dexcom G5 receives CGM data directly to the Dexcom G5 Mobile app on your iPhone via Bluetooth.  It does not require the use of a G5 stand-alone receiver.",
            "title": "Dexcom G5 CGM "
        },
        {
            "location": "/setup/requirements/cgm/#dexcom-g4-cgm-with-share-receiver",
            "text": "Dexcom G4 Share system transmits CGM data from the transmitter to a Dexcom G4 Share Receiver.  The receiver, in turn, connects to the Dexcom Share2 app on your iPhone via Bluetooth.  The Share2 app uploads CGM data to the Dexcom servers.",
            "title": "Dexcom G4 CGM with Share Receiver "
        },
        {
            "location": "/setup/requirements/cgm/#medtronic-cgm",
            "text": "The Minimed Enlite CGM, available with the Medtronic 523/723 and 554/754, wirelessly sends blood glucose readings to the pump.  Loop can read the Medtronic CGM data directly from the pump using the RileyLink.",
            "title": "Medtronic CGM "
        },
        {
            "location": "/setup/requirements/cgm/#offline-use",
            "text": "Offline use means using Loop when there is no cell data or internet available.  For the offline Loop use, the iPhone's Bluetooth still needs to be active; and for Dexcom system's, the Share2 or G5 Mobile apps also still need to be active.  If you put your iPhone into Airplane mode, remember to turn back on the Bluetooth to keep your Loop running.",
            "title": "Offline Use"
        },
        {
            "location": "/setup/requirements/cgm/#dexcom-servers",
            "text": "In some instances, the Loop may fail to eavesdrop on the Bluetooth transmissions of the CGM systems.  When that happens, the Loop can pull directly from Dexcom Servers to get the data (assuming you have entered your Share account information in the Loop settings).  When Loop is operating in this mode, you will see a small cloud in the CGM reading in the Loop app.  Operating in this mode requires a working internet or cell connection.",
            "title": "Dexcom Servers"
        },
        {
            "location": "/setup/requirements/rileylink/",
            "text": "RileyLink\n\u2301\n\n\nThe RileyLink is an open-source hardware device that can bridge Bluetooth Low Energy (BLE) to 916MHz wireless communication. What does that mean to you? It means RileyLink is the communication highway between your insulin pump, CGM, and iPhone.\n\n\nLoop will not work without the RileyLink.\n\n\n\n\nThe RileyLink is available as a set of PCB files and software, with instructions on how to build your own RileyLink hardware module.  All this can be found here: \nRileyLink Github\n\nIf you aren\u2019t up to the task of building your own RileyLink (and most of us aren\u2019t), community members periodically do a production run of RileyLinks. You can place an order here: \nRileyLink order site\n\n\nWaiting for RileyLink\n\u2301\n\n\nYes, waiting for RileyLink to arrive is extremely difficult.  PLEASE be patient, since Loop CANNOT work without RileyLink.\n\n\nIf you're really dying to do something while RileyLink ships, consider these things below.\n\n\nFIRST AND FOREMOST:  Get used to Medtronic pump and start using it before Loop.  Sometimes switching pumps will lead to a change in your settings (basals, boluses, etc) simply by the way the new cannula delivers insulin.  It's a great idea to use your Medtronic pump and sets before you ever begin Loop so that you can have one less variable when you do start looping.  At least you can check if you need to adjust basals, etc when you change to Medtronic pumping.  Same with Dexcom.  If you are new to Dexcom, start using it before Loop.  Get to familiar with things like compression lows, sensor variability, and calibration timing before Loop use.\n\n\nBut, if you're familiar with your medtronic pump and dexcom, here's some ideas:\n\n\n\n\nProgram your pump with your basal patterns\n\n\nMake the pump settings required for Loop to work\n\n\nUpdate your iPhone's iOS, if needed, and back it up\n\n\nUpdate your Apple's OS X, if needed.\n\n\nUpdate your Apple Watch's OS (3.1)\n\n\nDownload Xcode from the Apple App Store on your Apple computer (this takes more time than you'd expect)\n\n\nSign up for a Developer Account, if you intend to.  Confirm your enrollment by checking your email afterwards.\n\n\nInstall Carthage (see Build page)\n\n\nDownload Loop source code (see Build page) and get started with Loop building\n\n\nMake customizations (see Build page)\n\n\nBuild Loop app onto your iPhone\n\n\nFill in the pump settings in your Loop app\n\n\nSet up a Nightscout site or update your existing site (optional)\n\n\nBookmark the Loop Docs page for future reference\n\n\nJoin \nGitter Loop channel\n and/or \nthe Looped Facebook Group\n\n\n\n\nBUT, then you must wait.  You can't go any further with Loop operations until you get the RileyLink.  However, if you do all those things above while you wait...you will be ready to go as soon as the postman knocks on your door with the delivery.",
            "title": "RileyLink"
        },
        {
            "location": "/setup/requirements/rileylink/#rileylink",
            "text": "The RileyLink is an open-source hardware device that can bridge Bluetooth Low Energy (BLE) to 916MHz wireless communication. What does that mean to you? It means RileyLink is the communication highway between your insulin pump, CGM, and iPhone.  Loop will not work without the RileyLink.   The RileyLink is available as a set of PCB files and software, with instructions on how to build your own RileyLink hardware module.  All this can be found here:  RileyLink Github \nIf you aren\u2019t up to the task of building your own RileyLink (and most of us aren\u2019t), community members periodically do a production run of RileyLinks. You can place an order here:  RileyLink order site",
            "title": "RileyLink"
        },
        {
            "location": "/setup/requirements/rileylink/#waiting-for-rileylink",
            "text": "Yes, waiting for RileyLink to arrive is extremely difficult.  PLEASE be patient, since Loop CANNOT work without RileyLink.  If you're really dying to do something while RileyLink ships, consider these things below.  FIRST AND FOREMOST:  Get used to Medtronic pump and start using it before Loop.  Sometimes switching pumps will lead to a change in your settings (basals, boluses, etc) simply by the way the new cannula delivers insulin.  It's a great idea to use your Medtronic pump and sets before you ever begin Loop so that you can have one less variable when you do start looping.  At least you can check if you need to adjust basals, etc when you change to Medtronic pumping.  Same with Dexcom.  If you are new to Dexcom, start using it before Loop.  Get to familiar with things like compression lows, sensor variability, and calibration timing before Loop use.  But, if you're familiar with your medtronic pump and dexcom, here's some ideas:   Program your pump with your basal patterns  Make the pump settings required for Loop to work  Update your iPhone's iOS, if needed, and back it up  Update your Apple's OS X, if needed.  Update your Apple Watch's OS (3.1)  Download Xcode from the Apple App Store on your Apple computer (this takes more time than you'd expect)  Sign up for a Developer Account, if you intend to.  Confirm your enrollment by checking your email afterwards.  Install Carthage (see Build page)  Download Loop source code (see Build page) and get started with Loop building  Make customizations (see Build page)  Build Loop app onto your iPhone  Fill in the pump settings in your Loop app  Set up a Nightscout site or update your existing site (optional)  Bookmark the Loop Docs page for future reference  Join  Gitter Loop channel  and/or  the Looped Facebook Group   BUT, then you must wait.  You can't go any further with Loop operations until you get the RileyLink.  However, if you do all those things above while you wait...you will be ready to go as soon as the postman knocks on your door with the delivery.",
            "title": "Waiting for RileyLink"
        },
        {
            "location": "/setup/requirements/computer/",
            "text": "Apple Computer\n\u2301\n\n\nApple regularly updates their iPhone software (iOS), computer software (macOS) and Xcode application.  Loop's team of developers works hard to update Loop code as the new Apple updates are pushed out.\n\n\n\n\nThe most recent version of iOS is 11\n\n\nThe most recent version of macOS is 10.12.6 (called Sierra)\n\n\nThe most recent version of Xcode is 9.0\n\n\nThe most recent version of Loop is 1.5\n\n\nThe most recent version of watchOS is 4.0\n\n\n\n\nThe way Apple updates tend to happen is that one equipment's update will tend to require updating other pieces of Apple equipment.  For example, if you update your iOS on the iPhone, you may need an updated version of Xcode to install a new Loop app onto your phone.  And the new Xcode will require the volunteer developers of Loop to make updates to the Loop source code.  Finally, new Xcode updates also frequently come with macOS updates on your computer.\n\n\nCurrently, you will need Xcode 9 and Sierra 10.12.6 to be able to build Loop 1.5.  Older versions of macOS or Xcode are not compatible with Loop v1.5.  Additionally, Loop v1.4 will not build on Xcode 9.\n\n\nWe do not recommend installing beta releases of Xcode, iOS or macOS on devices running Loop.  If you are considering an update to your Loop app, check to make sure your computer and Xcode have any available updates installed prior to building the new app.\n\n\nComputer access is only required when you are initially installing the Loop app, updating to a newer release, or making changes to the underlying Loop code.  You do NOT need access to an Apple computer in order to troubleshoot or change Loop settings, such as basal profiles or carb ratios.\n\n\nWhere can you find your computer\u2019s macOS version?  Click on the Apple icon in the upper left corner of your Mac\u2019s display.  Select \u201cAbout This Mac\u201d from the dropdown menu, and it will display the macOS version number.\n\n\n\n\n\n\n\n\n\nIf your computer is running an out-of-date macOS, you can read whether you can upgrade to the necessary macOS version \nhere\n.  The degree to which you can upgrade an older Apple computer will depend on the age and model of the computer.",
            "title": "Computer"
        },
        {
            "location": "/setup/requirements/computer/#apple-computer",
            "text": "Apple regularly updates their iPhone software (iOS), computer software (macOS) and Xcode application.  Loop's team of developers works hard to update Loop code as the new Apple updates are pushed out.   The most recent version of iOS is 11  The most recent version of macOS is 10.12.6 (called Sierra)  The most recent version of Xcode is 9.0  The most recent version of Loop is 1.5  The most recent version of watchOS is 4.0   The way Apple updates tend to happen is that one equipment's update will tend to require updating other pieces of Apple equipment.  For example, if you update your iOS on the iPhone, you may need an updated version of Xcode to install a new Loop app onto your phone.  And the new Xcode will require the volunteer developers of Loop to make updates to the Loop source code.  Finally, new Xcode updates also frequently come with macOS updates on your computer.  Currently, you will need Xcode 9 and Sierra 10.12.6 to be able to build Loop 1.5.  Older versions of macOS or Xcode are not compatible with Loop v1.5.  Additionally, Loop v1.4 will not build on Xcode 9.  We do not recommend installing beta releases of Xcode, iOS or macOS on devices running Loop.  If you are considering an update to your Loop app, check to make sure your computer and Xcode have any available updates installed prior to building the new app.  Computer access is only required when you are initially installing the Loop app, updating to a newer release, or making changes to the underlying Loop code.  You do NOT need access to an Apple computer in order to troubleshoot or change Loop settings, such as basal profiles or carb ratios.  Where can you find your computer\u2019s macOS version?  Click on the Apple icon in the upper left corner of your Mac\u2019s display.  Select \u201cAbout This Mac\u201d from the dropdown menu, and it will display the macOS version number.     If your computer is running an out-of-date macOS, you can read whether you can upgrade to the necessary macOS version  here .  The degree to which you can upgrade an older Apple computer will depend on the age and model of the computer.",
            "title": "Apple Computer"
        },
        {
            "location": "/setup/requirements/iphone/",
            "text": "iPhone\n\u2301\n\n\nLoop will run on on any iPhone that is running iOS 11 or later.\n\n\n\n\n\n\niPhone 7/7s+\n\n\n\n\n\n\niPhone 6/6+/6s/6s+/SE\n\n\n\n\n\n\niPhone 5/5c/5s \n\n\n\n\n\n\nWhere can you find your iPhone\u2019s iOS version?  Go to your iPhone\u2019s Settings>General>About.  The iOS will be listed under \u201cVersion\u201d\n\n\n\n\n\n\n\n\n\nIf you plan on using a 5th generation iPhone, the use of the \u201cs\u201d model is encouraged (iPhone 5s).  iPhone 5c has an older bluetooth system and battery drain is fairly significant, making it less ideal for Loop use.",
            "title": "iPhone"
        },
        {
            "location": "/setup/requirements/iphone/#iphone",
            "text": "Loop will run on on any iPhone that is running iOS 11 or later.    iPhone 7/7s+    iPhone 6/6+/6s/6s+/SE    iPhone 5/5c/5s     Where can you find your iPhone\u2019s iOS version?  Go to your iPhone\u2019s Settings>General>About.  The iOS will be listed under \u201cVersion\u201d     If you plan on using a 5th generation iPhone, the use of the \u201cs\u201d model is encouraged (iPhone 5s).  iPhone 5c has an older bluetooth system and battery drain is fairly significant, making it less ideal for Loop use.",
            "title": "iPhone"
        },
        {
            "location": "/setup/requirements/appledev/",
            "text": "Apple Developer Account\n\u2301\n\n\nThe \nApple Developer Program\n is Apple's system to provide the \ntools and resources\n for building, sharing, and using apps for Apple products.  Members of Apple's Developer Program can test apps on their own devices prior to submitting the App Store for distribution or sale.  Developers also get access to beta releases of new OS and iOS versions.  \n\n\nThe Loop app is not available for download in the App Store.  It needs to be built and installed by the individual users.  This means Loop users need to enroll as an individual (not an organization) in the Apple Developer Program in order to install the Loop app on their iPhone.  There are two types of individual \nenrollment in the Developer Program\n; free and paid.  You will need to have an Apple ID to sign up for in the Apple Developer Program.\n\n\nSometimes, Apple will send an email requiring confirmation before enrollment can be activated.  Other times, you may have to login to your developer account to confirm enrollment.  Be sure to check for those items if you are having problems when trying to add your Apple ID and developer account in Xcode preferences during build.\n\n\nFree membership\n\u2301\n\n\nFree membership comes with an important restriction.  While you can build the Loop app onto your iPhone, the app will expire after 7 days and need to be rebuilt in order to work again.  This means, every 7 days you will need access to an Apple computer, Xcode application, and your iPhone to rebuild the app.\n\n\nYou cannot rebuild the app on day 6 and expect to avoid downtime.  The same app cannot be rebuilt earlier than the 7 days...it will still expire on the 7th day.  You will know your app is expired by the fact that it simply won't open after 7 days.  When you click on it, it will momentarily give you a white screen and then immediately go back to your main iPhone screen.  \n\n\nFor free memberships, you are also limited to building 10 apps within a 7-day period.  Each new Main App Bundle Identifier that you use will \"count\" towards that limit.\n\n\nPaid membership\n\u2301\n\n\nPaid membership is $99 per year.  It allows you to build the Loop app and it will remain active for the entire year.  You only need to rebuild the app if you decide you are interested in updating for new features that may be released in subsequent Loop versions.\n\n\nLicense Agreement\n\u2301\n\n\nPeriodically, Apple will have updates to their Developer license agreements.  Your Loop app will fail to sign properly until your accept the new license agreement.  If you see the warning sign under your app signing, go to your \nDeveloper Account\n, sign in, and accept the new terms.\n\n\nApp IDs\n\u2301\n\n\nMany Loop users start with a free developer account as they test-drive the Loop.  When you build the app, you will be identifying that specific build of the app using a unique \nMain App Bundle Identifier\n and signing the app with a \"Team Name\" associated with your Developer membership.  That Main App Bundle Identifier cannot be used again when you switch to a paid account provisioning profile.  Why is this worth mentioning?  If you start with a free account and build Loop...when you switch to a paid account and build Loop, you will need to use an new Main App Bundle Identifier, new paid account team name for signing, and you will need to re-enter all your Loop settings (basal rates, ISF, carb ratios, etc.).\n\n\nWhen you build the Loop app in Xcode, you will select a signing \"team\" and Xcode will automatically generate a Provisioning Profile to \"sign\" the app...this is Apple's way of tracking the validity and safety of the app.  Free developer accounts will have a signing team that includes a \"(Personal Team)\" designation in the name.  Paid developer accounts will not have \"(Personal Team)\" in the name.  \n\n\n\n\n\n\n\n\n\nMultiple Loop apps\n\u2301\n\n\nYou can have multiple Loop apps built onto the same iPhone.  Many people who have the need to swtich between different profiles on a regular basis (such as t1ds who need school vs weekend profiles) use two different Loop apps to track the different profiles.  To build two Loop apps onto same phone, you simply need to use two different Main App Bundle Identifiers.  When switching between Loop apps, simply remember to close the unused Loop app so that the RileyLink can connect properly in the desired Loop app.  You can enable \"Patterns\" in your Medtronic pump to also switch quickly between basal profile patterns that correspond to the active Loop app.\n\n\nUsers of multiple Loop apps find it is helpful to rename the apps and use different app icons to differentiate between the two Loop apps.  Customizing app icons can be done following the instructions in the Build section of these docs.",
            "title": "Apple Developer"
        },
        {
            "location": "/setup/requirements/appledev/#apple-developer-account",
            "text": "The  Apple Developer Program  is Apple's system to provide the  tools and resources  for building, sharing, and using apps for Apple products.  Members of Apple's Developer Program can test apps on their own devices prior to submitting the App Store for distribution or sale.  Developers also get access to beta releases of new OS and iOS versions.    The Loop app is not available for download in the App Store.  It needs to be built and installed by the individual users.  This means Loop users need to enroll as an individual (not an organization) in the Apple Developer Program in order to install the Loop app on their iPhone.  There are two types of individual  enrollment in the Developer Program ; free and paid.  You will need to have an Apple ID to sign up for in the Apple Developer Program.  Sometimes, Apple will send an email requiring confirmation before enrollment can be activated.  Other times, you may have to login to your developer account to confirm enrollment.  Be sure to check for those items if you are having problems when trying to add your Apple ID and developer account in Xcode preferences during build.",
            "title": "Apple Developer Account"
        },
        {
            "location": "/setup/requirements/appledev/#free-membership",
            "text": "Free membership comes with an important restriction.  While you can build the Loop app onto your iPhone, the app will expire after 7 days and need to be rebuilt in order to work again.  This means, every 7 days you will need access to an Apple computer, Xcode application, and your iPhone to rebuild the app.  You cannot rebuild the app on day 6 and expect to avoid downtime.  The same app cannot be rebuilt earlier than the 7 days...it will still expire on the 7th day.  You will know your app is expired by the fact that it simply won't open after 7 days.  When you click on it, it will momentarily give you a white screen and then immediately go back to your main iPhone screen.    For free memberships, you are also limited to building 10 apps within a 7-day period.  Each new Main App Bundle Identifier that you use will \"count\" towards that limit.",
            "title": "Free membership"
        },
        {
            "location": "/setup/requirements/appledev/#paid-membership",
            "text": "Paid membership is $99 per year.  It allows you to build the Loop app and it will remain active for the entire year.  You only need to rebuild the app if you decide you are interested in updating for new features that may be released in subsequent Loop versions.",
            "title": "Paid membership"
        },
        {
            "location": "/setup/requirements/appledev/#license-agreement",
            "text": "Periodically, Apple will have updates to their Developer license agreements.  Your Loop app will fail to sign properly until your accept the new license agreement.  If you see the warning sign under your app signing, go to your  Developer Account , sign in, and accept the new terms.",
            "title": "License Agreement"
        },
        {
            "location": "/setup/requirements/appledev/#app-ids",
            "text": "Many Loop users start with a free developer account as they test-drive the Loop.  When you build the app, you will be identifying that specific build of the app using a unique  Main App Bundle Identifier  and signing the app with a \"Team Name\" associated with your Developer membership.  That Main App Bundle Identifier cannot be used again when you switch to a paid account provisioning profile.  Why is this worth mentioning?  If you start with a free account and build Loop...when you switch to a paid account and build Loop, you will need to use an new Main App Bundle Identifier, new paid account team name for signing, and you will need to re-enter all your Loop settings (basal rates, ISF, carb ratios, etc.).  When you build the Loop app in Xcode, you will select a signing \"team\" and Xcode will automatically generate a Provisioning Profile to \"sign\" the app...this is Apple's way of tracking the validity and safety of the app.  Free developer accounts will have a signing team that includes a \"(Personal Team)\" designation in the name.  Paid developer accounts will not have \"(Personal Team)\" in the name.",
            "title": "App IDs"
        },
        {
            "location": "/setup/requirements/appledev/#multiple-loop-apps",
            "text": "You can have multiple Loop apps built onto the same iPhone.  Many people who have the need to swtich between different profiles on a regular basis (such as t1ds who need school vs weekend profiles) use two different Loop apps to track the different profiles.  To build two Loop apps onto same phone, you simply need to use two different Main App Bundle Identifiers.  When switching between Loop apps, simply remember to close the unused Loop app so that the RileyLink can connect properly in the desired Loop app.  You can enable \"Patterns\" in your Medtronic pump to also switch quickly between basal profile patterns that correspond to the active Loop app.  Users of multiple Loop apps find it is helpful to rename the apps and use different app icons to differentiate between the two Loop apps.  Customizing app icons can be done following the instructions in the Build section of these docs.",
            "title": "Multiple Loop apps"
        },
        {
            "location": "/setup/build/installing/",
            "text": "Installing Loop\n\u2301\n\n\nThe overall installation process is pretty simple.  Loop is written in code that is stored online; available for us to download for free.  In order to compile all that code into a useable app on your iPhone, we need to use a free Apple program called Xcode.  Xcode takes all that code & makes an app...but Apple is particular about apps and installation on devices.  So, in order to put this app on our iPhones, we have to enroll in Apple's Developer Program.  Once you enroll as a developer, you will be able to \"sign\" the Loop app in Xcode so that it will properly install onto your iPhone.\n\n\nWhile all of this is straight forward...I'll tell you some hints upfront to save time.\n\n\n\n\nCheck your watchOS, iPhone OS, macOS first to see if they need updates.  Currently you'll need at least watchOS 4, iOS 10.3.3 (or iOS 11 if you are using an Apple watch) , macOS 10.12.6\n\n\nDownloading Xcode 9 can take 20-45 minutes depending on your internet connection speed.  You can do that ahead of time if you want to save yourself some waiting when you're ready to build.\n\n\nApple watches need to be paired with the iPhone BEFORE the Loop app is built onto the phone in order to have the Loop on the watch, too.  If you pair a new Apple watch later, you'll have to rebuild the Loop app onto the iPhone again, before the watch will work with Loop functions.\n\n\n\n\nSetup your Apple Computer\n\u2301\n\n\nVerify macOS\n\u2301\n\n\nYou need to be running macOS Sierra, at least version 10.12.6, so verify by clicking the apple logo in your computer display's upper left corner and selecting \"About this Mac\"\n\n\n\n\n\n\n\n\n\nIf your macOS is not Sierra, click on the \nSoftware Update\n button and update to Sierra.  If your computer is older than late 2009, you may not be able to update to Sierra.  You can check Sierra compatibility \nhere\n.\n\n\nInstall Homebrew and Carthage\n\u2301\n\n\nOpen the Terminal application on your computer.  It is located in the Applications folder, and then look in the Utilities subfolder for the Terminal application.\n\n\n\n\nCopy and paste the line below into Terminal prompt.  Press return after you paste it in.\n\n\n\n\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\n\n\nThere will be a prompt asking if you want to continue.  Press return to continue, then it may prompt for your password.  Enter your computer user password (don't worry, Terminal app doesn't show keystrokes when you enter passwords, but it is still reading your typing).  Wait while the script does its thing...you\u2019ll see info scroll by and then it will pause for awhile.  Eventually, it will be done and you\u2019ll see something that says \u201cInstallation successful\u201d and you\u2019ll have a ready Terminal prompt again.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nType \nbrew update\n and press return.\n\n\n\n\n\n\nType \nbrew install carthage\n and press return.  You can confirm carthage has been installed by running \ncarthage version\n.\n\n\n\n\n\n\nYou can close the Terminal application now.  You\u2019re done with it.  You do not need to do these steps again for any subsequent Loop builds.\n\n\nSetup your Apple Developer Account\n\u2301\n\n\nIn order to build your own copy of the Loop app onto your iPhone, you will need an Apple developer account.  You will have two options for your individual account; free or paid.\n\n\nIf you decide to enroll in a \nFREE\n developer account, here's what you need to know:\n\n\n\n\nLoop apps signed with a free developer team will expire after 7 days.  On the 7th day, your Loop app will simply turn white when you open it and then immediately close.  To rebuild the Loop app, you will have to find a computer and rebuild the app onto your iPhone again.  You cannot rebuild the app on day 5 (when it is convenient, for example)...hoping to reset the 7-day clock.  The app will still expire on the 7th day from when it was first signed and created.\n\n\nIf you decide to switch to a paid account after trying out the free account, you will need to rebuild your Loop app with a new main app bundle identifier (this will make sense when you go through the rest of these instructions...just make a mental note for now) and sign with the new team name.\n\n\n\n\nTo activate enrollment in a free developer account, you simply need to add your Apple ID to the Xcode application's Preferences in the Accounts tab, as outlined in the Xcode section below.  (Note: The Apple ID you use to sign up for the developer account does not need to be the same Apple ID as the Looping iPhone uses, for example parent's installing Loop on kid's iPhone.  Typically for the developer account, use the Apple ID of the person who will be doing the Loop app building.)  You don't have to specifically go into the Apple Developer Program website to enroll...Xcode automatically amends your Apple ID to include the free developer signing.  Once you add your Apple ID, you will see a team name listed, like the screenshot below, with a \n(personal team)\n designation to indicate that is a free developer team.\n\n\n\n\n\n\n\n\n\nIf you decide to enroll in a \nPAID\n developer account, here's what you need to know:\n\n\n\n\nLoop apps signed with a paid developer team will last for a full year.\n\n\nThe paid developer account is $99 per year and is default set to auto-renew annually.  You can change that selection in your developer account settings at any time.\n\n\n\n\nTo activate a paid account, go to the \nApple Developer website\n to sign-up for your individual account.  (Note: The Apple ID you use to sign up for the developer account does not need to be the same Apple ID as the Looping iPhone uses, for example parent's installing Loop on kid's iPhone.  Typically for the developer account, use the Apple ID of the person who will be doing the Loop app building.)   After you enroll, make sure you look for a confirmation email.  Apple says it can take up to 24 hours to confirm and setup a new Apple developer account, however some people have had the process only take minutes.  It can vary.\n\n\nPeriodically, Apple will update the license agreement for the Developer Program.  When that happens, you'll need to login to your developer account and accept the new license agreement before you can sign a new/updated Loop app again.\n\n\nSetup Xcode\n\u2301\n\n\nOpen the App Store application on your computer.  Search for Xcode and click on the link to download/install Xcode for free.  The file size is fairly large so expect about 20-45 minutes to download depending on your internet speed.  You will need Xcode 9 at least to build the current Loop app.  If you have a previous installation of Xcode, please make sure to check for updates first, before building Loop.\n\n\n\n\n\n\n\n\n\nOnce you have Xcode downloaded, open it from your Applications folder.  There may be a short delay as Xcode installs new command lines that the app uses.  Once Xcode is open and ready, we will start with adding your new developer account to Xcode.\n\n\nGo to the Xcode main menu (top left of your screen) and select Preferences from the Xcode dropdown menu.  Then, click on the \u201cAccounts\u201d tab in the Preferences window and then press the \n+\n in the lower left corner to add an Apple ID account.\n\n\n\n\n\n\n\n\n\nIf you are establishing a free developer account, you will simply enter your Apple ID in this section and Xcode will automatically create your free developer account. If you enrolled in the paid account, enter the Apple ID of the paid developer account.  If you never enrolled in the free account, you will not have a (personal team) showing.  The screenshot is what will appear if you have used both types of enrollment under the same Apple ID.\n\n\n\n\n\n\n\n\n\nFinally, we are going to turn on Line Numbers to make some later steps in the build process easier.  Go to the \"Text Editing\" tab in the top of the Preferences window.  Click the box to show Line Numbers.\n\n\n\n\n\n\n\n\n\nYou are now done setting up your Xcode environment.  Great job!  You will not need to redo the account setup steps on any subsequent builds or updates of your Loop app.  Xcode will remember these settings.\n\n\nDownload Loop Source Code\n\u2301\n\n\nNext, you\u2019ll need to obtain the Loop\u2019s source code in order to build the app on your computer.  If you click on the link below, a copy of the Loop source code\u2019s master branch will be downloaded to your Downloads folder.\n\n\n\n\n\nLoop: Master branch source code\n\n\n\nFYI: The Loop source code resides in \nGitHub\n within a repository.  A repository is kind of like a project's bookshelf, holding various books (aka branches) of a project.  The master branch is considered a stable version.  Any new features or options are first tested in a dev (short for \"development\") branch of the Loop.  New or inexperienced users should not build from the dev branch of Loop.  So if you hear of \"new features in dev\", these are things that may be eventually merged into the master branch once any bugs are worked out.\n\n\n\n\nIMPORTANT NOTES: Best practice is to leave your Loop source code in your Downloads folder.  If you store your Loop code a different folder than Downloads (such as your Documents folder or Desktop), make sure the specified folder is \nnot\n an iCloud drive.  Storing your Loop code in an iCloud drive folder will prevent Loop from building successfully.  How do you know if a folder is an iCloud drive?  Check your System Preferences.  If your System Preferences for iCloud is set as shown below, your Documents and Desktop folders are iCloud drives and \nNOT\n appropriate places to save your Loop download.\n\n\n\n\n\n\nDepending on your browser and settings, your Loop download may or may not automatically unzip.  If it does not unzip automatically, you can right-click on the zip file and choose to \"Open With\" Archive Utility.  This will create a blue folder called \nLoop-master\n.  HOWEVER, if you already have an existing \nLoop-master\n folder from a previous download, the name of the next download will be something like \nLoop-master (1)\n.  The problem with that folder name is that it contains a space...and spaces in the name will cause your Loop build to fail.  So, either delete old copies of Loop before downloading/unzipping or rename the folder(s) to ensure that NO SPACES are in the folder name.\n\n\n\n\n\n\n\n\n\nAdvanced method: Alternatively, if you are already familiar with git and Terminal app use, you could save a local copy of Loop source code to your computer using \ngit clone https://github.com/LoopKit/Loop.git\n.  This method would allow for saving local changes and updating, but does require some familiarity with git commands.  For new users, or those unfamiliar with git, we recommend using the direct download of master branch, above.  Loop is easily rebuilt and doesn't need to be saved locally long-term.\n\n\nInstalling Loop using Xcode\n\u2301\n\n\nHere\u2019s where the fun really begins.  You\u2019re about to build your Loop app.\n\n\nGo to your Downloads folder, open the \nLoop-master\n folder (or whatever you named it...double check that the folder does not contain any spaces in the folder name, as described above), and double click on Loop.xcodeproj.\n\n\n\n\n\n\n\n\n\nA warning may appear asking if you really want to open it, click Open.  Xcode will get itself organized and installed, this may take a few minutes.  The first time you load Xcode you may also be asked about allowing keychain access (yes, always).  Xcode will eventually open the Loop project...the first open of Xcode just takes a little longer than subsequent uses.\n\n\n\n\n\n\n\n\n\nOnce Xcode has finished indexing, the Loop project's various folders and files will appear in the far left column.  Scroll all the way down to the bottom of the list and then click on the file called Loop.xcconfig.  The middle portion of Xcode window will populate and this is where you will find the MAIN_APP_BUNDLE_IDENTIFIER. The default is com.loopkit\n\n\n\n\n\n\n\n\n\nYou need to change the MAIN_APP_BUNDLE_IDENTIFIER  to your own unique identifier.  Keep it in the reverse-domain syntax, meaning start with \ncom.\n and without any extensions after your chosen identifier.  The example below uses \ndynamicloop\n to replace the default \nloopkit\n...you choose your own phrase/name without spaces or periods.   If some other Looper has already used the same phrase, you will get a build error later in this build process...so make your name somehow slightly personal to you.   Hint: you can't use \ncom.dynamicloop\n or \ncom.loopkit\n or \ncom.loudnate\n for example because other Loopers have already used them. \nAfter you enter your new MAIN_APP_BUNDLE_IDENTIFIER, save the project using Command-S\n\n\n\n\n\n\n\n\n\nAfter saving the project, scroll back up to the top of the file list in the left-hand column.  At the very top, click on the blue Loop main project folder.  Then click on the box in the middle screen to reveal the targets' column.  The four targets we will sign in the upcoming steps are now easily viewable.\n\n\n\n\n\n\n\n\n\nConnect your iPhone via cable to the computer, select your iPhone from the very top of the drop down list.  Your \niPhone\u2019s personal name\n should be at the top of the list.  Don't accidentally select the generic iOS simulators listed below your iPhone's name.  If your iPhone has a lock enabled, it may be helpful to temporarily disable the lock until you finish building Loop app.  Xcode has a hard time building to locked iPhones.  You can reset your lock once Loop is done building onto the phone.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese next steps are usually only needed on the first Loop build; they can be skipped on subsequent builds.\n\n\n\n\nIf this is the first time your iPhone has been plugged in to this computer, you will need to open the iPhone and select \"Trust this Computer\" before your device will be useable in the menu selection.\n\n\nIf this is the first time you are building an app onto this iPhone using this particular Apple developer account, you will need to \u201cregister the device\u201d to your developer account.  The device registration screen, as shown below, should automatically appear when your iPhone is selected.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOnce you select your device (iPhone), let's start signing our four targets.  We will start with the Loop target, the first one on the target list.  Under the \"Signing\" area, select the dropdown menu where it currently says \"none\".  Choose your team that you'd like to sign with.  If you select a team name with (personal team), your app will expire after 7 days.  If you select a team name without that (personal team), your app will last a full year.  If you never signed up for a free developer account, you will not have a (personal team) showing.  Make sure you keep the \"automatically manage signing\" box checked above the team selection area.\n\n\n\n\n\n\n\n\n\nOnce you choose your signing team, Xcode will automatically generate provisioning profiles and signing certificates.  If this is the first time you are building on this iPhone with this developer account, you may again be prompted to register the device.  Simply click on the \"Register Device\" button to confirm.\n\n\n\n\n\n\n\n\n\nA successfully signed target will have a provisioning profile and signing certificate similar to the screenshot below.  Click on each of the three remaining targets, and repeat the signing steps by choosing the same team name as you selected in the first target.\n\n\n\n\n\n\n\n\n\nIf instead, you saw an error message like below then you will need to make a correction.  Remember how we said you needed to make a unique name in the previous steps?  You have either (1) failed to use a unique-to-you main app bundle ID or (2) failed to save the project after changing the main app bundle ID earlier.  Go back to the starting steps in building the Loop app, in the Loop.xcconfig file where you changed \ncom.loopkit\n.  Pick a new main app bundle ID and press command-s to save the project.  Then return to re-sign the targets with the updated info.\n\n\n\n\n\n\n\n\n\n\n\nDo you want customizations before you finish building?\n\n\nNew Loop users\n: Customizations are not a required part of any Loop build.  As you gain experience in how you use your Loop app, you may want to customize some of the features.  You can always update your Loop app to add customizations at a later time.  Really though, building with the standard, default installation is JUST FINE.\n\nIf you want any custom configurations to your Loop or Watch apps, now is the time to make them before you finish with the last step of Loop installation on your iPhone.  Follow the step-by-step instructions on the \nCode Customizations\n page.  When you\u2019ve completed those customizations, please return here and follow the next steps to finish the installation of Loop.\n\n\n\n\n\n\nHave you paired your Apple Watch already?\n\n\nNew Apple Watch users\n: If you have an unopened Apple watch and want to use it with Loop, first pair the watch with the iPhone before continuing to the next steps.  If you get a new watch after building the Loop app, you'll need to redo your Loop build. (Don't worry, it's as easy as pressing play on your saved Loop project.)\n\n\nExisting Apple Watch users\n: Please update your watchOS prior to building Loop app.  The current version of Loop (v1.5) requires watchOS 4.\n\n\n\n\nAll done with any customizations? Have your Apple watch paired and updated?  Let\u2019s finish the installation of the Loop app onto your iPhone.  Double check to make sure your iPhone's name is still selected and then press the \u201cplay\u201d button (or build button) to start Xcode on its way.  You\u2019ll see the progression of the build in the status window.  If the build is successful, you'll see a brief pop-up graphic saying \"Build succeeded\" and then it will say \"running Loop\" in the status bar. (Troubleshooting tips for common build errors are below, too...scroll down)\n\n\n\n\n\n\n\n\n\nIf this is the first time you have installed an app on your iPhone using your Developer Account, you may get a warning like this.  Just follow the directions in the warning for what you need to do in your iPhone settings, and the issue resolves very quickly.  Click ok and you can safely disconnect your iPhone from the computer.  (If you don\u2019t get a warning and the Loop app installs but does not open, you may still need to go to Settings->General->Device Management and enable trust for your Developer Account.)\n\n\n\n\n\n\n\n\n\nYou can confirm Loop has installed on your phone simply by looking on the iPhone.  Turn it on and check if the Loop app is running.  Brand new Loop apps will usually have a screen open immediately asking about allowing Loop notifications and Health App access.  Updated Loop apps won't usually show any special screen after a successful build.\n\n\n\n\nCONGRATS!  YOU JUST INSTALLED LOOP!\n\n\nYou can now begin configuring your Loop settings.\n\n\n\n\n\n\nWarning\n\n\nIf you encountered any build errors in Xcode, please review the \nBuild Errors\n page.",
            "title": "Installing"
        },
        {
            "location": "/setup/build/installing/#installing-loop",
            "text": "The overall installation process is pretty simple.  Loop is written in code that is stored online; available for us to download for free.  In order to compile all that code into a useable app on your iPhone, we need to use a free Apple program called Xcode.  Xcode takes all that code & makes an app...but Apple is particular about apps and installation on devices.  So, in order to put this app on our iPhones, we have to enroll in Apple's Developer Program.  Once you enroll as a developer, you will be able to \"sign\" the Loop app in Xcode so that it will properly install onto your iPhone.  While all of this is straight forward...I'll tell you some hints upfront to save time.   Check your watchOS, iPhone OS, macOS first to see if they need updates.  Currently you'll need at least watchOS 4, iOS 10.3.3 (or iOS 11 if you are using an Apple watch) , macOS 10.12.6  Downloading Xcode 9 can take 20-45 minutes depending on your internet connection speed.  You can do that ahead of time if you want to save yourself some waiting when you're ready to build.  Apple watches need to be paired with the iPhone BEFORE the Loop app is built onto the phone in order to have the Loop on the watch, too.  If you pair a new Apple watch later, you'll have to rebuild the Loop app onto the iPhone again, before the watch will work with Loop functions.",
            "title": "Installing Loop"
        },
        {
            "location": "/setup/build/installing/#setup-your-apple-computer",
            "text": "",
            "title": "Setup your Apple Computer"
        },
        {
            "location": "/setup/build/installing/#verify-macos",
            "text": "You need to be running macOS Sierra, at least version 10.12.6, so verify by clicking the apple logo in your computer display's upper left corner and selecting \"About this Mac\"     If your macOS is not Sierra, click on the  Software Update  button and update to Sierra.  If your computer is older than late 2009, you may not be able to update to Sierra.  You can check Sierra compatibility  here .",
            "title": "Verify macOS"
        },
        {
            "location": "/setup/build/installing/#install-homebrew-and-carthage",
            "text": "Open the Terminal application on your computer.  It is located in the Applications folder, and then look in the Utilities subfolder for the Terminal application.   Copy and paste the line below into Terminal prompt.  Press return after you paste it in.   /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"   There will be a prompt asking if you want to continue.  Press return to continue, then it may prompt for your password.  Enter your computer user password (don't worry, Terminal app doesn't show keystrokes when you enter passwords, but it is still reading your typing).  Wait while the script does its thing...you\u2019ll see info scroll by and then it will pause for awhile.  Eventually, it will be done and you\u2019ll see something that says \u201cInstallation successful\u201d and you\u2019ll have a ready Terminal prompt again.        Type  brew update  and press return.    Type  brew install carthage  and press return.  You can confirm carthage has been installed by running  carthage version .    You can close the Terminal application now.  You\u2019re done with it.  You do not need to do these steps again for any subsequent Loop builds.",
            "title": "Install Homebrew and Carthage"
        },
        {
            "location": "/setup/build/installing/#setup-your-apple-developer-account",
            "text": "In order to build your own copy of the Loop app onto your iPhone, you will need an Apple developer account.  You will have two options for your individual account; free or paid.  If you decide to enroll in a  FREE  developer account, here's what you need to know:   Loop apps signed with a free developer team will expire after 7 days.  On the 7th day, your Loop app will simply turn white when you open it and then immediately close.  To rebuild the Loop app, you will have to find a computer and rebuild the app onto your iPhone again.  You cannot rebuild the app on day 5 (when it is convenient, for example)...hoping to reset the 7-day clock.  The app will still expire on the 7th day from when it was first signed and created.  If you decide to switch to a paid account after trying out the free account, you will need to rebuild your Loop app with a new main app bundle identifier (this will make sense when you go through the rest of these instructions...just make a mental note for now) and sign with the new team name.   To activate enrollment in a free developer account, you simply need to add your Apple ID to the Xcode application's Preferences in the Accounts tab, as outlined in the Xcode section below.  (Note: The Apple ID you use to sign up for the developer account does not need to be the same Apple ID as the Looping iPhone uses, for example parent's installing Loop on kid's iPhone.  Typically for the developer account, use the Apple ID of the person who will be doing the Loop app building.)  You don't have to specifically go into the Apple Developer Program website to enroll...Xcode automatically amends your Apple ID to include the free developer signing.  Once you add your Apple ID, you will see a team name listed, like the screenshot below, with a  (personal team)  designation to indicate that is a free developer team.     If you decide to enroll in a  PAID  developer account, here's what you need to know:   Loop apps signed with a paid developer team will last for a full year.  The paid developer account is $99 per year and is default set to auto-renew annually.  You can change that selection in your developer account settings at any time.   To activate a paid account, go to the  Apple Developer website  to sign-up for your individual account.  (Note: The Apple ID you use to sign up for the developer account does not need to be the same Apple ID as the Looping iPhone uses, for example parent's installing Loop on kid's iPhone.  Typically for the developer account, use the Apple ID of the person who will be doing the Loop app building.)   After you enroll, make sure you look for a confirmation email.  Apple says it can take up to 24 hours to confirm and setup a new Apple developer account, however some people have had the process only take minutes.  It can vary.  Periodically, Apple will update the license agreement for the Developer Program.  When that happens, you'll need to login to your developer account and accept the new license agreement before you can sign a new/updated Loop app again.",
            "title": "Setup your Apple Developer Account"
        },
        {
            "location": "/setup/build/installing/#setup-xcode",
            "text": "Open the App Store application on your computer.  Search for Xcode and click on the link to download/install Xcode for free.  The file size is fairly large so expect about 20-45 minutes to download depending on your internet speed.  You will need Xcode 9 at least to build the current Loop app.  If you have a previous installation of Xcode, please make sure to check for updates first, before building Loop.     Once you have Xcode downloaded, open it from your Applications folder.  There may be a short delay as Xcode installs new command lines that the app uses.  Once Xcode is open and ready, we will start with adding your new developer account to Xcode.  Go to the Xcode main menu (top left of your screen) and select Preferences from the Xcode dropdown menu.  Then, click on the \u201cAccounts\u201d tab in the Preferences window and then press the  +  in the lower left corner to add an Apple ID account.     If you are establishing a free developer account, you will simply enter your Apple ID in this section and Xcode will automatically create your free developer account. If you enrolled in the paid account, enter the Apple ID of the paid developer account.  If you never enrolled in the free account, you will not have a (personal team) showing.  The screenshot is what will appear if you have used both types of enrollment under the same Apple ID.     Finally, we are going to turn on Line Numbers to make some later steps in the build process easier.  Go to the \"Text Editing\" tab in the top of the Preferences window.  Click the box to show Line Numbers.     You are now done setting up your Xcode environment.  Great job!  You will not need to redo the account setup steps on any subsequent builds or updates of your Loop app.  Xcode will remember these settings.",
            "title": "Setup Xcode"
        },
        {
            "location": "/setup/build/installing/#download-loop-source-code",
            "text": "Next, you\u2019ll need to obtain the Loop\u2019s source code in order to build the app on your computer.  If you click on the link below, a copy of the Loop source code\u2019s master branch will be downloaded to your Downloads folder.   Loop: Master branch source code  \nFYI: The Loop source code resides in  GitHub  within a repository.  A repository is kind of like a project's bookshelf, holding various books (aka branches) of a project.  The master branch is considered a stable version.  Any new features or options are first tested in a dev (short for \"development\") branch of the Loop.  New or inexperienced users should not build from the dev branch of Loop.  So if you hear of \"new features in dev\", these are things that may be eventually merged into the master branch once any bugs are worked out.   IMPORTANT NOTES: Best practice is to leave your Loop source code in your Downloads folder.  If you store your Loop code a different folder than Downloads (such as your Documents folder or Desktop), make sure the specified folder is  not  an iCloud drive.  Storing your Loop code in an iCloud drive folder will prevent Loop from building successfully.  How do you know if a folder is an iCloud drive?  Check your System Preferences.  If your System Preferences for iCloud is set as shown below, your Documents and Desktop folders are iCloud drives and  NOT  appropriate places to save your Loop download.   \nDepending on your browser and settings, your Loop download may or may not automatically unzip.  If it does not unzip automatically, you can right-click on the zip file and choose to \"Open With\" Archive Utility.  This will create a blue folder called  Loop-master .  HOWEVER, if you already have an existing  Loop-master  folder from a previous download, the name of the next download will be something like  Loop-master (1) .  The problem with that folder name is that it contains a space...and spaces in the name will cause your Loop build to fail.  So, either delete old copies of Loop before downloading/unzipping or rename the folder(s) to ensure that NO SPACES are in the folder name.     Advanced method: Alternatively, if you are already familiar with git and Terminal app use, you could save a local copy of Loop source code to your computer using  git clone https://github.com/LoopKit/Loop.git .  This method would allow for saving local changes and updating, but does require some familiarity with git commands.  For new users, or those unfamiliar with git, we recommend using the direct download of master branch, above.  Loop is easily rebuilt and doesn't need to be saved locally long-term.",
            "title": "Download Loop Source Code"
        },
        {
            "location": "/setup/build/installing/#installing-loop-using-xcode",
            "text": "Here\u2019s where the fun really begins.  You\u2019re about to build your Loop app.  Go to your Downloads folder, open the  Loop-master  folder (or whatever you named it...double check that the folder does not contain any spaces in the folder name, as described above), and double click on Loop.xcodeproj.     A warning may appear asking if you really want to open it, click Open.  Xcode will get itself organized and installed, this may take a few minutes.  The first time you load Xcode you may also be asked about allowing keychain access (yes, always).  Xcode will eventually open the Loop project...the first open of Xcode just takes a little longer than subsequent uses.     Once Xcode has finished indexing, the Loop project's various folders and files will appear in the far left column.  Scroll all the way down to the bottom of the list and then click on the file called Loop.xcconfig.  The middle portion of Xcode window will populate and this is where you will find the MAIN_APP_BUNDLE_IDENTIFIER. The default is com.loopkit     You need to change the MAIN_APP_BUNDLE_IDENTIFIER  to your own unique identifier.  Keep it in the reverse-domain syntax, meaning start with  com.  and without any extensions after your chosen identifier.  The example below uses  dynamicloop  to replace the default  loopkit ...you choose your own phrase/name without spaces or periods.   If some other Looper has already used the same phrase, you will get a build error later in this build process...so make your name somehow slightly personal to you.   Hint: you can't use  com.dynamicloop  or  com.loopkit  or  com.loudnate  for example because other Loopers have already used them.  After you enter your new MAIN_APP_BUNDLE_IDENTIFIER, save the project using Command-S     After saving the project, scroll back up to the top of the file list in the left-hand column.  At the very top, click on the blue Loop main project folder.  Then click on the box in the middle screen to reveal the targets' column.  The four targets we will sign in the upcoming steps are now easily viewable.     Connect your iPhone via cable to the computer, select your iPhone from the very top of the drop down list.  Your  iPhone\u2019s personal name  should be at the top of the list.  Don't accidentally select the generic iOS simulators listed below your iPhone's name.  If your iPhone has a lock enabled, it may be helpful to temporarily disable the lock until you finish building Loop app.  Xcode has a hard time building to locked iPhones.  You can reset your lock once Loop is done building onto the phone.         These next steps are usually only needed on the first Loop build; they can be skipped on subsequent builds.   If this is the first time your iPhone has been plugged in to this computer, you will need to open the iPhone and select \"Trust this Computer\" before your device will be useable in the menu selection.  If this is the first time you are building an app onto this iPhone using this particular Apple developer account, you will need to \u201cregister the device\u201d to your developer account.  The device registration screen, as shown below, should automatically appear when your iPhone is selected.            Once you select your device (iPhone), let's start signing our four targets.  We will start with the Loop target, the first one on the target list.  Under the \"Signing\" area, select the dropdown menu where it currently says \"none\".  Choose your team that you'd like to sign with.  If you select a team name with (personal team), your app will expire after 7 days.  If you select a team name without that (personal team), your app will last a full year.  If you never signed up for a free developer account, you will not have a (personal team) showing.  Make sure you keep the \"automatically manage signing\" box checked above the team selection area.     Once you choose your signing team, Xcode will automatically generate provisioning profiles and signing certificates.  If this is the first time you are building on this iPhone with this developer account, you may again be prompted to register the device.  Simply click on the \"Register Device\" button to confirm.     A successfully signed target will have a provisioning profile and signing certificate similar to the screenshot below.  Click on each of the three remaining targets, and repeat the signing steps by choosing the same team name as you selected in the first target.     If instead, you saw an error message like below then you will need to make a correction.  Remember how we said you needed to make a unique name in the previous steps?  You have either (1) failed to use a unique-to-you main app bundle ID or (2) failed to save the project after changing the main app bundle ID earlier.  Go back to the starting steps in building the Loop app, in the Loop.xcconfig file where you changed  com.loopkit .  Pick a new main app bundle ID and press command-s to save the project.  Then return to re-sign the targets with the updated info.      Do you want customizations before you finish building?  New Loop users : Customizations are not a required part of any Loop build.  As you gain experience in how you use your Loop app, you may want to customize some of the features.  You can always update your Loop app to add customizations at a later time.  Really though, building with the standard, default installation is JUST FINE. \nIf you want any custom configurations to your Loop or Watch apps, now is the time to make them before you finish with the last step of Loop installation on your iPhone.  Follow the step-by-step instructions on the  Code Customizations  page.  When you\u2019ve completed those customizations, please return here and follow the next steps to finish the installation of Loop.    Have you paired your Apple Watch already?  New Apple Watch users : If you have an unopened Apple watch and want to use it with Loop, first pair the watch with the iPhone before continuing to the next steps.  If you get a new watch after building the Loop app, you'll need to redo your Loop build. (Don't worry, it's as easy as pressing play on your saved Loop project.)  Existing Apple Watch users : Please update your watchOS prior to building Loop app.  The current version of Loop (v1.5) requires watchOS 4.   All done with any customizations? Have your Apple watch paired and updated?  Let\u2019s finish the installation of the Loop app onto your iPhone.  Double check to make sure your iPhone's name is still selected and then press the \u201cplay\u201d button (or build button) to start Xcode on its way.  You\u2019ll see the progression of the build in the status window.  If the build is successful, you'll see a brief pop-up graphic saying \"Build succeeded\" and then it will say \"running Loop\" in the status bar. (Troubleshooting tips for common build errors are below, too...scroll down)     If this is the first time you have installed an app on your iPhone using your Developer Account, you may get a warning like this.  Just follow the directions in the warning for what you need to do in your iPhone settings, and the issue resolves very quickly.  Click ok and you can safely disconnect your iPhone from the computer.  (If you don\u2019t get a warning and the Loop app installs but does not open, you may still need to go to Settings->General->Device Management and enable trust for your Developer Account.)     You can confirm Loop has installed on your phone simply by looking on the iPhone.  Turn it on and check if the Loop app is running.  Brand new Loop apps will usually have a screen open immediately asking about allowing Loop notifications and Health App access.  Updated Loop apps won't usually show any special screen after a successful build.   CONGRATS!  YOU JUST INSTALLED LOOP!  You can now begin configuring your Loop settings.    Warning  If you encountered any build errors in Xcode, please review the  Build Errors  page.",
            "title": "Installing Loop using Xcode"
        },
        {
            "location": "/setup/build/build_errors/",
            "text": "Build Errors\n\u2301\n\n\nYellow Error Alerts\n\u2301\n\n\nYellow error alerts\n do not cause the build to fail, those are just warnings.  Occasionally, a Loop version may have some minor discrepencies that cause a yellow alert...but you can ignore those.\n\n\n\n\n\n\n\n\n\nRed Error Alerts\n\u2301\n\n\nRed error alerts\n will prevent Loop from building on your phone, and you can read what the failure was.  The most common red error alerts are:\n\n\n\n\n\"\nThe Apple Developer Program License Agreement has been updated,  In order to access certain membership resources, you must accept the latest license agreement.\n\"  You'll need to log onto your developer account at \ndeveloper.apple.com\n and accept the latest license agreement.\n\n\n\n\n\n\n\n\"\nSwift Language Version\u201d (SWIFT_VERSION) is required to be configured correctly\n for targets which use Swift. Use the [Edit > Convert > To Current Swift Syntax\u2026] menu to choose a Swift version or use the Build Settings editor to configure the build setting directly\"  or also \"Could not locate device support files.  This iPhone is running iOS 11, which may not be supported by this version of Xcode.\"  You will need to go to your computer's App Store and install the Xcode app update.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\nSwift Compilier Error.  Module compiled with Swift 4.0 cannot be imported in Swift 4.0.2\n\"  Xcode was recently updated to version 9.1, and the currently Loop master branch will produce this error message if you are building with Xcode 9.1.\n\n\n\n\n\n\nYou can build with the Loop's dev branch (the dev branch has the fix built in) or just perform the following steps, if building with master branch:\n\n\nClose Xcode\n\n\nOpen Terminal App\n\n\nNavigate to your Loop download by doing the command:\n    \ncd downloads/Loop-master\n\n    (or whatever you named your Loop folder...go check)\n\n\nNow use the command:\n    \ncarthage bootstrap\n\n    It will run for about 4-5 minutes and then show you a screen like below.\n        \n\n        \n\n        \n\n\nIf during the run of \ncarthage bootstrap\n, you instead see an error message like below:\n                \n\n                \n\n                \n\n                \n\n                Please go to your Xcode preferences, under the Locations tab, select \nXcode 9.1\n under the Command Line Tools\n                \n\n                \n\n                \n\n\nReopen your Loop project in Xcode, select your iPhone, and press the build button. You'll still see some yellow alerts, but those are fine.\n        \n\n        \n\n        \n\n\n\n\n\n\n\"\nSwift Compilier Error.  Module compiled with Swift 3.1 cannot be imported in Swift 3.2\n\"  Make sure your Xcode and Loop source code are updated (see item above). \nOlder Loop versions (older than v1.5) will not compile with the new Xcode 9 app.\n\n\n\n\n\n\n\n\n\"\nEmbedded Binary Validation Utility.  error: Embedded binary's bundle identifier is not prefixed with the parent app's bundle identifier\n\".  This error usually happens because you've used an incorrect syntax in the MAIN_APP_BUNDLE_ID (like adding an extension to it) or forgotten to save project after the MAIN_APP_BUNDLE_ID was changed (the save forces Xcode to update all the targets to use the Main App Bundle ID within their individual bundle names).  In any case however, usually this error is most easily solved by closing out your project, deleting the download folder, and starting with a fresh download of Loop app.  The next time you build, make sure to follow the directions carefully to use a MAIN_APP_BUNDLE_ID in the right format and press \ncommand-s\n to force Xcode to update the targets' naming scheme correction.\n\n\n\n\n\n\n\n\"\nAbort with payload\n\"  Your app will only open briefly with a white screen and then close, if you build with this error.  This error message is cause by having your Loop folder either (1) saved into an iCloud mapped drive or (2) having a space in the name of your downloaded Loop source code folder.  Rename the folder to have no spaces and/or move it back to the Downloads folder, then rebuild.\n\n\n\n\n\n\n\n\"\nShell Script Invocation Error.  Command /bin/sh failed with exit code 127\n\"  This error code is happening for Loopers updating to Loop who used carthage.pkg and don't have homebrew installed.  We have since updated the installation docs, so new users likely won't run into this error.  But, if you are an existing Looper encountering this error message while trying to update to Loop v1.5, please open your Terminal app found in the Applications>>Utilities folder and then enter \n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n  Confirm installation by pressing enter, and then typing in your computer password.  When the installation finishes, use the command \nbrew link --overwrite carthage\n.  After those two steps, you can close out Terminal app, return to Xcode and press the build/play button again.\n\n\n\n\n\n\n\nApple watch app is not appearing\n.  Usually because you have not updated to watchOS 4 prior to when you built Loop, or you didn't have your Apple watch paired at the time of building Loop.  Don't forget to open the iPhone's Watch app, select My Watch tab on the bottom left, scroll all the way down, and click \nInstall\n for the Loop app listed at the very bottom under \"available apps\".",
            "title": "Build Errors"
        },
        {
            "location": "/setup/build/build_errors/#build-errors",
            "text": "",
            "title": "Build Errors"
        },
        {
            "location": "/setup/build/build_errors/#yellow-error-alerts",
            "text": "Yellow error alerts  do not cause the build to fail, those are just warnings.  Occasionally, a Loop version may have some minor discrepencies that cause a yellow alert...but you can ignore those.",
            "title": "Yellow Error Alerts"
        },
        {
            "location": "/setup/build/build_errors/#red-error-alerts",
            "text": "Red error alerts  will prevent Loop from building on your phone, and you can read what the failure was.  The most common red error alerts are:   \" The Apple Developer Program License Agreement has been updated,  In order to access certain membership resources, you must accept the latest license agreement. \"  You'll need to log onto your developer account at  developer.apple.com  and accept the latest license agreement.    \" Swift Language Version\u201d (SWIFT_VERSION) is required to be configured correctly  for targets which use Swift. Use the [Edit > Convert > To Current Swift Syntax\u2026] menu to choose a Swift version or use the Build Settings editor to configure the build setting directly\"  or also \"Could not locate device support files.  This iPhone is running iOS 11, which may not be supported by this version of Xcode.\"  You will need to go to your computer's App Store and install the Xcode app update.          \" Swift Compilier Error.  Module compiled with Swift 4.0 cannot be imported in Swift 4.0.2 \"  Xcode was recently updated to version 9.1, and the currently Loop master branch will produce this error message if you are building with Xcode 9.1.   \nYou can build with the Loop's dev branch (the dev branch has the fix built in) or just perform the following steps, if building with master branch:  Close Xcode  Open Terminal App  Navigate to your Loop download by doing the command:\n     cd downloads/Loop-master \n    (or whatever you named your Loop folder...go check)  Now use the command:\n     carthage bootstrap \n    It will run for about 4-5 minutes and then show you a screen like below.\n         \n         \n          If during the run of  carthage bootstrap , you instead see an error message like below:\n                 \n                 \n                 \n                 \n                Please go to your Xcode preferences, under the Locations tab, select  Xcode 9.1  under the Command Line Tools\n                 \n                 \n                  Reopen your Loop project in Xcode, select your iPhone, and press the build button. You'll still see some yellow alerts, but those are fine.\n         \n         \n            \" Swift Compilier Error.  Module compiled with Swift 3.1 cannot be imported in Swift 3.2 \"  Make sure your Xcode and Loop source code are updated (see item above).  Older Loop versions (older than v1.5) will not compile with the new Xcode 9 app.     \" Embedded Binary Validation Utility.  error: Embedded binary's bundle identifier is not prefixed with the parent app's bundle identifier \".  This error usually happens because you've used an incorrect syntax in the MAIN_APP_BUNDLE_ID (like adding an extension to it) or forgotten to save project after the MAIN_APP_BUNDLE_ID was changed (the save forces Xcode to update all the targets to use the Main App Bundle ID within their individual bundle names).  In any case however, usually this error is most easily solved by closing out your project, deleting the download folder, and starting with a fresh download of Loop app.  The next time you build, make sure to follow the directions carefully to use a MAIN_APP_BUNDLE_ID in the right format and press  command-s  to force Xcode to update the targets' naming scheme correction.    \" Abort with payload \"  Your app will only open briefly with a white screen and then close, if you build with this error.  This error message is cause by having your Loop folder either (1) saved into an iCloud mapped drive or (2) having a space in the name of your downloaded Loop source code folder.  Rename the folder to have no spaces and/or move it back to the Downloads folder, then rebuild.    \" Shell Script Invocation Error.  Command /bin/sh failed with exit code 127 \"  This error code is happening for Loopers updating to Loop who used carthage.pkg and don't have homebrew installed.  We have since updated the installation docs, so new users likely won't run into this error.  But, if you are an existing Looper encountering this error message while trying to update to Loop v1.5, please open your Terminal app found in the Applications>>Utilities folder and then enter  /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"   Confirm installation by pressing enter, and then typing in your computer password.  When the installation finishes, use the command  brew link --overwrite carthage .  After those two steps, you can close out Terminal app, return to Xcode and press the build/play button again.    Apple watch app is not appearing .  Usually because you have not updated to watchOS 4 prior to when you built Loop, or you didn't have your Apple watch paired at the time of building Loop.  Don't forget to open the iPhone's Watch app, select My Watch tab on the bottom left, scroll all the way down, and click  Install  for the Loop app listed at the very bottom under \"available apps\".",
            "title": "Red Error Alerts"
        },
        {
            "location": "/setup/build/code_customization/",
            "text": "Code Customizations\n\u2301\n\n\nBased on Loop users\u2019 experience, there are some customizations that you may want to incorporate ahead of building your Loop app and Apple Watch app.  These customizations must be done prior to building the Loop app onto your iPhone, they cannot be done from within the app itself.\n\n\n[Note: To help you find the Line numbers in Xcode, it may be helpful to turn them on now.  Go to Xcode Preferences, under Text Editing, click the box to Show Line Numbers.  Every effort will be made to update the line numbers as the code is updated periodically, but there may be times where the screenshots and line numbers are slightly different than the current version of Loop code.]\n\n\nDisable TouchID for Bolus\n\u2301\n\n\nIf you have TouchID enabled as part of your iPhone security (thumbprint), you will have to confirm each bolus with a thumbprint as part of standard Loop build.  If you would like to disable the TouchID for bolusing (but still keep TouchID for the rest of your normal iPhone use), you can do that by modifying Line 191 in the Loop>>View Controllers>>BolusViewController.swift.  Add the \nfalse &&\n as shown in the screenshot below:\n\n\n\n\n\n\n\n\n\nWorkout Range Duration\n\u2301\n\n\n\nIf you\u2019d like more than just the standard 1 or 2 hour duration for the Workout Range, you can add or modify the code to add another time interval or edit the existing ones.\n\n\nGo to the Loop>>Extensions>>UIAlertController.swift and modify Line 30.  The default has 1 and 2 hours as shown where the arrow is pointing in the screenshot.  You can edit those to whatever duration you want (in units of hours) and add a duration if you prefer.  If you\u2019d like 1, 2, and 3 hours options...simply edit the numbers in the brackets to read [1, 2, 3]. It is possible to enter less than 1 hour intervals such as 15min, 30 min, 45 min by editing the brackets to read [0.25, 0.5, 0.75].\n\n\n\n\n\n\n\n\n\nDefault Carb Absorption Times\n\u2301\n\n\n\n\nLoop\u2019s default carb absorption times are based on the high, medium, and low glycemic index absorption curves presented in \nThink Like A Pancreas\n by Gary Scheiner.  Currently the lollipop icon is set for 2 hours, taco icon for 3 hours, and pizza icon for 4 hours.  \n\n\nYou can modify these defaults to suit your needs, however modification of these values it not as helpful/common as previous Loop versions.  Ever since Loop v1.4, Loop has included dynamic carb absorption means that Loop will start with your entered carb absoprtion time, mutliply it by 1.5, and then dynamically adjust the absorption time (either shorter or longer) based on the observed BG impacts.  So, typically, most people are finding that modification of the default carb absorption times is no longer necessary.\n\n\nIf you would like to modify those defaults, you can do so in the Loop>>Managers>>LoopDataManager.swift Lines 63-65.  Note the times are in hours, not minutes, in the code.\n\n\n\n\n\n\n\n\n\nExponential Insulin Curve\n\u2301\n\n\nThe Exponential Insulin Curve Models (Rapid-Acting Adult, Rapid-Acting Child, and Fiasp) are defaulted to an insulin duration of 360 minutes...but the peak activity of the various curves differs:\n\n\n\n\nRapid-acting adult curve peaks at 75 minutes\n\n\nRapid-acting child curve peaks at 65 minutes\n\n\nFiasp peaks curve peaks at 55 minutes\n\n\n\n\nIf you wish to customize these values, you can adjust them on Lines 20-38 in the Loop>>Models>>Insulin>>ExponentialInsulinModelPreset.swift file\n\n\n\n\n\n\n\n\n\nLoop Logo\n\u2301\n\n\nIf you want an app logo other than the default green circle for your Loop app, you can easily customize this.  To make it easy to generate the correct sizes of icons, you can use a site like \nappicon.build\n and just drag and drop your source image. The source image needs to be 1024 pixels x 1024 pixels.  The site will email you a zip file.  Double click the zip file, choose the \u201cios\u201d folder, and copy the contents of the Appicon.appiconset as shown highlighted below.\n\n\n\n\n\n\n\n\n\nNow navigate to the corresponding Loop folder as shown below.  Replace the contents of the Appicon.appiconset with your copied images.\n\n\n\n\n\n\n\n\n\nYou can confirm the successful change by looking in Xcode.  You should see your custom logo in the Appicon set now.  You will also likely see a yellow alert that there are \u201c5 unassigned children\u201d.  This alert will not prevent your app from building, it\u2019s simply because the zipfile contained more sizes of images than Loop app uses.  You can just leave the unassigned images as is.\n\n\n\n\n\n\n\n\n\nLoop Graph hours\n\u2301\n\n\nIf you want the Loop\u2019s graphs to display different time length than the default, you will go to the StatusTableViewController.swift line 157. This code keeps track of how many hours to display in total and how far into the future to display on your graphs. For total hours it does a calculation based upon your screen size and how granular to display between each segment. For how far forward to display, it currently uses your Insulin Action Duration setting to determine this (and if that number is missing for some reason it defaults to 4 hours).\n\n\nPlease note, using this will make it more difficult to see changes in other charts on your screen (like length of temp basal).\n\n\n\n\n\n\n\n\n\nHere are a couple of ways you could modify line 157 based on your specific wants:\n\n\nWant double the amount of total hours shown?\n\nlet historyHours = (totalHours * 2) - (dataManager.insulinActionDuration ?? TimeInterval(hours: 4)).hours\n\n\nWant 1/2 of my Insulin Action Duration to show in the future?\n\nlet historyHours = totalHours - ((dataManager.insulinActionDuration / 2) ?? TimeInterval(hours: 4)).hours\n\n\nWant 2.5 x the total time and only 2 hours forward within that?\n\nlet historyHours = (totalHours * 2.5) - (TimeInterval(hours: 2)).hours\n\n\nApple Watch Customizations\n\u2301\n\n\nRecommended Bolus Autofill\n\u2301\n\n\nThe Apple Watch's default is to autofill to 75% of the recommended bolus.  If you wish, you can customize so that the watch autofills a different percentage. To do this, the multiplier can be changed from 0.75 to a value of your choice. A value of 1 will autofill 100% of the recommended bolus. A value of 0 will autofill 0% of the recommended bolus.   Go to the Watchapp Extension>>Controllers>>BolusInterfaceController.swift. Edit the section of line 97 for your customization.\n\n\n\n\n\n\n\n\n\nAdjust sensitivity of digital crown for carb and bolus entry\n\u2301\n\n\nThe rate of change of the carb and bolus entry pickers when using the digital crown can be altered. You'll need to edit two lines in files within the WatchApp Extension>>Controllers folder.  In AddCarbsInterfaceController.swift edit line 130, and in BolusInterfaceController.swift edit line 161. The 1/24 value is the ratio of rotations of the crown to the amount of change in the value. Changing it to 1/12 would mean that twice as many turns would be needed for the same amount of carb or bolus entry.",
            "title": "Code Customization"
        },
        {
            "location": "/setup/build/code_customization/#code-customizations",
            "text": "Based on Loop users\u2019 experience, there are some customizations that you may want to incorporate ahead of building your Loop app and Apple Watch app.  These customizations must be done prior to building the Loop app onto your iPhone, they cannot be done from within the app itself.  [Note: To help you find the Line numbers in Xcode, it may be helpful to turn them on now.  Go to Xcode Preferences, under Text Editing, click the box to Show Line Numbers.  Every effort will be made to update the line numbers as the code is updated periodically, but there may be times where the screenshots and line numbers are slightly different than the current version of Loop code.]",
            "title": "Code Customizations"
        },
        {
            "location": "/setup/build/code_customization/#disable-touchid-for-bolus",
            "text": "If you have TouchID enabled as part of your iPhone security (thumbprint), you will have to confirm each bolus with a thumbprint as part of standard Loop build.  If you would like to disable the TouchID for bolusing (but still keep TouchID for the rest of your normal iPhone use), you can do that by modifying Line 191 in the Loop>>View Controllers>>BolusViewController.swift.  Add the  false &&  as shown in the screenshot below:",
            "title": "Disable TouchID for Bolus"
        },
        {
            "location": "/setup/build/code_customization/#workout-range-duration",
            "text": "If you\u2019d like more than just the standard 1 or 2 hour duration for the Workout Range, you can add or modify the code to add another time interval or edit the existing ones.  Go to the Loop>>Extensions>>UIAlertController.swift and modify Line 30.  The default has 1 and 2 hours as shown where the arrow is pointing in the screenshot.  You can edit those to whatever duration you want (in units of hours) and add a duration if you prefer.  If you\u2019d like 1, 2, and 3 hours options...simply edit the numbers in the brackets to read [1, 2, 3]. It is possible to enter less than 1 hour intervals such as 15min, 30 min, 45 min by editing the brackets to read [0.25, 0.5, 0.75].",
            "title": "Workout Range Duration"
        },
        {
            "location": "/setup/build/code_customization/#default-carb-absorption-times",
            "text": "Loop\u2019s default carb absorption times are based on the high, medium, and low glycemic index absorption curves presented in  Think Like A Pancreas  by Gary Scheiner.  Currently the lollipop icon is set for 2 hours, taco icon for 3 hours, and pizza icon for 4 hours.    You can modify these defaults to suit your needs, however modification of these values it not as helpful/common as previous Loop versions.  Ever since Loop v1.4, Loop has included dynamic carb absorption means that Loop will start with your entered carb absoprtion time, mutliply it by 1.5, and then dynamically adjust the absorption time (either shorter or longer) based on the observed BG impacts.  So, typically, most people are finding that modification of the default carb absorption times is no longer necessary.  If you would like to modify those defaults, you can do so in the Loop>>Managers>>LoopDataManager.swift Lines 63-65.  Note the times are in hours, not minutes, in the code.",
            "title": "Default Carb Absorption Times"
        },
        {
            "location": "/setup/build/code_customization/#exponential-insulin-curve",
            "text": "The Exponential Insulin Curve Models (Rapid-Acting Adult, Rapid-Acting Child, and Fiasp) are defaulted to an insulin duration of 360 minutes...but the peak activity of the various curves differs:   Rapid-acting adult curve peaks at 75 minutes  Rapid-acting child curve peaks at 65 minutes  Fiasp peaks curve peaks at 55 minutes   If you wish to customize these values, you can adjust them on Lines 20-38 in the Loop>>Models>>Insulin>>ExponentialInsulinModelPreset.swift file",
            "title": "Exponential Insulin Curve"
        },
        {
            "location": "/setup/build/code_customization/#loop-logo",
            "text": "If you want an app logo other than the default green circle for your Loop app, you can easily customize this.  To make it easy to generate the correct sizes of icons, you can use a site like  appicon.build  and just drag and drop your source image. The source image needs to be 1024 pixels x 1024 pixels.  The site will email you a zip file.  Double click the zip file, choose the \u201cios\u201d folder, and copy the contents of the Appicon.appiconset as shown highlighted below.     Now navigate to the corresponding Loop folder as shown below.  Replace the contents of the Appicon.appiconset with your copied images.     You can confirm the successful change by looking in Xcode.  You should see your custom logo in the Appicon set now.  You will also likely see a yellow alert that there are \u201c5 unassigned children\u201d.  This alert will not prevent your app from building, it\u2019s simply because the zipfile contained more sizes of images than Loop app uses.  You can just leave the unassigned images as is.",
            "title": "Loop Logo"
        },
        {
            "location": "/setup/build/code_customization/#loop-graph-hours",
            "text": "If you want the Loop\u2019s graphs to display different time length than the default, you will go to the StatusTableViewController.swift line 157. This code keeps track of how many hours to display in total and how far into the future to display on your graphs. For total hours it does a calculation based upon your screen size and how granular to display between each segment. For how far forward to display, it currently uses your Insulin Action Duration setting to determine this (and if that number is missing for some reason it defaults to 4 hours).  Please note, using this will make it more difficult to see changes in other charts on your screen (like length of temp basal).     Here are a couple of ways you could modify line 157 based on your specific wants:  Want double the amount of total hours shown? let historyHours = (totalHours * 2) - (dataManager.insulinActionDuration ?? TimeInterval(hours: 4)).hours  Want 1/2 of my Insulin Action Duration to show in the future? let historyHours = totalHours - ((dataManager.insulinActionDuration / 2) ?? TimeInterval(hours: 4)).hours  Want 2.5 x the total time and only 2 hours forward within that? let historyHours = (totalHours * 2.5) - (TimeInterval(hours: 2)).hours",
            "title": "Loop Graph hours"
        },
        {
            "location": "/setup/build/code_customization/#apple-watch-customizations",
            "text": "",
            "title": "Apple Watch Customizations"
        },
        {
            "location": "/setup/build/code_customization/#recommended-bolus-autofill",
            "text": "The Apple Watch's default is to autofill to 75% of the recommended bolus.  If you wish, you can customize so that the watch autofills a different percentage. To do this, the multiplier can be changed from 0.75 to a value of your choice. A value of 1 will autofill 100% of the recommended bolus. A value of 0 will autofill 0% of the recommended bolus.   Go to the Watchapp Extension>>Controllers>>BolusInterfaceController.swift. Edit the section of line 97 for your customization.",
            "title": "Recommended Bolus Autofill"
        },
        {
            "location": "/setup/build/code_customization/#adjust-sensitivity-of-digital-crown-for-carb-and-bolus-entry",
            "text": "The rate of change of the carb and bolus entry pickers when using the digital crown can be altered. You'll need to edit two lines in files within the WatchApp Extension>>Controllers folder.  In AddCarbsInterfaceController.swift edit line 130, and in BolusInterfaceController.swift edit line 161. The 1/24 value is the ratio of rotations of the crown to the amount of change in the value. Changing it to 1/12 would mean that twice as many turns would be needed for the same amount of carb or bolus entry.",
            "title": "Adjust sensitivity of digital crown for carb and bolus entry"
        },
        {
            "location": "/setup/build/configuration/",
            "text": "Configuring your Loop\n\u2301\n\n\nNow that you have the Loop app installed on your iPhone, we need to input the settings so that the Loop can work for you.  In this section, we cover the details and provide information about the Loop displays.  Finally, we will cover some extras like Apple Watch and useful external integrations.\n\n\nHealth App\n\u2301\n\n\nLoop app uses the iPhone's Health app to store BGs, insulin, and carbohydrate data.  Insulin Data is a new feature with iOS 11.  The Health app will be one of the first prompts that you see as your Loop app is built.  The first prompt will ask if you want to allow the Loop app access to read/write Blood Glucose data into the Health app.  You will want to click on the line that says \nTurn All Categories On\n and then click on the \nAllow\n button.\n\n\nLater in the configuration of your Loop app, when you first setup carb ratios, you will again be prompted whether to allow Loop app access to read/write to the Health app.\n\n\n\n\n\n\n\n\n\nSettings\n\u2301\n\n\n\n\n\n\n\n\n\nNormally, we would start by explaining the displays on an application, but your Loop won\u2019t have much showing initially until we get some basic settings input.  So, let\u2019s start by clicking on the Loop Settings button in the tool bar.  It looks like a little sprocket.\n\n\nLoop Version\n\u2301\n\n\n\n\n\n\n\n\n\nThe first graphic at the top of the Loop settings display shows the version of the software, e.g.,  Loop v1.3 in this example.  This can be helpful when working with other users of the software to know what version you are running.\n\n\nClosed Loop\n\u2301\n\n\nThe Closed Loop switch controls the Loop operation mode for the application. This operation mode determines whether Loop automatically enacts recommendations (i.e., sets temp basals) to the insulin pump.  \n\n\n\n\n\n\n\n\n\nWhen the Closed Loop switch is in the (Off\u00a0\u00a0\u00a0\u00a0\u00a0   ) position, Loop WILL NOT enact recommended temp basals automatically.  Instead, it will display Recommended Temp Basals on the main status display, just above the Glucose graph.  This is called \u201cOpen Loop\u201d, and is a good way to understand how Loop will function, and what type of recommendations it would make.  \n\n\n\n\n\n\n\n\n\nWhen the Closed Loop switch is in the (\u00a0\u00a0\u00a0\u00a0\u00a0   On) position, Loop WILL automatically enact recommended temp basals on the configured insulin pump. This is known as a \u201cClosed Loop\u201d.  Typically, Loop will show the recommended temp basal just above the Glucose graph prior to automatically enacting it.  It may take a minute or so for the Loop to enact the recommended basal.  Once the temp basal has been enacted successfully on the pump, the recommended temp basal will disappear from the screen and the new temp basal will be represented in the insulin delivery graphics.\n\n\nPreferred Data Source\n\u2301\n\n\n\n\n\n\n\n\n\nIf Preferred Data Source is set to \u201cEvent History\u201d, then the pump will periodically be polled for treatment events.  This will cause your battery to be used at a faster rate, but there are benefits.  \n\n\n\n\nEvent History must be selected for Nightscout to display temp basals, carbs, and boluses from Loop.\n  Event History must also be selected in order for prime events to be detected and NOT contribute to iob during site changes.\n\n\n\n\nIssue Report\n\u2301\n\n\nIf you run into problems or errors with your Loop, the Issue Report can be used to help identify where the problem is occurring.  The Issue Report is automatically generated and you can share it via email.  Frequently, if you go to Gitter or Facebook for help with a technical problem, an Issue Report will provide insight to what the potential problem is.\n\n\nDevices\n\u2301\n\n\nIf your RileyLink is turned on and nearby, you will see a RileyLink in this area of the settings.  Actually, you will see a list of any RileyLinks that are in the nearby area.  If you are ever going to be near other Loop users, you may want to consider renaming your RileyLink to a new name (like this one is renamed ToughRL).  We will cover RL naming and use in the later sections...for now you can just slide the switch on and RileyLink will connect.\n\n\n\n\n\n\n\n\n\nPump ID\n\u2301\n\n\nFairly self-explanatory.  You need to enter your pump\u2019s six-digit ID here.  To find your pump ID, press ESC button on the pump, scroll down.  You will find a the six-digit ID as the \u201cS/N#\u201d.  You will also find the same ID on the back of the pump as six numbers beneath the pump\u2019s model number.  There are also explanations so you can identify the pump\u2019s region.  This makes a difference for how the RileyLink will tune its frequency for pump communications.\n\n\nPump Battery Type\n\u2301\n\n\nAgain fairly self-explanatory.  Click which battery type you are using so that the battery percentages are more accurately displayed in your Loop display.  The battery displays are designed to give you approximately 8-10 hours notice before looping would fail.  However, every battery manufacturer has its own decay curve for its specific batteries.  \nTypically, low battery levels will cause loop failures due to poor pump communications, prior to the actual pump failing to delivery insulin.\n\n\nCGM Selection\n\u2301\n\n\nSelect one of the options from the menu:\n\n\n\n\nSof-Sensor/Enlite\n\n\nG4 Share Receiver\n\n\nG5 Transmitter\n\n\n\n\nIf you select the G5 Transmitter, you will be prompted to enter the transmitter ID number.  Don't forget to update your transmitter ID when you change transmitters, otherwise your loop will not work.\n\n\nIf you are a G4 or G5 user, don't forget to enter your Dexcom Share information (this will be the same as your Nightscout Bridge username and password, too).  By entering your Dexcom Share account info, Loop will be able to fetch from the Dexcom servers via the internet when local BG readings from spying on the receiver/transmitter directly are not working.  The switch between local readings to server data pull will happen automatically when needed.  When Loop is using data from Dexcom servers, a small cloud will appear above the BG reading in Loop.\n\n\nCorrection Range\n\u2301\n\n\nThis is where you set your target blood glucose range. This is the low and high BG values that Loop will attempt to keep you between.  Click the + in the upper right corner to add target BG range(s).  You can have multiple targets based on time of day, but the first setting of the day needs to begin at midnight to be consistent with your Medtronic pump.\n\n\nTargets will be entered in mg/dl or mmoL automatically based upon how your BG values appear your BG chart. By default they are set to mg/dl, however once BG values arrive in mmoL these settings can be entered in mmoL. If you are planning to use mmoL, be sure to wait to set your correction range until after you have started to receive BG values. If you do these in the wrong order, then your chart may have incorrect Y axis. If you come across this issue, you can also remove all of your target ranges and enter them again. Once you are receiving BG values in mmoL, you can add your correction range(s) in mmoL.\n\n\nCorrection ranges can be a single number, such as 100-100 mg/dL, but is not necessarily advised or \u201cbetter\u201d.  Generally, you don't want to keep correction ranges too wide otherwise Loop will be sluggish to correct.\n\n\nYou can also set the \u201coverride\u201d ranges here for temporary alternate correction ranges.  These override ranges will only be enacted when you specifically activate \"Pre-Meal or \u201cWorkout Mode\u201d.\n\n\nSuspend Threshold\n\u2301\n\n\nSuspend Threshold is a required data entry for successful configuration of Loop. \nYour Loop will not turn green without setting this value.\n  This value affects both bolus and basal recommendations by Loop.\n\n\nBolus\n\u2301\n\n\n\n\n\n\nIf you are trying to bolus a meal while below this suspend threshold value, Loop will not recommend a bolus.  Instead, you will need to wait until you are above the suspend threshold value in order to bolus.\n\n\n\n\n\n\nIf you are above the suspend threshold but predicted to go below the suspend threshold in future predicted BGs, you will also not get a recommended bolus. Instead, you will need to wait until your predicted BG curve's lowest point is above the suspend threshold value in order to bolus.\n\n\n\n\n\n\nBasal\n\u2301\n\n\n\n\nIf your current or forecasted BG is below the suspend threshold, Loop will always recommend a temp basal rate of 0 u/hr.\n\n\n\n\nInsulin Model\n\u2301\n\n\nThere are four Insulin Models to choose from; Walsh, Rapid-Acting Adults, Rapid-Acting Children, and Fiasp.  If you want to read the nitty-gritty discussion that went into the development of these new curves, you can see that in GitHub \nhere\n.\n\n\nYou can click on each model and see what each model's insulin activity curve looks like.  If you select the Walsh model, and adjust the insulin action duration (DIA default is 6 hours), the curve will be adjusted accordingly based on your selection.\n\n\n\n\n\n\n\n\n\nThe differences between the new (Rapid-Acting and Fiasp) models have to do with the timing of the Peak Activity of the insulin.  Currently, all the models are defaulted [in the code]( to an insulin duration of 360 minutes...but the peak activity of the various curves differs:\n\n\n\n\nRapid-acting adult curve peaks at 75 minutes\n\n\nRapid-acting child curve peaks at 65 minutes\n\n\nFiasp peaks curve peaks at 55 minutes\n\n\n\n\nAs the peak time decreases, the Loop will expect a quicker insulin impact on BG AND the tail of the insulin dose will be slightly less agressive compared to a curve with a later peak time.  In other words, Fiasp will be more powerful soon after a bolus and less powerful 5 hours later than an equal amount of insulin modeled using the other models.\n\n\nThe Walsh model's insulin duration can be set by the user from within the app.  The peak time of the Walsh curve is 100 min at a DIA of 4 hours.  As user adjusts DIA, the peak time will be dynamically adjusted.\n\n\nBasal Rates\n\u2301\n\n\nEnter your basal rates here.  These should match the values entered in your pump. Entering them here will not override your pump\u2019s values, so make sure they match. This is fairly standard stuff that most T1Ds are already familiar with.  However, if you are new to Medtronic pumps...keep in mind that your insulin needs may change slightly when changing pump systems.  If in doubt, try some basal testing to see if your old basal rates may need adjustments with the switch to Medtronic pumps and infusion sets.\n\n\nOnly one basal pattern may be set in each Loop app.  If you are accustomed to switching between two or more basal patterns frequently, you have two options:\n\n\n\n\nmanually editing the basal profiles in this area each time you change basals, or\n\n\ninstalling a duplicate Loop app for each basal pattern and switching when needed.\n\n\n\n\nIf you choose to have duplicate Loop apps, you will need to use different MAIN_APP_BUNDLE_IDENTIFIERs for each app.  Additionally, you must remember to close  the unused Loop app (double-click iPhone home button and up-swipe Loop app).  Only one Loop app can run successfully at a time.  When you switch to the new Loop app, it may take 5-15 minutes for the Loop to turn green.  The good news is that all your carb entries, insulin doses and such will automatically populate in the new Loop within a relatively short amount of time and the transition is therefore seamless for Loop functionality.  \n\n\nCarb Ratios\n\u2301\n\n\nClick the + in the upper right to add carb ratios for various times of day. Loop works best if you have tested and optimized your carb ratio settings for accuracy.\n\n\nThe first time you setup carb ratios, you will be prompted to allow Loop app access to write/read data in your iPhone's Health App, choose only the selection for \nwrite\n data so that Loop does not inadvertently read third party app's carbohydrate inputs.  See \nCarb Entries with Third Party apps\n for more information about this setting.\n\n\nInsulin Sensitivities\n\u2301\n\n\nClick the + in the upper right to add insulin sensitivities for various times of day. Loop works best if you have tested and optimized your ISF settings for accuracy.  Insulin sensitivities can change for many reasons including waiting too long to change your infusion set.  Loop will not auto-detect changes in ISF.\n\n\nMaximum Basal Rate\n\u2301\n\n\nMaximum basal rate is the maximum temporary basal rate that the Loop is allowed to enact to correct to your target BG range.  See the Use section discussion for \nClose Loop\n for some suggestions regarding appropriate Maximum Basal Rate.\n\n\n\n\nA frequent error for new Loop users is when they set their maximum basal rate here to a value HIGHER than the corresponding setting on the pump.  This will result in an error message that the temp basal failed to enact.  For example, Loop cannot successfully tell the pump to deliver 4 units per hour if the pump\u2019s maximum is set to only 3.8 units per hour.  If you are seeing failures of the Loop to set a high temp basal, check to see if your pump\u2019s maximum basal is at greater than or equal to the Loop\u2019s maximum basal.\n\n\n\n\nMaximum Bolus\n\u2301\n\n\nEnter your desired single bolus maximum here.  Same caution applies here...you max bolus on the pump will need to be at least as great as the Loop's max bolus setting.\n\n\nServices\n\u2301\n\n\nThe services listed in this section are \nOPTIONAL\n.  You can choose to leave them empty and your Loop will still work.  \n\n\nNightscout\n\u2301\n\n\nIf you have an existing Nightscout site, add the Site URL and API Secret to have your Loop data transmitted to your Nightscout site. If you can\u2019t remember your API Secret, it can be found under Settings, Reveal Config Vars for Heroku sites (or Application Settings, Connection Strings for Azure sites). \n\n\nmLab\n\u2301\n\n\nThis service integration will add an extra collection to your existing Nightscout mLab for Loop error messages in particular.  The messages stored are the same messages as the Loop user could see on their Loop screen (press the red loop to see your error message), or a  remote parent could see by tapping the Loop pill in Nightscout.  This integration just stores and saves all the error messages throughout time.  As the screen shot below shows, this integration will log the errors from your Loop app and help you troubleshoot if you notice a pattern of problems.\n\n\n\n\n\n\n\n\n\nTo get your database name:\n\n\nIf you have Nightscout, access your mLab.  If you manually built your mLab database, you can login to mLab \nhere\n.  If you had Heroku automatically deploy your site, you can access mLab from your Heroku dashboard. Find the screen, like shown below, to get your database name.  The database name is the part after the \u201cdsXXXXXXX/\u201d.  In this case, \u201cannat1d\u201d  \n\n\n\n\n\n\n\n\n\nTo obtain your API Key:\n\n\n1) Click your username (not the account name) in the upper right-hand corner to open your account user profile\n\n\n2) If you are already in the account details page, then click on the row with your username in the Account Users section\n\n\n3) If the status is showing as \u201cData API Access: Disabled\u201d in the \u201cAPI Key\u201d section, click the \u201cEnable Data API access\u201d button\n\n\n4) Once Data API access is enabled, your current API key will be displayed in the \u201cAPI key\u201d\n\n\nIf you have any problems with integration, you can try regenerating the API key and that should solve the problem.\n\n\n\n\n\n\n\n\n\nLoggly\n\u2301\n\n\nLoggly\n is a free logging service.  If you sign up for an account, you'll need to go under Source Setup and then Customer Tokens.  Copy and paste your customer token into your Loop App settings for Loggly.\n\n\n\n\n\n\n\n\n\nAmplitude\n\u2301\n\n\nAmplitude\n is a remote event monitoring service and can be used to quickly identify errors and events with Loop.  Amplitude stores the events and allows you to view those events as points in time.  To retrieve the details of the events you will need to look at corresponding mLab data entries to get a complete picture of the issues.  If you sign up for a free account with Amplitude, you will be given an API Key that you can enter here to have Loop integration setup.\n\n\n\n\n\n\n\n\n\nPump Setup\n\u2301\n\n\nNow that you are done with your Loop's version of your pump settings, you also need to setup your pump similarly.  Generally, the setup of the pump is similar to setting up any pump for non-looping use.  One notable exception: you will need to change those batteries more often with Looping.  Loop will drain pump batteries much faster than regular pump regimes, and Loop failures will increase in frequency as the pump battery gets low.  Roughly, a lithium AAA battery lasts about 15-16 days on an x23 or x54 pump using Loop.\n\n\nWhile not every setting NEEDS to match between Loop and pump, it is safer to have them match in case your Loop fails and you revert back to normal pump use.  You should program the pump settings to match for:\n\n\n\n\nCarb ratio\n\n\nBasal schedule\n\n\nISF\n\n\nMax bolus\n\n\nInsulin action duration (5 hours is reasonable, this setting won't be used by Loop anyways...Loop uses it's own Insulin curves)\n\n\nBG targets\n\n\n\n\nBasal schedule the one pump setting that is occassionally used by Loop app during normal looping.  When your Loop app decides that the basal rate scheduled in the Loop app is sufficient (i.e., Loop doesn't need to set a temp basal different than the regularly scheduled basal), Loop will cancel any currently running temp basals and let the pump just implement the scheduled basal.  IF your pump's basal schedule doesn't match the Loop's basal schedule, this could result in your insulin delivery being different than Loop expected.  This won't be dangerous if the rates are fairly close, as Loop will read the reservoir volumes to determine actual insulin deliveries and adjust accordingly on the next pump read.\n\n\n\n\nThree settings in particular need to be done, OR ELSE YOUR LOOP WON'T WORK:\n\n    * Set \u201cmax temp basal\u201d in pump to at least equal to (or slightly greater) than the Loop\u2019s max basal\n\n    * Set \u201ctemp basal type\u201d to \u201cinsulin rate (u/h)\u201d\n\n    * Set Remote ID to \"on\" and enter any random ID (000000 will work). This is found in the pump's Utilities (for x23 continue to Connect Devices, Remotes) and turn ON the Remote Options.\n\n\n\n\nRileyLink\n\u2301\n\n\nRileyLink is turned on with a little switch on the side of the circuit board (little blue lights will flash briefly and then turn off).  The \u201con\u201d position is with the switch towards the battery plug.  Now that you have it turned on, go back to your Loop settings and under \u201cDevices\u201d, there will be a connection to turn on.  Turn it on (slide to green) and then click on the arrow to the right of the green slider to open the RileyLink settings area.  Your RileyLink will now have a solid green light showing.  The solid green light indicates a working bluetooth connection with your iPhone. \n\n\nDevice\n\u2301\n\n\nThe settings under the Device section are mostly for your information only.  However, you can rename your RileyLink to something more unique.  This is a good idea if you own more than one or are ever in the presence of more than one RileyLink...you will be able to pick out your connection easier amongst a crowd of \u201cRileyLinks\u201d.\n\n\nThe \nSignal Strength\n showing under this area of the menu is the signal strength of the BT with the iPhone.  It is \nnot\n the signal strength of the radio communications with the pump.  The lower the number, the stronger the BT.  As you move the RL and iPhone closer/farther apart, you will be able to see the signal strength change.\n\n\n\n\n\n\n\n\n\nPump\n\u2301\n\n\nThe Pump ID should be automatically filled in from the setting you have already entered previously.  The pump model will say unknown until the RileyLink has tuned communications with the pump.\n\n\nCommands\n\u2301\n\n\n\n\n\n\nTune Radio Frequency\n  It may take about a minute, but soon you will see a list of frequencies and you can exit back to the main RileyLink settings.  The Command line will now show the frequency (916.xx MHz) in the first command line and the timestamp of the tune.  Now your pump and RileyLink are tuned to talk to each other.  When people suggest \"did you retune your RileyLink?\" they are referring to this line's command.\n\n\n\n\nA common troubleshooting recommendation is to tune your RL when you have poor pump communications.  Just keep in mind that the Loop code has a function that it will automatically retune in the event of poor pump communications.  Loop does this automatically.  Manually retuning is only useful for impatience purposes.  If Loop has failed longer than 20 minutes, it will have already likely tried a retune...but knock yourself out if you want to try it again manually.\n\n\n\n\n\n\n\n\nChange Time\n:  Choose \u201cchange time\u201d so that pump and Loop times will match exactly.   Under normal circumstances, you do not have to redo this command.  Some older pumps may have an issue between battery changes that they require a rewind, prime, and resetting of clock time.  This is due to the tiny internal capacitor inside the pump (that you cannot change out) no longer holding a charge.  If your pump resets like this (or resets due to any other functional errors), make sure you reset the clock time via RileyLink.  If you are traveling through timezones or dealing with daylight savings time, please read up on \nhow to safely change your pump time\n.\n\n\n\n\nAlways use the RileyLink to change pump time.  If you fail to set the pump time by using the RileyLink, Loop will not function properly.\n\n\n\n\n\n\n\n\nMySentry Pair\n:  MySentry Pairing is for x23 and x54 pumps.  Follow the directions as shown in the RileyLink command screen for MySentry.  You do not have to worry about this command if you are using an x15 or x22 model pump, as they do not have MySentry.\n\n\n\n\nIf you do not perform a MySentry pairing and have an x23 or x54 pump, your loop will only turn green every 15 minutes.\n\n\n\n\n\n\n\n\nFetch Recent History, Fetch Recent Glucose, Write Glucose History Timestamp, Get Pump Model, and Send Button Press, Read Pump Status, and Read Basal Schedule\n are all ways of asking the pump for information you might be interested in.  They are not part of setting up the Loop.  Send Button Press can be useful to see if the communication between the RileyLink and pump is working.  If successful, the screen on the pump will light up and Loop will confirm the button press with a \u201csuccess\u201d message.  Read Pump Status is also nice quick pump read for reservoir volume, pump battery voltage, and pump status (bolusing or suspending).\n\n\n\n\n\n\nCONGRATS...your Loop is ready for use.  But are you?  Have you read through the algorithm?  Have you watched the pump in open loop mode?  Have you read about how to safely do site changes and priming?  Do you know how to troubleshoot your Loop?  Please take the time to read the other sections of this guide as they will help you navigate safe looping practices.",
            "title": "Configuration"
        },
        {
            "location": "/setup/build/configuration/#configuring-your-loop",
            "text": "Now that you have the Loop app installed on your iPhone, we need to input the settings so that the Loop can work for you.  In this section, we cover the details and provide information about the Loop displays.  Finally, we will cover some extras like Apple Watch and useful external integrations.",
            "title": "Configuring your Loop"
        },
        {
            "location": "/setup/build/configuration/#health-app",
            "text": "Loop app uses the iPhone's Health app to store BGs, insulin, and carbohydrate data.  Insulin Data is a new feature with iOS 11.  The Health app will be one of the first prompts that you see as your Loop app is built.  The first prompt will ask if you want to allow the Loop app access to read/write Blood Glucose data into the Health app.  You will want to click on the line that says  Turn All Categories On  and then click on the  Allow  button.  Later in the configuration of your Loop app, when you first setup carb ratios, you will again be prompted whether to allow Loop app access to read/write to the Health app.",
            "title": "Health App"
        },
        {
            "location": "/setup/build/configuration/#settings",
            "text": "Normally, we would start by explaining the displays on an application, but your Loop won\u2019t have much showing initially until we get some basic settings input.  So, let\u2019s start by clicking on the Loop Settings button in the tool bar.  It looks like a little sprocket.",
            "title": "Settings"
        },
        {
            "location": "/setup/build/configuration/#loop-version",
            "text": "The first graphic at the top of the Loop settings display shows the version of the software, e.g.,  Loop v1.3 in this example.  This can be helpful when working with other users of the software to know what version you are running.",
            "title": "Loop Version"
        },
        {
            "location": "/setup/build/configuration/#closed-loop",
            "text": "The Closed Loop switch controls the Loop operation mode for the application. This operation mode determines whether Loop automatically enacts recommendations (i.e., sets temp basals) to the insulin pump.       When the Closed Loop switch is in the (Off\u00a0\u00a0\u00a0\u00a0\u00a0   ) position, Loop WILL NOT enact recommended temp basals automatically.  Instead, it will display Recommended Temp Basals on the main status display, just above the Glucose graph.  This is called \u201cOpen Loop\u201d, and is a good way to understand how Loop will function, and what type of recommendations it would make.       When the Closed Loop switch is in the (\u00a0\u00a0\u00a0\u00a0\u00a0   On) position, Loop WILL automatically enact recommended temp basals on the configured insulin pump. This is known as a \u201cClosed Loop\u201d.  Typically, Loop will show the recommended temp basal just above the Glucose graph prior to automatically enacting it.  It may take a minute or so for the Loop to enact the recommended basal.  Once the temp basal has been enacted successfully on the pump, the recommended temp basal will disappear from the screen and the new temp basal will be represented in the insulin delivery graphics.",
            "title": "Closed Loop"
        },
        {
            "location": "/setup/build/configuration/#preferred-data-source",
            "text": "If Preferred Data Source is set to \u201cEvent History\u201d, then the pump will periodically be polled for treatment events.  This will cause your battery to be used at a faster rate, but there are benefits.     Event History must be selected for Nightscout to display temp basals, carbs, and boluses from Loop.   Event History must also be selected in order for prime events to be detected and NOT contribute to iob during site changes.",
            "title": "Preferred Data Source"
        },
        {
            "location": "/setup/build/configuration/#issue-report",
            "text": "If you run into problems or errors with your Loop, the Issue Report can be used to help identify where the problem is occurring.  The Issue Report is automatically generated and you can share it via email.  Frequently, if you go to Gitter or Facebook for help with a technical problem, an Issue Report will provide insight to what the potential problem is.",
            "title": "Issue Report"
        },
        {
            "location": "/setup/build/configuration/#devices",
            "text": "If your RileyLink is turned on and nearby, you will see a RileyLink in this area of the settings.  Actually, you will see a list of any RileyLinks that are in the nearby area.  If you are ever going to be near other Loop users, you may want to consider renaming your RileyLink to a new name (like this one is renamed ToughRL).  We will cover RL naming and use in the later sections...for now you can just slide the switch on and RileyLink will connect.",
            "title": "Devices"
        },
        {
            "location": "/setup/build/configuration/#pump-id",
            "text": "Fairly self-explanatory.  You need to enter your pump\u2019s six-digit ID here.  To find your pump ID, press ESC button on the pump, scroll down.  You will find a the six-digit ID as the \u201cS/N#\u201d.  You will also find the same ID on the back of the pump as six numbers beneath the pump\u2019s model number.  There are also explanations so you can identify the pump\u2019s region.  This makes a difference for how the RileyLink will tune its frequency for pump communications.",
            "title": "Pump ID"
        },
        {
            "location": "/setup/build/configuration/#pump-battery-type",
            "text": "Again fairly self-explanatory.  Click which battery type you are using so that the battery percentages are more accurately displayed in your Loop display.  The battery displays are designed to give you approximately 8-10 hours notice before looping would fail.  However, every battery manufacturer has its own decay curve for its specific batteries.   Typically, low battery levels will cause loop failures due to poor pump communications, prior to the actual pump failing to delivery insulin.",
            "title": "Pump Battery Type"
        },
        {
            "location": "/setup/build/configuration/#cgm-selection",
            "text": "Select one of the options from the menu:   Sof-Sensor/Enlite  G4 Share Receiver  G5 Transmitter   If you select the G5 Transmitter, you will be prompted to enter the transmitter ID number.  Don't forget to update your transmitter ID when you change transmitters, otherwise your loop will not work.  If you are a G4 or G5 user, don't forget to enter your Dexcom Share information (this will be the same as your Nightscout Bridge username and password, too).  By entering your Dexcom Share account info, Loop will be able to fetch from the Dexcom servers via the internet when local BG readings from spying on the receiver/transmitter directly are not working.  The switch between local readings to server data pull will happen automatically when needed.  When Loop is using data from Dexcom servers, a small cloud will appear above the BG reading in Loop.",
            "title": "CGM Selection"
        },
        {
            "location": "/setup/build/configuration/#correction-range",
            "text": "This is where you set your target blood glucose range. This is the low and high BG values that Loop will attempt to keep you between.  Click the + in the upper right corner to add target BG range(s).  You can have multiple targets based on time of day, but the first setting of the day needs to begin at midnight to be consistent with your Medtronic pump.  Targets will be entered in mg/dl or mmoL automatically based upon how your BG values appear your BG chart. By default they are set to mg/dl, however once BG values arrive in mmoL these settings can be entered in mmoL. If you are planning to use mmoL, be sure to wait to set your correction range until after you have started to receive BG values. If you do these in the wrong order, then your chart may have incorrect Y axis. If you come across this issue, you can also remove all of your target ranges and enter them again. Once you are receiving BG values in mmoL, you can add your correction range(s) in mmoL.  Correction ranges can be a single number, such as 100-100 mg/dL, but is not necessarily advised or \u201cbetter\u201d.  Generally, you don't want to keep correction ranges too wide otherwise Loop will be sluggish to correct.  You can also set the \u201coverride\u201d ranges here for temporary alternate correction ranges.  These override ranges will only be enacted when you specifically activate \"Pre-Meal or \u201cWorkout Mode\u201d.",
            "title": "Correction Range"
        },
        {
            "location": "/setup/build/configuration/#suspend-threshold",
            "text": "Suspend Threshold is a required data entry for successful configuration of Loop.  Your Loop will not turn green without setting this value.   This value affects both bolus and basal recommendations by Loop.",
            "title": "Suspend Threshold"
        },
        {
            "location": "/setup/build/configuration/#bolus",
            "text": "If you are trying to bolus a meal while below this suspend threshold value, Loop will not recommend a bolus.  Instead, you will need to wait until you are above the suspend threshold value in order to bolus.    If you are above the suspend threshold but predicted to go below the suspend threshold in future predicted BGs, you will also not get a recommended bolus. Instead, you will need to wait until your predicted BG curve's lowest point is above the suspend threshold value in order to bolus.",
            "title": "Bolus"
        },
        {
            "location": "/setup/build/configuration/#basal",
            "text": "If your current or forecasted BG is below the suspend threshold, Loop will always recommend a temp basal rate of 0 u/hr.",
            "title": "Basal"
        },
        {
            "location": "/setup/build/configuration/#insulin-model",
            "text": "There are four Insulin Models to choose from; Walsh, Rapid-Acting Adults, Rapid-Acting Children, and Fiasp.  If you want to read the nitty-gritty discussion that went into the development of these new curves, you can see that in GitHub  here .  You can click on each model and see what each model's insulin activity curve looks like.  If you select the Walsh model, and adjust the insulin action duration (DIA default is 6 hours), the curve will be adjusted accordingly based on your selection.     The differences between the new (Rapid-Acting and Fiasp) models have to do with the timing of the Peak Activity of the insulin.  Currently, all the models are defaulted [in the code]( to an insulin duration of 360 minutes...but the peak activity of the various curves differs:   Rapid-acting adult curve peaks at 75 minutes  Rapid-acting child curve peaks at 65 minutes  Fiasp peaks curve peaks at 55 minutes   As the peak time decreases, the Loop will expect a quicker insulin impact on BG AND the tail of the insulin dose will be slightly less agressive compared to a curve with a later peak time.  In other words, Fiasp will be more powerful soon after a bolus and less powerful 5 hours later than an equal amount of insulin modeled using the other models.  The Walsh model's insulin duration can be set by the user from within the app.  The peak time of the Walsh curve is 100 min at a DIA of 4 hours.  As user adjusts DIA, the peak time will be dynamically adjusted.",
            "title": "Insulin Model"
        },
        {
            "location": "/setup/build/configuration/#basal-rates",
            "text": "Enter your basal rates here.  These should match the values entered in your pump. Entering them here will not override your pump\u2019s values, so make sure they match. This is fairly standard stuff that most T1Ds are already familiar with.  However, if you are new to Medtronic pumps...keep in mind that your insulin needs may change slightly when changing pump systems.  If in doubt, try some basal testing to see if your old basal rates may need adjustments with the switch to Medtronic pumps and infusion sets.  Only one basal pattern may be set in each Loop app.  If you are accustomed to switching between two or more basal patterns frequently, you have two options:   manually editing the basal profiles in this area each time you change basals, or  installing a duplicate Loop app for each basal pattern and switching when needed.   If you choose to have duplicate Loop apps, you will need to use different MAIN_APP_BUNDLE_IDENTIFIERs for each app.  Additionally, you must remember to close  the unused Loop app (double-click iPhone home button and up-swipe Loop app).  Only one Loop app can run successfully at a time.  When you switch to the new Loop app, it may take 5-15 minutes for the Loop to turn green.  The good news is that all your carb entries, insulin doses and such will automatically populate in the new Loop within a relatively short amount of time and the transition is therefore seamless for Loop functionality.",
            "title": "Basal Rates"
        },
        {
            "location": "/setup/build/configuration/#carb-ratios",
            "text": "Click the + in the upper right to add carb ratios for various times of day. Loop works best if you have tested and optimized your carb ratio settings for accuracy.  The first time you setup carb ratios, you will be prompted to allow Loop app access to write/read data in your iPhone's Health App, choose only the selection for  write  data so that Loop does not inadvertently read third party app's carbohydrate inputs.  See  Carb Entries with Third Party apps  for more information about this setting.",
            "title": "Carb Ratios"
        },
        {
            "location": "/setup/build/configuration/#insulin-sensitivities",
            "text": "Click the + in the upper right to add insulin sensitivities for various times of day. Loop works best if you have tested and optimized your ISF settings for accuracy.  Insulin sensitivities can change for many reasons including waiting too long to change your infusion set.  Loop will not auto-detect changes in ISF.",
            "title": "Insulin Sensitivities"
        },
        {
            "location": "/setup/build/configuration/#maximum-basal-rate",
            "text": "Maximum basal rate is the maximum temporary basal rate that the Loop is allowed to enact to correct to your target BG range.  See the Use section discussion for  Close Loop  for some suggestions regarding appropriate Maximum Basal Rate.   A frequent error for new Loop users is when they set their maximum basal rate here to a value HIGHER than the corresponding setting on the pump.  This will result in an error message that the temp basal failed to enact.  For example, Loop cannot successfully tell the pump to deliver 4 units per hour if the pump\u2019s maximum is set to only 3.8 units per hour.  If you are seeing failures of the Loop to set a high temp basal, check to see if your pump\u2019s maximum basal is at greater than or equal to the Loop\u2019s maximum basal.",
            "title": "Maximum Basal Rate"
        },
        {
            "location": "/setup/build/configuration/#maximum-bolus",
            "text": "Enter your desired single bolus maximum here.  Same caution applies here...you max bolus on the pump will need to be at least as great as the Loop's max bolus setting.",
            "title": "Maximum Bolus"
        },
        {
            "location": "/setup/build/configuration/#services",
            "text": "The services listed in this section are  OPTIONAL .  You can choose to leave them empty and your Loop will still work.",
            "title": "Services"
        },
        {
            "location": "/setup/build/configuration/#nightscout",
            "text": "If you have an existing Nightscout site, add the Site URL and API Secret to have your Loop data transmitted to your Nightscout site. If you can\u2019t remember your API Secret, it can be found under Settings, Reveal Config Vars for Heroku sites (or Application Settings, Connection Strings for Azure sites).",
            "title": "Nightscout"
        },
        {
            "location": "/setup/build/configuration/#mlab",
            "text": "This service integration will add an extra collection to your existing Nightscout mLab for Loop error messages in particular.  The messages stored are the same messages as the Loop user could see on their Loop screen (press the red loop to see your error message), or a  remote parent could see by tapping the Loop pill in Nightscout.  This integration just stores and saves all the error messages throughout time.  As the screen shot below shows, this integration will log the errors from your Loop app and help you troubleshoot if you notice a pattern of problems.     To get your database name:  If you have Nightscout, access your mLab.  If you manually built your mLab database, you can login to mLab  here .  If you had Heroku automatically deploy your site, you can access mLab from your Heroku dashboard. Find the screen, like shown below, to get your database name.  The database name is the part after the \u201cdsXXXXXXX/\u201d.  In this case, \u201cannat1d\u201d       To obtain your API Key:  1) Click your username (not the account name) in the upper right-hand corner to open your account user profile  2) If you are already in the account details page, then click on the row with your username in the Account Users section  3) If the status is showing as \u201cData API Access: Disabled\u201d in the \u201cAPI Key\u201d section, click the \u201cEnable Data API access\u201d button  4) Once Data API access is enabled, your current API key will be displayed in the \u201cAPI key\u201d  If you have any problems with integration, you can try regenerating the API key and that should solve the problem.",
            "title": "mLab"
        },
        {
            "location": "/setup/build/configuration/#loggly",
            "text": "Loggly  is a free logging service.  If you sign up for an account, you'll need to go under Source Setup and then Customer Tokens.  Copy and paste your customer token into your Loop App settings for Loggly.",
            "title": "Loggly"
        },
        {
            "location": "/setup/build/configuration/#amplitude",
            "text": "Amplitude  is a remote event monitoring service and can be used to quickly identify errors and events with Loop.  Amplitude stores the events and allows you to view those events as points in time.  To retrieve the details of the events you will need to look at corresponding mLab data entries to get a complete picture of the issues.  If you sign up for a free account with Amplitude, you will be given an API Key that you can enter here to have Loop integration setup.",
            "title": "Amplitude"
        },
        {
            "location": "/setup/build/configuration/#pump-setup",
            "text": "Now that you are done with your Loop's version of your pump settings, you also need to setup your pump similarly.  Generally, the setup of the pump is similar to setting up any pump for non-looping use.  One notable exception: you will need to change those batteries more often with Looping.  Loop will drain pump batteries much faster than regular pump regimes, and Loop failures will increase in frequency as the pump battery gets low.  Roughly, a lithium AAA battery lasts about 15-16 days on an x23 or x54 pump using Loop.  While not every setting NEEDS to match between Loop and pump, it is safer to have them match in case your Loop fails and you revert back to normal pump use.  You should program the pump settings to match for:   Carb ratio  Basal schedule  ISF  Max bolus  Insulin action duration (5 hours is reasonable, this setting won't be used by Loop anyways...Loop uses it's own Insulin curves)  BG targets   Basal schedule the one pump setting that is occassionally used by Loop app during normal looping.  When your Loop app decides that the basal rate scheduled in the Loop app is sufficient (i.e., Loop doesn't need to set a temp basal different than the regularly scheduled basal), Loop will cancel any currently running temp basals and let the pump just implement the scheduled basal.  IF your pump's basal schedule doesn't match the Loop's basal schedule, this could result in your insulin delivery being different than Loop expected.  This won't be dangerous if the rates are fairly close, as Loop will read the reservoir volumes to determine actual insulin deliveries and adjust accordingly on the next pump read.   Three settings in particular need to be done, OR ELSE YOUR LOOP WON'T WORK: \n    * Set \u201cmax temp basal\u201d in pump to at least equal to (or slightly greater) than the Loop\u2019s max basal \n    * Set \u201ctemp basal type\u201d to \u201cinsulin rate (u/h)\u201d \n    * Set Remote ID to \"on\" and enter any random ID (000000 will work). This is found in the pump's Utilities (for x23 continue to Connect Devices, Remotes) and turn ON the Remote Options.",
            "title": "Pump Setup"
        },
        {
            "location": "/setup/build/configuration/#rileylink",
            "text": "RileyLink is turned on with a little switch on the side of the circuit board (little blue lights will flash briefly and then turn off).  The \u201con\u201d position is with the switch towards the battery plug.  Now that you have it turned on, go back to your Loop settings and under \u201cDevices\u201d, there will be a connection to turn on.  Turn it on (slide to green) and then click on the arrow to the right of the green slider to open the RileyLink settings area.  Your RileyLink will now have a solid green light showing.  The solid green light indicates a working bluetooth connection with your iPhone.",
            "title": "RileyLink"
        },
        {
            "location": "/setup/build/configuration/#device",
            "text": "The settings under the Device section are mostly for your information only.  However, you can rename your RileyLink to something more unique.  This is a good idea if you own more than one or are ever in the presence of more than one RileyLink...you will be able to pick out your connection easier amongst a crowd of \u201cRileyLinks\u201d.  The  Signal Strength  showing under this area of the menu is the signal strength of the BT with the iPhone.  It is  not  the signal strength of the radio communications with the pump.  The lower the number, the stronger the BT.  As you move the RL and iPhone closer/farther apart, you will be able to see the signal strength change.",
            "title": "Device"
        },
        {
            "location": "/setup/build/configuration/#pump",
            "text": "The Pump ID should be automatically filled in from the setting you have already entered previously.  The pump model will say unknown until the RileyLink has tuned communications with the pump.",
            "title": "Pump"
        },
        {
            "location": "/setup/build/configuration/#commands",
            "text": "Tune Radio Frequency   It may take about a minute, but soon you will see a list of frequencies and you can exit back to the main RileyLink settings.  The Command line will now show the frequency (916.xx MHz) in the first command line and the timestamp of the tune.  Now your pump and RileyLink are tuned to talk to each other.  When people suggest \"did you retune your RileyLink?\" they are referring to this line's command.   A common troubleshooting recommendation is to tune your RL when you have poor pump communications.  Just keep in mind that the Loop code has a function that it will automatically retune in the event of poor pump communications.  Loop does this automatically.  Manually retuning is only useful for impatience purposes.  If Loop has failed longer than 20 minutes, it will have already likely tried a retune...but knock yourself out if you want to try it again manually.     Change Time :  Choose \u201cchange time\u201d so that pump and Loop times will match exactly.   Under normal circumstances, you do not have to redo this command.  Some older pumps may have an issue between battery changes that they require a rewind, prime, and resetting of clock time.  This is due to the tiny internal capacitor inside the pump (that you cannot change out) no longer holding a charge.  If your pump resets like this (or resets due to any other functional errors), make sure you reset the clock time via RileyLink.  If you are traveling through timezones or dealing with daylight savings time, please read up on  how to safely change your pump time .   Always use the RileyLink to change pump time.  If you fail to set the pump time by using the RileyLink, Loop will not function properly.     MySentry Pair :  MySentry Pairing is for x23 and x54 pumps.  Follow the directions as shown in the RileyLink command screen for MySentry.  You do not have to worry about this command if you are using an x15 or x22 model pump, as they do not have MySentry.   If you do not perform a MySentry pairing and have an x23 or x54 pump, your loop will only turn green every 15 minutes.     Fetch Recent History, Fetch Recent Glucose, Write Glucose History Timestamp, Get Pump Model, and Send Button Press, Read Pump Status, and Read Basal Schedule  are all ways of asking the pump for information you might be interested in.  They are not part of setting up the Loop.  Send Button Press can be useful to see if the communication between the RileyLink and pump is working.  If successful, the screen on the pump will light up and Loop will confirm the button press with a \u201csuccess\u201d message.  Read Pump Status is also nice quick pump read for reservoir volume, pump battery voltage, and pump status (bolusing or suspending).    CONGRATS...your Loop is ready for use.  But are you?  Have you read through the algorithm?  Have you watched the pump in open loop mode?  Have you read about how to safely do site changes and priming?  Do you know how to troubleshoot your Loop?  Please take the time to read the other sections of this guide as they will help you navigate safe looping practices.",
            "title": "Commands"
        },
        {
            "location": "/setup/build/updating/",
            "text": "How to Update Loop\n\u2301\n\n\nWhen a new version of Loop is released, you can click \nHERE\n to read what features or fixes were a part of the new release. \n\n\nUpdate Apple devices\n\u2301\n\n\n\n\nIMPORTANT INFO, PLEASE READ\n\n\nBetween Loop app builds, there's a high liklihood that Apple has updated one or more of the systems involved in your Loop app; your Apple Developer license agreement, your iPhone's iOS, your computer's macOS, your Xcode app, and/or your watchOS.  \nIf you don't install the updates, you will run into build problems.\n  You can check for macOS and Xcode updates using the App Store link under the apple logo in your computer display's upper left corner.\n\n    * \nCheck your Apple developer account\n and accept any updated license agreements.\n\n    * Update to macOS Sierra on your Apple.  Currently you will need macOS 10.12.6 at a minimum.\n\n    * Update to Xcode 9 \n\n    * Update your iPhone (iOS 10.3.3 at least), or if you use an Apple watch you'll need iOS 11 and watchOS 4.\n\n\n\n\n\n\nSpecial note about upgrading to Loop v1.5 for existing Loopers\n\n\nIf you are an existing Looper encountering this error message below while trying to update to Loop v1.5, please open your Terminal app found in the Applications>>Utilities folder and then enter \n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n  Confirm the homebrew installation by pressing enter, and then typing in your computer password.  When the installation finishes, use the command \nbrew link --overwrite carthage\n.  After those two steps, you can close out Terminal app, return to Xcode and press the build/play button again.  This error is a legacy for people who installed carthage using the carthage.pkg option (the primary installation method on the old docs)...installing homebrew with these directions will resolve the conflict between carthage installations.\n\n\n\n\n\n\n\n\n\nDownload new Loop source code\n\u2301\n\n\nYou can use these links to download new versions of the Loop source code:\n\n\n\n\n\nLoop: Master branch source code\n\n\n\n\n\n\nOR\n\n\nLoop: Dev branch source code\n\n\n\n\nFYI: The Loop source code resides in \nGitHub\n within a repository.  A repository is kind of like a project's bookshelf, holding various books (aka branches) of a project.  The master branch is considered a stable version.  Any new features or options are first tested in a dev (short for \"development\") branch of the Loop.  New or inexperienced users should not build from the dev branch of Loop.  So if you hear of \"new features in dev\", these are things that may be eventually merged into the master branch once any bugs are worked out.\n\n\n\n\nIMPORTANT NOTES: Best practice is to leave your Loop source code in your Downloads folder.  If you store your Loop code a different folder than Downloads (such as your Documents folder or Desktop), make sure the specified folder is \nnot\n an iCloud drive.  Storing your Loop code in an iCloud drive folder will prevent Loop from building successfully.  How do you know if a folder is an iCloud drive?  Check your System Preferences.  If your System Preferences for iCloud is set as shown below, your Documents and Desktop folders are iCloud drives and \nNOT\n appropriate places to save your Loop download.\n\n\n\n\n\n\nDepending on your browser and settings, your Loop download may or may not automatically unzip.  If it does not unzip automatically, you can right-click on the zip file and choose to \"Open With\" Archive Utility.  This will create a blue folder called \nLoop-master\n.  HOWEVER, if you already have an existing \nLoop-master\n folder from a previous download, the name of the next download will be something like \nLoop-master (1)\n.  The problem with that folder name is that it contains a space...and spaces in the name will cause your Loop build to fail.  So, either delete old copies of Loop before downloading/unzipping or rename the folder(s) to ensure that NO SPACES are in the folder name.\n\n\n\n\n\n\n\n\n\nChange Main App Bundle ID and Build\n\u2301\n\n\nFollow the guide for installation as you did before, beginning \nHERE\n to navigate to your newly downloaded source code.\n\n\nThe most common error in updating a Loop app is to use a different MAIN_APP_BUNDLE_IDENTIFIER than you used in your original Loop build.  If you use a different MAIN_APP_BUNDLE_IDENTIFIER, your iPhone will have a brand new second Loop app and none of the settings from the original Loop app will carry over.  While some people use this technique intentionally, you will have to be aware that you cannot successfully loop with two different Loop apps actively running (opened) at the same time on the same iPhone.  So, you will have to make sure you double-tap the home button and up-swipe to close out any unused Loop apps that you don't need running.\n\n\nIf you \nuse the same MAIN_APP_BUNDLE_IDENTIFIER as you used in the first installation\n, all your old settings will be preserved and you will not have to re-enter them.  If you can't remember what you used on your current Loop app, you can open your old Loop folder on your computer, click on the \nLoop.xcconfig\n file, and check what you used.  Alternatively, open your Loop settings, open the Issue Report and look for a line titled \nappGroupName\n that is within the RileyLinkDevice section of the Issue Report.  Your MAIN_APP_BUNDLE_IDENTIFIER is shown within that area.  \nDon't forget to save your project after changing the MAIN_APP_BUNDLE_IDENTIFIER.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd or redo any customizations, if needed.  These will not be carried over automatically from the old app.\n\n\nSign the four targets and rebuild.  If you get any build errors, please check \nthis section\n for fixes.",
            "title": "Updating"
        },
        {
            "location": "/setup/build/updating/#how-to-update-loop",
            "text": "When a new version of Loop is released, you can click  HERE  to read what features or fixes were a part of the new release.",
            "title": "How to Update Loop"
        },
        {
            "location": "/setup/build/updating/#update-apple-devices",
            "text": "IMPORTANT INFO, PLEASE READ  Between Loop app builds, there's a high liklihood that Apple has updated one or more of the systems involved in your Loop app; your Apple Developer license agreement, your iPhone's iOS, your computer's macOS, your Xcode app, and/or your watchOS.   If you don't install the updates, you will run into build problems.   You can check for macOS and Xcode updates using the App Store link under the apple logo in your computer display's upper left corner. \n    *  Check your Apple developer account  and accept any updated license agreements. \n    * Update to macOS Sierra on your Apple.  Currently you will need macOS 10.12.6 at a minimum. \n    * Update to Xcode 9  \n    * Update your iPhone (iOS 10.3.3 at least), or if you use an Apple watch you'll need iOS 11 and watchOS 4.    Special note about upgrading to Loop v1.5 for existing Loopers  If you are an existing Looper encountering this error message below while trying to update to Loop v1.5, please open your Terminal app found in the Applications>>Utilities folder and then enter  /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"   Confirm the homebrew installation by pressing enter, and then typing in your computer password.  When the installation finishes, use the command  brew link --overwrite carthage .  After those two steps, you can close out Terminal app, return to Xcode and press the build/play button again.  This error is a legacy for people who installed carthage using the carthage.pkg option (the primary installation method on the old docs)...installing homebrew with these directions will resolve the conflict between carthage installations.",
            "title": "Update Apple devices"
        },
        {
            "location": "/setup/build/updating/#download-new-loop-source-code",
            "text": "You can use these links to download new versions of the Loop source code:   Loop: Master branch source code    OR  Loop: Dev branch source code   FYI: The Loop source code resides in  GitHub  within a repository.  A repository is kind of like a project's bookshelf, holding various books (aka branches) of a project.  The master branch is considered a stable version.  Any new features or options are first tested in a dev (short for \"development\") branch of the Loop.  New or inexperienced users should not build from the dev branch of Loop.  So if you hear of \"new features in dev\", these are things that may be eventually merged into the master branch once any bugs are worked out.   IMPORTANT NOTES: Best practice is to leave your Loop source code in your Downloads folder.  If you store your Loop code a different folder than Downloads (such as your Documents folder or Desktop), make sure the specified folder is  not  an iCloud drive.  Storing your Loop code in an iCloud drive folder will prevent Loop from building successfully.  How do you know if a folder is an iCloud drive?  Check your System Preferences.  If your System Preferences for iCloud is set as shown below, your Documents and Desktop folders are iCloud drives and  NOT  appropriate places to save your Loop download.   \nDepending on your browser and settings, your Loop download may or may not automatically unzip.  If it does not unzip automatically, you can right-click on the zip file and choose to \"Open With\" Archive Utility.  This will create a blue folder called  Loop-master .  HOWEVER, if you already have an existing  Loop-master  folder from a previous download, the name of the next download will be something like  Loop-master (1) .  The problem with that folder name is that it contains a space...and spaces in the name will cause your Loop build to fail.  So, either delete old copies of Loop before downloading/unzipping or rename the folder(s) to ensure that NO SPACES are in the folder name.",
            "title": "Download new Loop source code"
        },
        {
            "location": "/setup/build/updating/#change-main-app-bundle-id-and-build",
            "text": "Follow the guide for installation as you did before, beginning  HERE  to navigate to your newly downloaded source code.  The most common error in updating a Loop app is to use a different MAIN_APP_BUNDLE_IDENTIFIER than you used in your original Loop build.  If you use a different MAIN_APP_BUNDLE_IDENTIFIER, your iPhone will have a brand new second Loop app and none of the settings from the original Loop app will carry over.  While some people use this technique intentionally, you will have to be aware that you cannot successfully loop with two different Loop apps actively running (opened) at the same time on the same iPhone.  So, you will have to make sure you double-tap the home button and up-swipe to close out any unused Loop apps that you don't need running.  If you  use the same MAIN_APP_BUNDLE_IDENTIFIER as you used in the first installation , all your old settings will be preserved and you will not have to re-enter them.  If you can't remember what you used on your current Loop app, you can open your old Loop folder on your computer, click on the  Loop.xcconfig  file, and check what you used.  Alternatively, open your Loop settings, open the Issue Report and look for a line titled  appGroupName  that is within the RileyLinkDevice section of the Issue Report.  Your MAIN_APP_BUNDLE_IDENTIFIER is shown within that area.   Don't forget to save your project after changing the MAIN_APP_BUNDLE_IDENTIFIER.         Add or redo any customizations, if needed.  These will not be carried over automatically from the old app.  Sign the four targets and rebuild.  If you get any build errors, please check  this section  for fixes.",
            "title": "Change Main App Bundle ID and Build"
        },
        {
            "location": "/operation/overview/",
            "text": "Loop Displays\n\u2301\n\n\nThis section of the docs will go over the Loop displays available and what information they offer.  Information about your Loop's actions (or inactions) can often be found simply by looking at the visuals presented in the app.  \n\n\nStatus Screen\n\u2301\n\n\nThe Status Screen is the main root navigation screen in Loop.  It is broken up into 3 main display areas; Heads Up display (HUD), Charts, and Toolbar. The HUD is the top area of the screen.  This shows status of the last time loop ran, current BG Reading, current temp-basal, current insulin reservoir volume remaining, and current pump percentage battery remaining. The next area is the charting area. This includes, glucose trend and prediction, Active Insulin, Insulin Delivery, and Carbohydrates.  The final display area is the toolbar which has buttons for Carbohydrate, Insulin Bolus, Workout Mode, and Settings.\n\n\n\n\nHeads Up Display\n\u2301\n\n\nLoop Status\n\u2301\n\n\nThe Loop Status is the colored circle in the upper left corner of the main Loop display.  There are four colors that are typically displayed.  \n\n\nA grey circle indicates the Loop is warming up and hasn\u2019t yet completed its initial loop.  When the Loop is first activated, it may take about 15-20 minutes to complete the first Loop, and the grey circle will be displayed.  It needs CGM data to be gathered, so be patient.  When it finally completes its first loop, the circle will turn green.  If you can't get the loop to turn grey, try reading the Use guide for Green Loop.\n\n\nA green circle indicates the Loop has been successfully completed within the last 5 minutes.  The time since the loop last completed will be displayed under the circle.\n\n\nA yellow circle indicates the Loop has not completed in the last 5-15 minutes.  It is not unusual to have a few instances of yellow circles throughout a day of looping.  They can be caused by temporarily getting too far away from RileyLink or iPhone (more than about 3-10 feet depending on conditions), CGM failing to read or being in ???, radio frequency \u201cnoise\u201d interference, and such.  Generally, most yellow circles will self-resolve without needing any special troubleshooting.\n\n\nA red circle indicates the Loop has not completed in over 15 minutes.  This is not a typical state, and you should troubleshoot why Loop is not completing.  Please review the Use sections' Green Loop page for troubleshooting tips.   If you have Nightscout integration, you can also use the Loop Pill to help troubleshoot.  Clicking on the red circle will also popup the last error message to help guide your troubleshooting.\n\n\nWhen the circle is notched and not complete, that means the Loop is operating in \u201copen loop\u201d mode.  When the \u201cclosed loop\u201d setting is turned on, the loop status will show a completed circle.\n\n\nThe loop status circle will pulse slightly when RileyLink is giving the pump a new temp basal setting.  The pulsing will stop when the temp basal has been set by the pump.\n\n\nGlucose\n\u2301\n\n\nThe current BG reading from the CGM will display, including trending arrow and time the reading was taken.  If the BG is being read straight from the G5 transmitter or G4 receiver, no special symbols will appear.  \n\n\nIf the BG is being read from the Dexcom Share Servers, a small cloud icon will be in the corner of the BG reading.  Internet access is required to run in this mode.\n\n\nWhen you first start Loop, there may be a small yellow alert next to the BG.  This should go away within a short period of time (around 5 minutes or less).  If the yellow alert remains, something is wrong with fetching BG data.  You can try restarting the Loop app (double tap home button, upswipe on app to close) to see if BG data will resume.  Loop will not work when a yellow BG alert is shown (\nnote G5 exception below\n).\n\n\n\n\nFor Dexcom G5 users, a yellow alert will appear when a calibration is needed.  The alert will clear once the calibration is given, but typically Loop will work IF the yellow alert is only for a needed G5 calibration.\n\n\n\n\nTemp Basal\n\u2301\n\n\nThe temp basal will display the enacted temp basal change relative to the scheduled basal.  So if the scheduled basal was 1.0 units per hour and Loop has set a temp basal of 0.2 units per hour, the temp basal icon will display -0.8 U (as shown in the graphic to the left).\n\n\nReservoir\n\u2301\n\n\nThe reservoir icon will remain grey and plain until insulin volume decreases.  At 25% reservoir volume remaining, the reservoir icon will turn yellow.  At 10% reservoir volume remaining, the reservoir icon will turn red.  The remaining units will be displayed when it gets to these lower thresholds.\n\n\nBattery\n\u2301\n\n\nFor x23, x54 pumps, the battery icon will show 100/75/50/25% increments just as the pump does.  As the battery level decreases, the icon will turn from grey to yellow to red.  For x22 pumps, the battery icon will read discrete % values.  \n\n\nCharts\n\u2301\n\n\nThere are several charts that help you navigate your Loop actions.  Clicking on each of the charts will also open up additional information.\n\n\nGlucose Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe glucose chart displays BG values in your preferred units. The vertical scale of the chart is calculated on the fly by Loop to be as useful as possible while including the highest and lowest readings in the chart.\n\n\nThe horizontal axis is set to go forward from the current time until your DIA forward (so you can see what Loop eventually thinks BG will be). It then goes back in time as far as it can based upon the width in pixels of your screen. Note, if you turn your device to landscape mode you will have more screen real estate and thus will be able to see further back in time. If you would like to see further back in time you can use Nightscout or you can modify your Loop Graph hours (see the customizations available when you build your Loop app).\n\n\nThe target BG range is shown as a blue bar on the glucose chart.  If you have a single-value target BG range (such as 100-100 mg/dl), no blue range will appear.\n\n\nThe eventual BG displayed in the right side of the chart does NOT take into account a recently enacted temp basal.  In other words, if you are above BG target and Loop just enacted a high temp basal to help, the eventual BG does not reflect the expected lowering of BGs that would result from that recently enacted temp basal.  Loop waits until the insulin has actually been delivery before it \"uses\" the insulin in its calculations for BG impacts.  If you suspended your pump or had a \"no delivery\" alarm shortly after the temp basal was started, you would want that accurately reflected in the insulin on board and associated eventual BG.\n\n\nIf you tap on the Glucose Chart itself, it will open the Predicted Glucose chart\n\n\nPredicted Glucose Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe predicted glucose view is a great way to gain insight into the various components\u2019 importance in Loop\u2019s prediction of eventual BG. The graph at the top of this view will match your Glucose Chart. Below this chart you will see a very detailed explanation of all of the variables that Loop takes into account in predicting your future BG value. Each of those effects (including Carbohydrates, Insulin, Glucose Momentum and Retrospective Correction) includes details of the calculation use. You can tap on any of the entries to turn them off and on for visualization. The resulting changes can be viewed by the changes in the dashed lines.\n\n\nAdditionally, at the bottom of this screen there is a setting to \u201cEnable Retrospective Correction\u201d. By enabling it, it will more aggressively increase or decrease basal delivery when BG movement doesn\u2019t match the carbohydrates and insulin-based model.  You can read more about this setting in the Algorithm section of these docs.\n\n\nActive Insulin Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe Active Insulin chart displays the total insulin contribution from both temp basals and boluses.  Active IOB can be either positive and negative IOB.  Negative IOB results from the suspension of normally scheduled basals.  The active insulin displayed in the upper right corner of the chart does NOT include insulin contributions from a recently enacted temp basal or bolus until the pump\u2019s reservoir volume is read and confirms a drop in reservoir volume (confirming the insulin has actually been delivered).\n\n\nInsulin Delivery Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe Insulin Delivery chart displays a history of the temp basals enacted by Loop.  The display is relative to the scheduled basal rates entered in the Loop settings.  So, a rate displayed in this chart as \u201c+0 units\u201d would indicate no temp basal was set, and Loop defaulted to the scheduled basal rate.  Individual boluses are indicated by an orange triangle on the chart (shown in the graphic above, near the left-most time).  The total insulin delivered, including all basals and boluses, is given in the upper right corner of the graph.\n\n\nPlease be patient for a bolus delivery to appear.  There is a lag time from when you press the \u201cdeliver\u201d bolus button.  The insulin has to be delivered and then the pump reservoir needs to be read to confirm delivery, before the triangle will appear and IOB will be added.  On large boluses, the time to actually deliver the bolus may be several minutes.\n\n\nReservoir and Event History\n\u2301\n\n\n\n\n\n\n\n\n\nClicking on either the Active Insulin or Insulin Delivery charts will open your Insulin Delivery history.  The top of the screen will display the current IOB and the total insulin delivered for the day since midnight (or since the time the loop became active if you started Loop after midnight).  There are two viewing options; Reservoir or Event History.  \n\n\nLoop\u2019s default is to use actual reservoir volumes for determining the insulin delivered.  When there is a gap of 30 minutes or more in reservoir history, Loop classifies these readings as \u201cnot continuous\u201d and therefore unreliable for the purposes of determining insulin deliveries.  Therefore in those instances, Loop will rely on the event histories to determine insulin deliveries during the non-continuous times.  \n\n\nThe reservoir volume history can also be intentionally edited to cause a \u201cnot continuous\u201d instance.  Please see the Priming and Site Changes section of these docs for important information regarding IOB considerations during those activities, and how a \u201cnot continuous\u201d edit may help resolve erroneous IOB.\n\n\nCarbohydrate Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe Carbohydrate chart displays the carbs used by Loop to predict BG changes.  The active COB is displayed in the upper right corner of the chart.  Clicking on the chart will open the Carb Entries history and you can edit any previous entries through that screen.\n\n\nTool Bar\n\u2301\n\n\n\n\n\n\n\n\n\nThe tool bar is where your inputs to the Loop behavior take place.  The individual components of the tool bar are discussed in further detail in separate sections of the docs.",
            "title": "App Screens"
        },
        {
            "location": "/operation/overview/#loop-displays",
            "text": "This section of the docs will go over the Loop displays available and what information they offer.  Information about your Loop's actions (or inactions) can often be found simply by looking at the visuals presented in the app.",
            "title": "Loop Displays"
        },
        {
            "location": "/operation/overview/#status-screen",
            "text": "The Status Screen is the main root navigation screen in Loop.  It is broken up into 3 main display areas; Heads Up display (HUD), Charts, and Toolbar. The HUD is the top area of the screen.  This shows status of the last time loop ran, current BG Reading, current temp-basal, current insulin reservoir volume remaining, and current pump percentage battery remaining. The next area is the charting area. This includes, glucose trend and prediction, Active Insulin, Insulin Delivery, and Carbohydrates.  The final display area is the toolbar which has buttons for Carbohydrate, Insulin Bolus, Workout Mode, and Settings.",
            "title": "Status Screen"
        },
        {
            "location": "/operation/overview/#heads-up-display",
            "text": "",
            "title": "Heads Up Display"
        },
        {
            "location": "/operation/overview/#loop-status",
            "text": "The Loop Status is the colored circle in the upper left corner of the main Loop display.  There are four colors that are typically displayed.    A grey circle indicates the Loop is warming up and hasn\u2019t yet completed its initial loop.  When the Loop is first activated, it may take about 15-20 minutes to complete the first Loop, and the grey circle will be displayed.  It needs CGM data to be gathered, so be patient.  When it finally completes its first loop, the circle will turn green.  If you can't get the loop to turn grey, try reading the Use guide for Green Loop.  A green circle indicates the Loop has been successfully completed within the last 5 minutes.  The time since the loop last completed will be displayed under the circle.  A yellow circle indicates the Loop has not completed in the last 5-15 minutes.  It is not unusual to have a few instances of yellow circles throughout a day of looping.  They can be caused by temporarily getting too far away from RileyLink or iPhone (more than about 3-10 feet depending on conditions), CGM failing to read or being in ???, radio frequency \u201cnoise\u201d interference, and such.  Generally, most yellow circles will self-resolve without needing any special troubleshooting.  A red circle indicates the Loop has not completed in over 15 minutes.  This is not a typical state, and you should troubleshoot why Loop is not completing.  Please review the Use sections' Green Loop page for troubleshooting tips.   If you have Nightscout integration, you can also use the Loop Pill to help troubleshoot.  Clicking on the red circle will also popup the last error message to help guide your troubleshooting.  When the circle is notched and not complete, that means the Loop is operating in \u201copen loop\u201d mode.  When the \u201cclosed loop\u201d setting is turned on, the loop status will show a completed circle.  The loop status circle will pulse slightly when RileyLink is giving the pump a new temp basal setting.  The pulsing will stop when the temp basal has been set by the pump.",
            "title": "Loop Status"
        },
        {
            "location": "/operation/overview/#glucose",
            "text": "The current BG reading from the CGM will display, including trending arrow and time the reading was taken.  If the BG is being read straight from the G5 transmitter or G4 receiver, no special symbols will appear.    If the BG is being read from the Dexcom Share Servers, a small cloud icon will be in the corner of the BG reading.  Internet access is required to run in this mode.  When you first start Loop, there may be a small yellow alert next to the BG.  This should go away within a short period of time (around 5 minutes or less).  If the yellow alert remains, something is wrong with fetching BG data.  You can try restarting the Loop app (double tap home button, upswipe on app to close) to see if BG data will resume.  Loop will not work when a yellow BG alert is shown ( note G5 exception below ).   For Dexcom G5 users, a yellow alert will appear when a calibration is needed.  The alert will clear once the calibration is given, but typically Loop will work IF the yellow alert is only for a needed G5 calibration.",
            "title": "Glucose"
        },
        {
            "location": "/operation/overview/#temp-basal",
            "text": "The temp basal will display the enacted temp basal change relative to the scheduled basal.  So if the scheduled basal was 1.0 units per hour and Loop has set a temp basal of 0.2 units per hour, the temp basal icon will display -0.8 U (as shown in the graphic to the left).",
            "title": "Temp Basal"
        },
        {
            "location": "/operation/overview/#reservoir",
            "text": "The reservoir icon will remain grey and plain until insulin volume decreases.  At 25% reservoir volume remaining, the reservoir icon will turn yellow.  At 10% reservoir volume remaining, the reservoir icon will turn red.  The remaining units will be displayed when it gets to these lower thresholds.",
            "title": "Reservoir"
        },
        {
            "location": "/operation/overview/#battery",
            "text": "For x23, x54 pumps, the battery icon will show 100/75/50/25% increments just as the pump does.  As the battery level decreases, the icon will turn from grey to yellow to red.  For x22 pumps, the battery icon will read discrete % values.",
            "title": "Battery"
        },
        {
            "location": "/operation/overview/#charts",
            "text": "There are several charts that help you navigate your Loop actions.  Clicking on each of the charts will also open up additional information.",
            "title": "Charts"
        },
        {
            "location": "/operation/overview/#glucose-chart",
            "text": "The glucose chart displays BG values in your preferred units. The vertical scale of the chart is calculated on the fly by Loop to be as useful as possible while including the highest and lowest readings in the chart.  The horizontal axis is set to go forward from the current time until your DIA forward (so you can see what Loop eventually thinks BG will be). It then goes back in time as far as it can based upon the width in pixels of your screen. Note, if you turn your device to landscape mode you will have more screen real estate and thus will be able to see further back in time. If you would like to see further back in time you can use Nightscout or you can modify your Loop Graph hours (see the customizations available when you build your Loop app).  The target BG range is shown as a blue bar on the glucose chart.  If you have a single-value target BG range (such as 100-100 mg/dl), no blue range will appear.  The eventual BG displayed in the right side of the chart does NOT take into account a recently enacted temp basal.  In other words, if you are above BG target and Loop just enacted a high temp basal to help, the eventual BG does not reflect the expected lowering of BGs that would result from that recently enacted temp basal.  Loop waits until the insulin has actually been delivery before it \"uses\" the insulin in its calculations for BG impacts.  If you suspended your pump or had a \"no delivery\" alarm shortly after the temp basal was started, you would want that accurately reflected in the insulin on board and associated eventual BG.  If you tap on the Glucose Chart itself, it will open the Predicted Glucose chart",
            "title": "Glucose Chart"
        },
        {
            "location": "/operation/overview/#predicted-glucose-chart",
            "text": "The predicted glucose view is a great way to gain insight into the various components\u2019 importance in Loop\u2019s prediction of eventual BG. The graph at the top of this view will match your Glucose Chart. Below this chart you will see a very detailed explanation of all of the variables that Loop takes into account in predicting your future BG value. Each of those effects (including Carbohydrates, Insulin, Glucose Momentum and Retrospective Correction) includes details of the calculation use. You can tap on any of the entries to turn them off and on for visualization. The resulting changes can be viewed by the changes in the dashed lines.  Additionally, at the bottom of this screen there is a setting to \u201cEnable Retrospective Correction\u201d. By enabling it, it will more aggressively increase or decrease basal delivery when BG movement doesn\u2019t match the carbohydrates and insulin-based model.  You can read more about this setting in the Algorithm section of these docs.",
            "title": "Predicted Glucose Chart"
        },
        {
            "location": "/operation/overview/#active-insulin-chart",
            "text": "The Active Insulin chart displays the total insulin contribution from both temp basals and boluses.  Active IOB can be either positive and negative IOB.  Negative IOB results from the suspension of normally scheduled basals.  The active insulin displayed in the upper right corner of the chart does NOT include insulin contributions from a recently enacted temp basal or bolus until the pump\u2019s reservoir volume is read and confirms a drop in reservoir volume (confirming the insulin has actually been delivered).",
            "title": "Active Insulin Chart"
        },
        {
            "location": "/operation/overview/#insulin-delivery-chart",
            "text": "The Insulin Delivery chart displays a history of the temp basals enacted by Loop.  The display is relative to the scheduled basal rates entered in the Loop settings.  So, a rate displayed in this chart as \u201c+0 units\u201d would indicate no temp basal was set, and Loop defaulted to the scheduled basal rate.  Individual boluses are indicated by an orange triangle on the chart (shown in the graphic above, near the left-most time).  The total insulin delivered, including all basals and boluses, is given in the upper right corner of the graph.  Please be patient for a bolus delivery to appear.  There is a lag time from when you press the \u201cdeliver\u201d bolus button.  The insulin has to be delivered and then the pump reservoir needs to be read to confirm delivery, before the triangle will appear and IOB will be added.  On large boluses, the time to actually deliver the bolus may be several minutes.",
            "title": "Insulin Delivery Chart"
        },
        {
            "location": "/operation/overview/#reservoir-and-event-history",
            "text": "Clicking on either the Active Insulin or Insulin Delivery charts will open your Insulin Delivery history.  The top of the screen will display the current IOB and the total insulin delivered for the day since midnight (or since the time the loop became active if you started Loop after midnight).  There are two viewing options; Reservoir or Event History.    Loop\u2019s default is to use actual reservoir volumes for determining the insulin delivered.  When there is a gap of 30 minutes or more in reservoir history, Loop classifies these readings as \u201cnot continuous\u201d and therefore unreliable for the purposes of determining insulin deliveries.  Therefore in those instances, Loop will rely on the event histories to determine insulin deliveries during the non-continuous times.    The reservoir volume history can also be intentionally edited to cause a \u201cnot continuous\u201d instance.  Please see the Priming and Site Changes section of these docs for important information regarding IOB considerations during those activities, and how a \u201cnot continuous\u201d edit may help resolve erroneous IOB.",
            "title": "Reservoir and Event History"
        },
        {
            "location": "/operation/overview/#carbohydrate-chart",
            "text": "The Carbohydrate chart displays the carbs used by Loop to predict BG changes.  The active COB is displayed in the upper right corner of the chart.  Clicking on the chart will open the Carb Entries history and you can edit any previous entries through that screen.",
            "title": "Carbohydrate Chart"
        },
        {
            "location": "/operation/overview/#tool-bar",
            "text": "The tool bar is where your inputs to the Loop behavior take place.  The individual components of the tool bar are discussed in further detail in separate sections of the docs.",
            "title": "Tool Bar"
        },
        {
            "location": "/operation/loop/open-loop/",
            "text": "Open Loop\n\u2301\n\n\nOpen loop is a great place to start with Loop. When you are operating in open loop mode, Loop is offering recommedendations for temp basals and will display them on the main screen.  The recommendations will not be enacted unless you specifically choose to enact the temp basal.  Usually in open loop mode, you aren't really enacting the recommended basals but instead watching how the recommendations come in and figuring out WHY they are being recommended.\n\n\nIt is understandable to want to jump straight away into close loop mode, but a lot can be learned by watching Loop operate in open mode.  Becoming familiar with the algorithm can be easier by watching it in action rather than only reading about it in docs.\n\n\nTesting\n\u2301\n\n\nA great benefit of open loop mode is that you can establish a baseline of BG trends without the influence of temp basals from Loop.  This is particularly helpful if you haven't used Medtronic sites/pumps prior to Loop.  You may find that your basal rates change significantly coming from other brands of pumps.  Taking the time to establish a good Medtronic pump basal profile will set you up for a smoother transition to close loop mode.  Test your ISF during open loop time too, as ISF is an important component for every Loop calculation for temp basals.  Every 5 minutes, Loop uses your ISF...so it's worth testing it ahead of close loop mode.\n\n\nEventual BG\n\u2301\n\n\nOne of the best things you can do is to train yourself to watch the eventual BG rather than the current BG for helping understand Loop recommendations for temp basals.  So many of us have become accustomed to dealing with current BGs and perhaps IOB at the same time...but Loop is also looking at BG momentum, carbs on board, restrospective trends.  Loop is utilizing all of those variables to predict an eventual BG.  It's current decisions are based on that eventual BG.  Training yourself to watch that eventual BG will help you understand the temp basals being offered at any given time.\n\n\nCarb Absorption\n\u2301\n\n\nProbably the next most difficult transition involves using carb absorption as a component to every meal bolus.  Understand that the default carb absorption times in Loop may not work for your particular body.  Similar to how you perhaps had used extended boluses for meals that impacted BGs longer than the duration of your insulin...that same idea applies to estimating your carb absorption times.  Watch your meals and try to estimate how long they are impacting your BG for various types of food.  Watch the times when Loop would've wanted to suspend or high temp basal...ask yourself why it would be doing that.  Especially ask yourself if that is the same decision as you would've made at that time in a meal normally.  Would you be worried that you might go low later if you see Loop offering high temp basal early after a meal?  Would you be worried about going high later if Loop wants to suspend basals instead?  If you put some effort into this effort before closing the loop, it will pay off with a smoother transition to closed loop.\n\n\nTroubleshooting\n\u2301\n\n\nGet used to carrying the RileyLink around.  Find how far your connectivity stretches before you have pump communication problems.  Get used to troubleshooting yellow and red loops, finding out the pattern/cause of any potential loop issues.  You'll be less frustrated starting on closed loop if you aren't dealing with learning new electronics at the same time as you are learning carb absorption times in a closed loop.  Learn how to retune your RL. \n\n\nBolus\n\u2301\n\n\nBolus meals from the Loop, rather than the pump.  Become familiar with entering carbs into the Loop, as well as editing them.  Watch how long it takes for Loop app to display the bolus after you enact it (hint: there's a delay until the bolus finishes delivery and the pump gets read).  Familiarize yourself with the \"Bolus May Have Failed\" notifications and how to handle them.  Double check the pump and watch to see if the bolus indeed didn't enact before trying to give the bolus again.  \n\n\nCaregiver training\n\u2301\n\n\nIf you are the parent of a t1d kid using Loop, make sure you take the time to educate caregivers around your family and school for how to use Loop.  Perhaps you want to draft individualized quick info sheets for those caregivers to use with Loop.  If your child needs a site change at school, school staff or your child need to know how to delete reservoir history or change to open loop for the duration of DIA.  Try to watch Nightscout while you get to know Loop so that you can become better at remote troubleshooting of any problems that you might encounter.",
            "title": "Open Loop"
        },
        {
            "location": "/operation/loop/open-loop/#open-loop",
            "text": "Open loop is a great place to start with Loop. When you are operating in open loop mode, Loop is offering recommedendations for temp basals and will display them on the main screen.  The recommendations will not be enacted unless you specifically choose to enact the temp basal.  Usually in open loop mode, you aren't really enacting the recommended basals but instead watching how the recommendations come in and figuring out WHY they are being recommended.  It is understandable to want to jump straight away into close loop mode, but a lot can be learned by watching Loop operate in open mode.  Becoming familiar with the algorithm can be easier by watching it in action rather than only reading about it in docs.",
            "title": "Open Loop"
        },
        {
            "location": "/operation/loop/open-loop/#testing",
            "text": "A great benefit of open loop mode is that you can establish a baseline of BG trends without the influence of temp basals from Loop.  This is particularly helpful if you haven't used Medtronic sites/pumps prior to Loop.  You may find that your basal rates change significantly coming from other brands of pumps.  Taking the time to establish a good Medtronic pump basal profile will set you up for a smoother transition to close loop mode.  Test your ISF during open loop time too, as ISF is an important component for every Loop calculation for temp basals.  Every 5 minutes, Loop uses your ISF...so it's worth testing it ahead of close loop mode.",
            "title": "Testing"
        },
        {
            "location": "/operation/loop/open-loop/#eventual-bg",
            "text": "One of the best things you can do is to train yourself to watch the eventual BG rather than the current BG for helping understand Loop recommendations for temp basals.  So many of us have become accustomed to dealing with current BGs and perhaps IOB at the same time...but Loop is also looking at BG momentum, carbs on board, restrospective trends.  Loop is utilizing all of those variables to predict an eventual BG.  It's current decisions are based on that eventual BG.  Training yourself to watch that eventual BG will help you understand the temp basals being offered at any given time.",
            "title": "Eventual BG"
        },
        {
            "location": "/operation/loop/open-loop/#carb-absorption",
            "text": "Probably the next most difficult transition involves using carb absorption as a component to every meal bolus.  Understand that the default carb absorption times in Loop may not work for your particular body.  Similar to how you perhaps had used extended boluses for meals that impacted BGs longer than the duration of your insulin...that same idea applies to estimating your carb absorption times.  Watch your meals and try to estimate how long they are impacting your BG for various types of food.  Watch the times when Loop would've wanted to suspend or high temp basal...ask yourself why it would be doing that.  Especially ask yourself if that is the same decision as you would've made at that time in a meal normally.  Would you be worried that you might go low later if you see Loop offering high temp basal early after a meal?  Would you be worried about going high later if Loop wants to suspend basals instead?  If you put some effort into this effort before closing the loop, it will pay off with a smoother transition to closed loop.",
            "title": "Carb Absorption"
        },
        {
            "location": "/operation/loop/open-loop/#troubleshooting",
            "text": "Get used to carrying the RileyLink around.  Find how far your connectivity stretches before you have pump communication problems.  Get used to troubleshooting yellow and red loops, finding out the pattern/cause of any potential loop issues.  You'll be less frustrated starting on closed loop if you aren't dealing with learning new electronics at the same time as you are learning carb absorption times in a closed loop.  Learn how to retune your RL.",
            "title": "Troubleshooting"
        },
        {
            "location": "/operation/loop/open-loop/#bolus",
            "text": "Bolus meals from the Loop, rather than the pump.  Become familiar with entering carbs into the Loop, as well as editing them.  Watch how long it takes for Loop app to display the bolus after you enact it (hint: there's a delay until the bolus finishes delivery and the pump gets read).  Familiarize yourself with the \"Bolus May Have Failed\" notifications and how to handle them.  Double check the pump and watch to see if the bolus indeed didn't enact before trying to give the bolus again.",
            "title": "Bolus"
        },
        {
            "location": "/operation/loop/open-loop/#caregiver-training",
            "text": "If you are the parent of a t1d kid using Loop, make sure you take the time to educate caregivers around your family and school for how to use Loop.  Perhaps you want to draft individualized quick info sheets for those caregivers to use with Loop.  If your child needs a site change at school, school staff or your child need to know how to delete reservoir history or change to open loop for the duration of DIA.  Try to watch Nightscout while you get to know Loop so that you can become better at remote troubleshooting of any problems that you might encounter.",
            "title": "Caregiver training"
        },
        {
            "location": "/operation/loop/close-loop/",
            "text": "Close Loop\n\u2301\n\n\nWhen you feel like you have learned what you need from open loop, you should be ready to switch to close loop.  There are several ways you can help make that transition as smooth as possible.  \n\n\nTiming\n\u2301\n\n\nMany people choose to transition to close loop in a step-wise fashion.  Starting close loop on weekends is an easier starting point so that you can minimize distractions (let's face it...you'll probably be staring at the Loop a lot for those first few days). Typically, people have an easier time transitioning to close loop for parts of their day that don't involve food...so nighttimes tend to be easier than daytimes to start.\n\n\nMaximum Basal Rate\n\u2301\n\n\nWhen you are first beginning to close loop, it is important to be conservative (low) in setting your maximum basal rate.  If your settings are incorrect in other areas (basal rates, carb absorption time, carb ratio, etc), Loop may enact incorrectly aggressive high temp basals.  Gradually increase your maximum basal rate as your comfort and confidence in Loop increase.  Typically, experienced closed loop users set their max basal rate no more than 3-4 times their average basal rate.  \n\n\nBG targets\n\u2301\n\n\nIf your basals, ISF, or carb ratios aren't set correctly, Loop may overshoot and leave you lower than expected (or with more IOB than you are comfortable with).  Setting your low BG target slightly higher can help prevent unexpected lows or high IOB as you adjust your settings.\n\n\nWatch the IOB\n\u2301\n\n\nWatch whether Loop accumulates positive or negative IOB while holding your BG steady when no food is present.  If you find that you are \"carrying\" positive or negative IOB consistently, you should review your settings to see if perhaps your basal or ISF needs adjusting.\n\n\nMeals\n\u2301\n\n\nMeals will likely be the hardest part of transitioning to close loop.  Starting with foods that you have a high comfort level with is a great idea.  If you have favorite meals that you know well (how high BGs usually go, how much to bolus, how to prebolus, etc), these would be a good starting point.  Watching when the Loop high temps or suspends basals (early vs late in meal) will really help you adjust to find your typical carb absorption times.  As a general idea, \nassuming other settings are accurate\n:\n\n\n\n\nearly high temps in a meal that leave you low after, you may need to shorten carb absorption time\n\n\nearly suspensions in a meal that leave you high after, you may need to lengthen carb absorption time\n\n\n\n\nThis is definitely an area where YDMV (your diabetes may vary), so don't expect or accept that what works for others will work for you.  Test, observe, and adjust as needed.",
            "title": "Closed Loop"
        },
        {
            "location": "/operation/loop/close-loop/#close-loop",
            "text": "When you feel like you have learned what you need from open loop, you should be ready to switch to close loop.  There are several ways you can help make that transition as smooth as possible.",
            "title": "Close Loop"
        },
        {
            "location": "/operation/loop/close-loop/#timing",
            "text": "Many people choose to transition to close loop in a step-wise fashion.  Starting close loop on weekends is an easier starting point so that you can minimize distractions (let's face it...you'll probably be staring at the Loop a lot for those first few days). Typically, people have an easier time transitioning to close loop for parts of their day that don't involve food...so nighttimes tend to be easier than daytimes to start.",
            "title": "Timing"
        },
        {
            "location": "/operation/loop/close-loop/#maximum-basal-rate",
            "text": "When you are first beginning to close loop, it is important to be conservative (low) in setting your maximum basal rate.  If your settings are incorrect in other areas (basal rates, carb absorption time, carb ratio, etc), Loop may enact incorrectly aggressive high temp basals.  Gradually increase your maximum basal rate as your comfort and confidence in Loop increase.  Typically, experienced closed loop users set their max basal rate no more than 3-4 times their average basal rate.",
            "title": "Maximum Basal Rate"
        },
        {
            "location": "/operation/loop/close-loop/#bg-targets",
            "text": "If your basals, ISF, or carb ratios aren't set correctly, Loop may overshoot and leave you lower than expected (or with more IOB than you are comfortable with).  Setting your low BG target slightly higher can help prevent unexpected lows or high IOB as you adjust your settings.",
            "title": "BG targets"
        },
        {
            "location": "/operation/loop/close-loop/#watch-the-iob",
            "text": "Watch whether Loop accumulates positive or negative IOB while holding your BG steady when no food is present.  If you find that you are \"carrying\" positive or negative IOB consistently, you should review your settings to see if perhaps your basal or ISF needs adjusting.",
            "title": "Watch the IOB"
        },
        {
            "location": "/operation/loop/close-loop/#meals",
            "text": "Meals will likely be the hardest part of transitioning to close loop.  Starting with foods that you have a high comfort level with is a great idea.  If you have favorite meals that you know well (how high BGs usually go, how much to bolus, how to prebolus, etc), these would be a good starting point.  Watching when the Loop high temps or suspends basals (early vs late in meal) will really help you adjust to find your typical carb absorption times.  As a general idea,  assuming other settings are accurate :   early high temps in a meal that leave you low after, you may need to shorten carb absorption time  early suspensions in a meal that leave you high after, you may need to lengthen carb absorption time   This is definitely an area where YDMV (your diabetes may vary), so don't expect or accept that what works for others will work for you.  Test, observe, and adjust as needed.",
            "title": "Meals"
        },
        {
            "location": "/operation/loop/green-loop/",
            "text": "Getting a Green Loop\n\u2301\n\n\nA properly operating Loop will remain green for 5 minutes.  To stay green, there are several things that Loop must do:\n\n\n\n\nLoop obtains a BG value from your CGM source, and\n\n\nLoop reads your pump history to know about insulin deliveries and recent events, and\n\n\nLoop completes a run of its calculations based on those inputs\n\n\nLoop recommends a temp basal and sends that instruction to the pump\n\n\nPump enacts the recommended temp basal\n\n\nLoop confirms the pump enacted the recommended temp basal\n\n\n\n\nIf those items are successful, Loop will stay green.  If something goes wrong in those steps and more than 5 minutes goes by, the Loop will turn yellow until it can solve the problem.  If more than 15 minutes goes by and the problem still exists, Loop will turn red.\n\n\nTroubleshooting why your Loop is failing to stay green is a matter of figuring out which of those steps is failing.\n\n\nGrey to Green Loop\n\u2301\n\n\nIf you are initially starting the Loop app, wait about 15-20 minutes for the Loop to turn from grey to green.  There's a bit of time for Loop to pull all of those first pieces of data together, especially reading your pump history for the first time.  If the Loop remains grey after 15-20 min, there are several possible causes for this.  Check these most frequently missed items on new setups:\n\n\nPump\n\n\n\n\nmax basal rate in Loop app is no greater than max basal rate in pump settings\n\n\ntemp basal type is set to unit/hour\n\n\nremote devices is set to on and an ID is entered\n\n\nMysentry is connected for x23 and x54 pumps\n\n\n\n\nCGM\n\n\n\n\nShare app installed on the looping iPhone and open\n\n\nCGM getting current values without interruption\n\n\n\n\nRileyLink\n\n\n\n\nRL is charged (it does not ship completely charged)\n\n\nRL battery needs to be securely plugged in, \ncheck those connections\n\n\n\n\nIf all of those items are double-checked, try closing both the Loop and Dexcom apps (double-tap home button and up-swipe to close apps).  Toggle your BT on iPhone off/on.  Reopen the Loop app, then reopen Dexcom app.\n\n\nYellow and Red Loops\n\u2301\n\n\nFor Loopers who have already been successfully getting green loops, but suddenly find themselves with problems...we need to figure out where your loop is failing in the necessary steps to keep a green loop.\n\n\n\n\nTo see the latest Loop error messages, touch the yellow or red Loop Status circle on the main screen. If an error message is available it will appear in a dialog window. Much of that same message is also available from the Nightscout \nLoop pill\n.\n\n\n\n\nBasically ask yourself a couple questions to start:\n\n\n\n\nIs this a CGM issue?\n\n\nIs this a pump issue?\n\n\nIs this a BT issue?\n\n\n\n\nWe can use a combination of the display and the error message to narrow down the possible causes of the Loop troubles.\n\n\n\n\nHappy Green Loop\n\u2301\n\n\n\n\nA healthy green loop will have timestamps less than 5 minutes old below the green loop, BG reading, and reservoir level.  This indicates that the Loop was run less than 5 minutes ago, fresh BGs have been coming in, temp basals have been enacted by the pump, and the pump is communicating with Loop.  The screenshot below is a very happy Loop.\n\n\n\n\n\n\n\n\n\n\n\n\n\nOld BG data (CGM issue)\n\u2301\n\n\n\n\nIf your Loop turns yellow or red, easiest to start by checking the timestamps on the BG.  If the BG reading is more than 5 minutes older than your iPhone time, your Loop will not be green.  The screenshot below is a good example of missing BG data preventing the Loop from staying green.  The pump is still communicating (reservoir reading is only 2 minutes old)...BGs appear to be the problem.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBG troubleshooting steps:\n\n\n\n\nVerify you have enabled the correct \nCGM Selection\n in Loop settings\n\n\nFor G5, verify your \ntransmitter ID\n is set correctly in Loop settings\n\n\nFor G4, verify the Dexcom Share app is running on your phone\n\n\nFetch Recent Glucose command in RL only works for Medtronic CGM users, by the way.\n\n\nIf your local CGM is working fine on the Dexcom apps, but Loop isn't reading it:\n\n\nmake sure you enter your Dexcom Share account info in the Loop settings. Loop will automatically switch to pulling from the Dexcom servers if the local reading isn't working.\n\n\ntry turning Loop and Dexcom apps off, toggle BT off/on, restart Loop app, and then restart Dexcom app\n\n\n\n\n\n\n\n\n\n\nOld Pump data (Pump Issue)\n\u2301\n\n\n\n\nIf your pump reading is older than 5 minutes, but BGs are fine, then you will need to troubleshoot the pump communications.  The screenshot below is a good example of missing pump data preventing the Loop from staying green.  The CGM is still communicating (BG reading is only 2 minutes old)...but pump reservoir reading is older than 5 min.\n\n\n\n\n\n\n\n\n\n\n\nPump troubleshooting steps:\n\n\n\n\nYour pump battery may be low.  Replace the battery...even if the percentage doesn't look low, this is a good starting point\n\n\nIf you have an x23 or x54 model pump, make sure your mysentry is paired\n\n\nHave the pump and RL gotten too far away from each other?  Try bringing them closer\n\n\nTry retuning the RL.  Just a note though, the Loop has code embedded to automatically retunes RL when the pump comms are failing.  So, manual retuning is merely more about speeding things along than being a necessary step to fixing pump comms.\n\n\nTry a Fetch Pump History.  Same as retuning though, the Loop has code embedded to automatically pull pump history.  Manual fetching of pump history is more about speeding things along than being a necessary step to fixing pump comms.\n\n\n\n\n\n\nAbout rf comms between pump and RL\n\n\nRF comms errors can and will happen. Just be patient, and it almost always corrects itself shortly.  Yellow loops happen sometimes, they usually self-resolve.  Red loops are more rare and usually a good time to start investigating possible source.  Some environments will be noisy for rf comms (such as concerts, amusement parks, tech venues), and your loop may not stay green as often as usual.  Just be patient. When you leave that environment, looping will go back to normal.\n\n\nThese types of pump error messages almost always represent short-term pump comms issues that will resolve on their own without necessary intervention, if the pump and RL are within rf-talking distance of each other.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIncorrect Pump Time (Pump Issue)\n\u2301\n\n\n\n\nAnd here's an interesting problem.  BGs are current, but notice that the pump time is 2 hours into the future of the current iPhone time.  In this case, the Loop user had manually set their pump time during travels and caused the pump time to be out of sync with Loop.  Remember, \ndo not change your pump time manually...always use the RL to set the pump time\n.  This red loop was resolved as soon as the Looper used RL to set the pump time.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFailure to Enact Temp Basals (Pump Issue)\n\u2301\n\n\n\n\nIf you see messages about \"Could not verify TempBasal on attempt  2\", that is likely one of just a few issues.  The message indicates that Loop has BGs and pump data, has sent a recommended basal to the pump, but the pump does not appear to be enacting those basals.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour pump cannot be suspended.  Resume insulin deliveries\n\n\nMax basal rate in Loop app cannot be greater than max basal rate in pump settings\n\n\nTemp basal type is set to unit/hour in pump\n\n\n\n\n\n\nBluetooth failures (RL or iPhone issue)\n\u2301\n\n\n\n\nSometimes the RilleyLink and iPhone fail to communicate via BT.  You need to determine if this is due to RL's problems, iPhone's problems, or just BT communications problem.  There can be messages when BT fails, such as the message below, or \"RileyLink Timeout\" error messages.\n\n\n\n\n\n\n\n\n\n\n\n\n\nHas your RL been fully charged? Try charging your RL for an hour or two\n\n\nIs your lipo battery old and perhaps dying earlier in the day?  Order a new battery\n\n\nYour RL battery needs to be securely plugged in, check those connections.\n\n\nCheck if your RL is on and says \"connected\" in the \nstatus screen for bluetooth\n. If it says \"connecting\" or \"disconnected\", you have a BT problem with RL and iPhone.\n\n\nMake sure your iPhone's BT is turned on, and BT is not being affected by other BT systems (such as car audio)\n\n\nCheck if any of the RL command buttons work...such as Send Button press.  If the commands are frozen, toggle your RL power switch and turn your iPhone BT off/on.\n\n\n\n\n\n\nFailure to set Insulin Curve Model (Loop settings)\n\u2301\n\n\n\n\nIf you see messages about \"Missing data: Glucose effects\", you likely have \nforgotten to set your Insulin Curve Model\n.  The message indicates that Loop is missing a component of its algorithm inputs to calculate glucose effects on predicted BGs.   Return to your Loop app settings and pick an Insulin Curve.\n\n\n\n\n\n\n\n\n\n\n\n\n\nPatience\n\u2301\n\n\nIt may be that everything is working properly, but you need to wait for Loop to update.\n\n\n\n\nCGM data is retrieved every 5 minutes.\n\n\nPump event history data is retrieved every 5 minutes.\n\n\n\n\nIntermittent errors can cause this cycle to be 10-15 minutes or longer.\n\n\n\n\n\n\nIf all else fails after verifying the settings listed in the sections above, you can:\n\n\n\n\nClose and restart the Loop and Dexcom apps\n\n\nToggle BT off/on\n\n\nTurn RileyLink off/on\n\n\nReplace pump battery\n\n\nTake a relaxing walk",
            "title": "Getting a Green Loop"
        },
        {
            "location": "/operation/loop/green-loop/#getting-a-green-loop",
            "text": "A properly operating Loop will remain green for 5 minutes.  To stay green, there are several things that Loop must do:   Loop obtains a BG value from your CGM source, and  Loop reads your pump history to know about insulin deliveries and recent events, and  Loop completes a run of its calculations based on those inputs  Loop recommends a temp basal and sends that instruction to the pump  Pump enacts the recommended temp basal  Loop confirms the pump enacted the recommended temp basal   If those items are successful, Loop will stay green.  If something goes wrong in those steps and more than 5 minutes goes by, the Loop will turn yellow until it can solve the problem.  If more than 15 minutes goes by and the problem still exists, Loop will turn red.  Troubleshooting why your Loop is failing to stay green is a matter of figuring out which of those steps is failing.",
            "title": "Getting a Green Loop"
        },
        {
            "location": "/operation/loop/green-loop/#grey-to-green-loop",
            "text": "If you are initially starting the Loop app, wait about 15-20 minutes for the Loop to turn from grey to green.  There's a bit of time for Loop to pull all of those first pieces of data together, especially reading your pump history for the first time.  If the Loop remains grey after 15-20 min, there are several possible causes for this.  Check these most frequently missed items on new setups:  Pump   max basal rate in Loop app is no greater than max basal rate in pump settings  temp basal type is set to unit/hour  remote devices is set to on and an ID is entered  Mysentry is connected for x23 and x54 pumps   CGM   Share app installed on the looping iPhone and open  CGM getting current values without interruption   RileyLink   RL is charged (it does not ship completely charged)  RL battery needs to be securely plugged in,  check those connections   If all of those items are double-checked, try closing both the Loop and Dexcom apps (double-tap home button and up-swipe to close apps).  Toggle your BT on iPhone off/on.  Reopen the Loop app, then reopen Dexcom app.",
            "title": "Grey to Green Loop"
        },
        {
            "location": "/operation/loop/green-loop/#yellow-and-red-loops",
            "text": "For Loopers who have already been successfully getting green loops, but suddenly find themselves with problems...we need to figure out where your loop is failing in the necessary steps to keep a green loop.   To see the latest Loop error messages, touch the yellow or red Loop Status circle on the main screen. If an error message is available it will appear in a dialog window. Much of that same message is also available from the Nightscout  Loop pill .   Basically ask yourself a couple questions to start:   Is this a CGM issue?  Is this a pump issue?  Is this a BT issue?   We can use a combination of the display and the error message to narrow down the possible causes of the Loop troubles.",
            "title": "Yellow and Red Loops"
        },
        {
            "location": "/operation/loop/green-loop/#happy-green-loop",
            "text": "A healthy green loop will have timestamps less than 5 minutes old below the green loop, BG reading, and reservoir level.  This indicates that the Loop was run less than 5 minutes ago, fresh BGs have been coming in, temp basals have been enacted by the pump, and the pump is communicating with Loop.  The screenshot below is a very happy Loop.",
            "title": "Happy Green Loop"
        },
        {
            "location": "/operation/loop/green-loop/#old-bg-data-cgm-issue",
            "text": "If your Loop turns yellow or red, easiest to start by checking the timestamps on the BG.  If the BG reading is more than 5 minutes older than your iPhone time, your Loop will not be green.  The screenshot below is a good example of missing BG data preventing the Loop from staying green.  The pump is still communicating (reservoir reading is only 2 minutes old)...BGs appear to be the problem.         BG troubleshooting steps:   Verify you have enabled the correct  CGM Selection  in Loop settings  For G5, verify your  transmitter ID  is set correctly in Loop settings  For G4, verify the Dexcom Share app is running on your phone  Fetch Recent Glucose command in RL only works for Medtronic CGM users, by the way.  If your local CGM is working fine on the Dexcom apps, but Loop isn't reading it:  make sure you enter your Dexcom Share account info in the Loop settings. Loop will automatically switch to pulling from the Dexcom servers if the local reading isn't working.  try turning Loop and Dexcom apps off, toggle BT off/on, restart Loop app, and then restart Dexcom app",
            "title": "Old BG data (CGM issue)"
        },
        {
            "location": "/operation/loop/green-loop/#old-pump-data-pump-issue",
            "text": "If your pump reading is older than 5 minutes, but BGs are fine, then you will need to troubleshoot the pump communications.  The screenshot below is a good example of missing pump data preventing the Loop from staying green.  The CGM is still communicating (BG reading is only 2 minutes old)...but pump reservoir reading is older than 5 min.      Pump troubleshooting steps:   Your pump battery may be low.  Replace the battery...even if the percentage doesn't look low, this is a good starting point  If you have an x23 or x54 model pump, make sure your mysentry is paired  Have the pump and RL gotten too far away from each other?  Try bringing them closer  Try retuning the RL.  Just a note though, the Loop has code embedded to automatically retunes RL when the pump comms are failing.  So, manual retuning is merely more about speeding things along than being a necessary step to fixing pump comms.  Try a Fetch Pump History.  Same as retuning though, the Loop has code embedded to automatically pull pump history.  Manual fetching of pump history is more about speeding things along than being a necessary step to fixing pump comms.    About rf comms between pump and RL  RF comms errors can and will happen. Just be patient, and it almost always corrects itself shortly.  Yellow loops happen sometimes, they usually self-resolve.  Red loops are more rare and usually a good time to start investigating possible source.  Some environments will be noisy for rf comms (such as concerts, amusement parks, tech venues), and your loop may not stay green as often as usual.  Just be patient. When you leave that environment, looping will go back to normal.  These types of pump error messages almost always represent short-term pump comms issues that will resolve on their own without necessary intervention, if the pump and RL are within rf-talking distance of each other.",
            "title": "Old Pump data (Pump Issue)"
        },
        {
            "location": "/operation/loop/green-loop/#incorrect-pump-time-pump-issue",
            "text": "And here's an interesting problem.  BGs are current, but notice that the pump time is 2 hours into the future of the current iPhone time.  In this case, the Loop user had manually set their pump time during travels and caused the pump time to be out of sync with Loop.  Remember,  do not change your pump time manually...always use the RL to set the pump time .  This red loop was resolved as soon as the Looper used RL to set the pump time.",
            "title": "Incorrect Pump Time (Pump Issue)"
        },
        {
            "location": "/operation/loop/green-loop/#failure-to-enact-temp-basals-pump-issue",
            "text": "If you see messages about \"Could not verify TempBasal on attempt  2\", that is likely one of just a few issues.  The message indicates that Loop has BGs and pump data, has sent a recommended basal to the pump, but the pump does not appear to be enacting those basals.       Your pump cannot be suspended.  Resume insulin deliveries  Max basal rate in Loop app cannot be greater than max basal rate in pump settings  Temp basal type is set to unit/hour in pump",
            "title": "Failure to Enact Temp Basals (Pump Issue)"
        },
        {
            "location": "/operation/loop/green-loop/#bluetooth-failures-rl-or-iphone-issue",
            "text": "Sometimes the RilleyLink and iPhone fail to communicate via BT.  You need to determine if this is due to RL's problems, iPhone's problems, or just BT communications problem.  There can be messages when BT fails, such as the message below, or \"RileyLink Timeout\" error messages.       Has your RL been fully charged? Try charging your RL for an hour or two  Is your lipo battery old and perhaps dying earlier in the day?  Order a new battery  Your RL battery needs to be securely plugged in, check those connections.  Check if your RL is on and says \"connected\" in the  status screen for bluetooth . If it says \"connecting\" or \"disconnected\", you have a BT problem with RL and iPhone.  Make sure your iPhone's BT is turned on, and BT is not being affected by other BT systems (such as car audio)  Check if any of the RL command buttons work...such as Send Button press.  If the commands are frozen, toggle your RL power switch and turn your iPhone BT off/on.",
            "title": "Bluetooth failures (RL or iPhone issue)"
        },
        {
            "location": "/operation/loop/green-loop/#failure-to-set-insulin-curve-model-loop-settings",
            "text": "If you see messages about \"Missing data: Glucose effects\", you likely have  forgotten to set your Insulin Curve Model .  The message indicates that Loop is missing a component of its algorithm inputs to calculate glucose effects on predicted BGs.   Return to your Loop app settings and pick an Insulin Curve.",
            "title": "Failure to set Insulin Curve Model (Loop settings)"
        },
        {
            "location": "/operation/loop/green-loop/#patience",
            "text": "It may be that everything is working properly, but you need to wait for Loop to update.   CGM data is retrieved every 5 minutes.  Pump event history data is retrieved every 5 minutes.   Intermittent errors can cause this cycle to be 10-15 minutes or longer.    If all else fails after verifying the settings listed in the sections above, you can:   Close and restart the Loop and Dexcom apps  Toggle BT off/on  Turn RileyLink off/on  Replace pump battery  Take a relaxing walk",
            "title": "Patience"
        },
        {
            "location": "/operation/features/watch/",
            "text": "Apple Watch\n\u2301\n\n\n\n\n\n\n\n\n\nIf you add an Apple Watch after building Loop, you will need to pair your watch to your iPhone and then rebuild Loop to enable the Loop watch app to show up as an available watch app.\n\n\nLoop is currently supported with all released versions of the Apple Watch and Apple watchOS 4.  Cool factor is increased since the Loop user can directly enter carbs and boluses straight from the watch, without needing to access the iPhone.\n\n\nThe carb and bolus screen on the watch can be accessed by force touching the watch (hard press).   A loop complication exists to show BG on the watchface but the update rate is limited to ~30mins due to limitations imposed by apple to increase battery life. If constant, real-time monitoring is desired, you should use the Loop app as the main screen. This can be achieved by setting the watch to always show last opened app on wake. Loop will always have to be the last app opened for this to work.\n\n\nThe default installation of the Loop's watch app autofills in 75% of the recommended bolus, and you can manually scroll to get the full bolus amount.  Please check the \nApple Watch customizations section\n if you wish to change that to 100% recommended bolus as the initial autofill.",
            "title": "Apple Watch"
        },
        {
            "location": "/operation/features/watch/#apple-watch",
            "text": "If you add an Apple Watch after building Loop, you will need to pair your watch to your iPhone and then rebuild Loop to enable the Loop watch app to show up as an available watch app.  Loop is currently supported with all released versions of the Apple Watch and Apple watchOS 4.  Cool factor is increased since the Loop user can directly enter carbs and boluses straight from the watch, without needing to access the iPhone.  The carb and bolus screen on the watch can be accessed by force touching the watch (hard press).   A loop complication exists to show BG on the watchface but the update rate is limited to ~30mins due to limitations imposed by apple to increase battery life. If constant, real-time monitoring is desired, you should use the Loop app as the main screen. This can be achieved by setting the watch to always show last opened app on wake. Loop will always have to be the last app opened for this to work.  The default installation of the Loop's watch app autofills in 75% of the recommended bolus, and you can manually scroll to get the full bolus amount.  Please check the  Apple Watch customizations section  if you wish to change that to 100% recommended bolus as the initial autofill.",
            "title": "Apple Watch"
        },
        {
            "location": "/operation/features/bolus/",
            "text": "Bolus\n\u2301\n\n\n\n\n\n\n\n\n\nBolus entries can be made manually through the bolus tool (double orange triangles) in the toolbar, either as part of a meal bolus or as a correction for a high BG.\n\n\nMeal Bolus\n\u2301\n\n\nLoop has a Bolus Wizard, similar to a pump\u2019s bolus wizard.  After a carb entry is made, Loop will provide a bolus screen with a recommended bolus amount.  If you want to deliver the total amount of the recommended bolus, simply tap on the recommended amount of units and the bolus delivery line will automatically be filled-in with the same units.  If you want to give fewer units than the recommended amount, you can manually enter the desired amount to be delivered.   \n\n\nThe Bolus Wizard will not offer a recommended bolus if your BG is below, or predicted to go below, your specified Minimum BG Guard.  A screen will appear letting you know the reason no bolus is being recommended as well as the status of your active COB and IOB.  You can choose to override that warning and give a bolus, or treat the low BG and come back to the bolus tool when your BG has recovered.\n\n\n\n\n\n\n\n\n\nCorrection Bolus\n\u2301\n\n\nOccasionally, a recommended bolus will be offered in the bolus screen unrelated to a recent carb entry.  In those cases, Loop is calculating that it will not be able to stay in target range through the use of max temp basals alone and is offering a \u201ccorrection bolus\u201d.  Correction boluses will not be delivered automatically by Loop, they must be delivered by the user.  Loop will also not give an alert when a correction bolus is being offered, the bolus entry tool must be clicked to check for one.  In a well-run loop with decent carb counting, correction boluses should be infrequently needed.\n\n\nPart of Loop's predictions for future BG changes include a component called BG momentum. Loop looks at the previous three BG readings and calculates a best-fit-straight-line for those three points. In other words, it tries to draw a future trend line using the last three BG data points. Loop extends that line 30 minutes into the future and gives a fair amount of weight to that component of the BG prediction. In instances of rapidly changing BGs, BG momentum may overestimate the rise/fall of BG. Therefore, please be cautious giving corrective boluses using Loop recommendations during times of rapid change.\n\n\nBolus Failure Notifications\n\u2301\n\n\nOn occasion, you will receive notification that a bolus may have failed. In some of these cases, the bolus actually will begin delivery. Therefore, you should always check the pump screen to verify the bolus status before attempting to redeliver a failed bolus.\n\n\nEating Soon\n\u2301\n\n\nYou can modify your Workout Target range to help prebolus for meals.  If you set your Workout Target to 80 mg/dl - 80 mg/dl for an hour before a meal, this will help Loop to deliver additional insulin prior to the meal, and help control post-prandial BGs.  The Loop will account for the amount of insulin it has prebolused when it offers the recommended bolus for the meal.\n\n\nBolus Strategies\n\u2301\n\n\nUnfortunately, Loop cannot enact temp basals while the pump is delivering a square wave or dual wave bolus.  Therefore, we recommend that you find alternate bolusing strategies for situation where you would've previously used those extended bolusing techniques.\n\n\nWhile you adapt to new bolusing techniques, it is important to monitor closely to see what works for you.  It will take some trial and error to get it right.  In particular, pay close attention to what you enter for the carb absorption time for the food.  If you are used to using a square wave or extended bolus, then it is for food that takes a longer than normal period of time to digest so adjust accordingly. \n\n\nMany Loop users use a combination of (1) splitting individual boluses and/or (2) setting carbs in the future before a slower, larger carb meal to help control BG levels that would otherwise rise without an extended bolus.\n\n\nUsing the \nGlucodyn\n model can help you simulate new bolusing strategies.  Glucodyn allows you to simulate your post-prandial BGs based on your particular ISF, carb ratio, and carbs.  You can simulate split boluses and watch their impact on simulated BG responses.  The underlying math of the Glucodyn model was the basis of Loop's insulin/carb calculations in early Loop versions.  The math has changed since then, however the model still provides a useful visualization about the interactions between DIA, carb absorption times and insulin dosing.",
            "title": "Bolus"
        },
        {
            "location": "/operation/features/bolus/#bolus",
            "text": "Bolus entries can be made manually through the bolus tool (double orange triangles) in the toolbar, either as part of a meal bolus or as a correction for a high BG.",
            "title": "Bolus"
        },
        {
            "location": "/operation/features/bolus/#meal-bolus",
            "text": "Loop has a Bolus Wizard, similar to a pump\u2019s bolus wizard.  After a carb entry is made, Loop will provide a bolus screen with a recommended bolus amount.  If you want to deliver the total amount of the recommended bolus, simply tap on the recommended amount of units and the bolus delivery line will automatically be filled-in with the same units.  If you want to give fewer units than the recommended amount, you can manually enter the desired amount to be delivered.     The Bolus Wizard will not offer a recommended bolus if your BG is below, or predicted to go below, your specified Minimum BG Guard.  A screen will appear letting you know the reason no bolus is being recommended as well as the status of your active COB and IOB.  You can choose to override that warning and give a bolus, or treat the low BG and come back to the bolus tool when your BG has recovered.",
            "title": "Meal Bolus"
        },
        {
            "location": "/operation/features/bolus/#correction-bolus",
            "text": "Occasionally, a recommended bolus will be offered in the bolus screen unrelated to a recent carb entry.  In those cases, Loop is calculating that it will not be able to stay in target range through the use of max temp basals alone and is offering a \u201ccorrection bolus\u201d.  Correction boluses will not be delivered automatically by Loop, they must be delivered by the user.  Loop will also not give an alert when a correction bolus is being offered, the bolus entry tool must be clicked to check for one.  In a well-run loop with decent carb counting, correction boluses should be infrequently needed.  Part of Loop's predictions for future BG changes include a component called BG momentum. Loop looks at the previous three BG readings and calculates a best-fit-straight-line for those three points. In other words, it tries to draw a future trend line using the last three BG data points. Loop extends that line 30 minutes into the future and gives a fair amount of weight to that component of the BG prediction. In instances of rapidly changing BGs, BG momentum may overestimate the rise/fall of BG. Therefore, please be cautious giving corrective boluses using Loop recommendations during times of rapid change.",
            "title": "Correction Bolus"
        },
        {
            "location": "/operation/features/bolus/#bolus-failure-notifications",
            "text": "On occasion, you will receive notification that a bolus may have failed. In some of these cases, the bolus actually will begin delivery. Therefore, you should always check the pump screen to verify the bolus status before attempting to redeliver a failed bolus.",
            "title": "Bolus Failure Notifications"
        },
        {
            "location": "/operation/features/bolus/#eating-soon",
            "text": "You can modify your Workout Target range to help prebolus for meals.  If you set your Workout Target to 80 mg/dl - 80 mg/dl for an hour before a meal, this will help Loop to deliver additional insulin prior to the meal, and help control post-prandial BGs.  The Loop will account for the amount of insulin it has prebolused when it offers the recommended bolus for the meal.",
            "title": "Eating Soon"
        },
        {
            "location": "/operation/features/bolus/#bolus-strategies",
            "text": "Unfortunately, Loop cannot enact temp basals while the pump is delivering a square wave or dual wave bolus.  Therefore, we recommend that you find alternate bolusing strategies for situation where you would've previously used those extended bolusing techniques.  While you adapt to new bolusing techniques, it is important to monitor closely to see what works for you.  It will take some trial and error to get it right.  In particular, pay close attention to what you enter for the carb absorption time for the food.  If you are used to using a square wave or extended bolus, then it is for food that takes a longer than normal period of time to digest so adjust accordingly.   Many Loop users use a combination of (1) splitting individual boluses and/or (2) setting carbs in the future before a slower, larger carb meal to help control BG levels that would otherwise rise without an extended bolus.  Using the  Glucodyn  model can help you simulate new bolusing strategies.  Glucodyn allows you to simulate your post-prandial BGs based on your particular ISF, carb ratio, and carbs.  You can simulate split boluses and watch their impact on simulated BG responses.  The underlying math of the Glucodyn model was the basis of Loop's insulin/carb calculations in early Loop versions.  The math has changed since then, however the model still provides a useful visualization about the interactions between DIA, carb absorption times and insulin dosing.",
            "title": "Bolus Strategies"
        },
        {
            "location": "/operation/features/carbs/",
            "text": "Carb Entry\n\u2301\n\n\n\n\n\n\n\n\n\nNew Carbs\n\u2301\n\n\n\n\n\n\n\n\n\nNew carb entries can be made by using the carb tool (green fork) in the toolbar at the bottom of the status screen.  Simply enter the number of carbs to be eaten in the \namount consumed\n line.  By default, the carb absorption time for a new carb entry will correspond to the taco icon.  If you haven't made any customizations to this during your Loop build, then the default carb absorption time will display as 3 hours.  The default time entry is for the current time and date.  \n\n\nYou do not have to enter all carbs for a meal at the same absoption or eating time.  If you want to enter some of the meal's carbs as faster, and some slower, you can log the meal over several individual carb entries.\n\n\nPressing the \nSave\n button in the top right corner will save the carbs into the Loop app and bring up the bolus wizard (if you are above your Minimum BG guard).\n\n\nCarb Absorption Time\n\u2301\n\n\n\n\n\n\n\n\n\nThese default carb absorption times are average representations for high, medium, and low glycemic index foods.  Loop app has been updated in v1.4.0 to incorporate dynamic carb absorption.  Previous Loop versions were based on a curve that assumed the rate of carb absorption would start out slow, increase to a mid-point, and then taper off.  However, in the real world, carb absorption is quite variable.  Dynamic carb absorption model is able to model some of this variability and allow Loop to respond more reasonably when actual carb absorption is not matching well with the selected carb absorption time for a meal.  In short, while entering a carb absorption time is still part of recording meals in Loop, it is much less critical to get it right.  Now your entry serves more as a guideline, than a rule, for Loop to model carb absorption. \n\n\nFor a more detailed explanation of the new dynamic carb absorption model, please read about it \nhere\n.\n\n\nTo select your carb entry's absorption time, you can either click on the default food emojis or manually enter carb absoprtion time by selecting the \nabsorption time\n line in the carb entry tool.  \n\n\nA new feature of Loop v1.4.0 is the plate emoji, found to the right of the pizza emoji.  If you select the plate icon, you can use new food emojis and add text to your \nfood type\n.  Updating and deploying your Nightscout cgm-remote-monitor repository to the latest dev branch will allow those entries to be displayed on your graph.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPrebolus\n\u2301\n\n\nYou can let Loop know you are going to prebolus a meal by adjusting the time of the carb entry on the \u201cdate\u201d line of the carb entry.  If you are prebolusing by 20 minutes, simply add 20 minutes to the carb entry time.  \n\n\nEdit Carbs\n\u2301\n\n\n\n\n\n\n\n\n\nClicking on the Carbohydrate chart in the Loop's main status screen will open the carb entry history and previous entries can be modified or deleted through this screen.  If you need to change a prebolus time, add carbs, adjust carb absorption times (even mid-meal), just go into that edit screen and tap on the carb entry you'd like to edit.  Pretty straight-forward.\n\n\nThird Party Apps\n\u2301\n\n\nIf you use a 3rd party app, such as My Fitness Pal, to enter and track carbs and that app also stores the carb values in HealthKit, Loop will read those values from Apple HealthKit and display and use them in calculating temp basal rates. Entries from 3rd party apps can not be removed from within Loop.  You will have to edit them in the third party app, or from the Health app. Because of this potential for confusion, it is recommended to turn off Loop's ability to read other apps' carbohydrate data from HealthKit. You are asked if you want to enable this when Loop is first installed. After installation, you can also go to the Settings App -> Privacy -> Health -> Loop and turn off \nRead Data for Carbohydrates\n.\n\n\nAvoid Double Carb Entries\n\u2301\n\n\nWhen you press \nSave\n for a carb entry, Loop will consider that carb entry saved and use it for calculating temp basals and recommended boluses.  Be cautious about repeated attempts to enter the same meal...Loop will continue to save the carb entries UNLESS you push cancel.  Simply not bolusing for the meal does not cancel the carb entry.",
            "title": "Carb Entries"
        },
        {
            "location": "/operation/features/carbs/#carb-entry",
            "text": "",
            "title": "Carb Entry"
        },
        {
            "location": "/operation/features/carbs/#new-carbs",
            "text": "New carb entries can be made by using the carb tool (green fork) in the toolbar at the bottom of the status screen.  Simply enter the number of carbs to be eaten in the  amount consumed  line.  By default, the carb absorption time for a new carb entry will correspond to the taco icon.  If you haven't made any customizations to this during your Loop build, then the default carb absorption time will display as 3 hours.  The default time entry is for the current time and date.    You do not have to enter all carbs for a meal at the same absoption or eating time.  If you want to enter some of the meal's carbs as faster, and some slower, you can log the meal over several individual carb entries.  Pressing the  Save  button in the top right corner will save the carbs into the Loop app and bring up the bolus wizard (if you are above your Minimum BG guard).",
            "title": "New Carbs"
        },
        {
            "location": "/operation/features/carbs/#carb-absorption-time",
            "text": "These default carb absorption times are average representations for high, medium, and low glycemic index foods.  Loop app has been updated in v1.4.0 to incorporate dynamic carb absorption.  Previous Loop versions were based on a curve that assumed the rate of carb absorption would start out slow, increase to a mid-point, and then taper off.  However, in the real world, carb absorption is quite variable.  Dynamic carb absorption model is able to model some of this variability and allow Loop to respond more reasonably when actual carb absorption is not matching well with the selected carb absorption time for a meal.  In short, while entering a carb absorption time is still part of recording meals in Loop, it is much less critical to get it right.  Now your entry serves more as a guideline, than a rule, for Loop to model carb absorption.   For a more detailed explanation of the new dynamic carb absorption model, please read about it  here .  To select your carb entry's absorption time, you can either click on the default food emojis or manually enter carb absoprtion time by selecting the  absorption time  line in the carb entry tool.    A new feature of Loop v1.4.0 is the plate emoji, found to the right of the pizza emoji.  If you select the plate icon, you can use new food emojis and add text to your  food type .  Updating and deploying your Nightscout cgm-remote-monitor repository to the latest dev branch will allow those entries to be displayed on your graph.",
            "title": "Carb Absorption Time"
        },
        {
            "location": "/operation/features/carbs/#prebolus",
            "text": "You can let Loop know you are going to prebolus a meal by adjusting the time of the carb entry on the \u201cdate\u201d line of the carb entry.  If you are prebolusing by 20 minutes, simply add 20 minutes to the carb entry time.",
            "title": "Prebolus"
        },
        {
            "location": "/operation/features/carbs/#edit-carbs",
            "text": "Clicking on the Carbohydrate chart in the Loop's main status screen will open the carb entry history and previous entries can be modified or deleted through this screen.  If you need to change a prebolus time, add carbs, adjust carb absorption times (even mid-meal), just go into that edit screen and tap on the carb entry you'd like to edit.  Pretty straight-forward.",
            "title": "Edit Carbs"
        },
        {
            "location": "/operation/features/carbs/#third-party-apps",
            "text": "If you use a 3rd party app, such as My Fitness Pal, to enter and track carbs and that app also stores the carb values in HealthKit, Loop will read those values from Apple HealthKit and display and use them in calculating temp basal rates. Entries from 3rd party apps can not be removed from within Loop.  You will have to edit them in the third party app, or from the Health app. Because of this potential for confusion, it is recommended to turn off Loop's ability to read other apps' carbohydrate data from HealthKit. You are asked if you want to enable this when Loop is first installed. After installation, you can also go to the Settings App -> Privacy -> Health -> Loop and turn off  Read Data for Carbohydrates .",
            "title": "Third Party Apps"
        },
        {
            "location": "/operation/features/carbs/#avoid-double-carb-entries",
            "text": "When you press  Save  for a carb entry, Loop will consider that carb entry saved and use it for calculating temp basals and recommended boluses.  Be cautious about repeated attempts to enter the same meal...Loop will continue to save the carb entries UNLESS you push cancel.  Simply not bolusing for the meal does not cancel the carb entry.",
            "title": "Avoid Double Carb Entries"
        },
        {
            "location": "/operation/features/healthapp/",
            "text": "Health App\n\u2301\n\n\nLoop app uses the iPhone's Health app to store BGs, insulin, and carbohydrate data.  Insulin Data is a new feature with iOS 11.  You can check your Health App settings for Loop by opening the Health App, clicking on Sources at the bottom bar, and then clicking on the Loop app.\n\n\n\n\n\n\n\n\n\nSummaries of your carbohydrates, insulin, and BG results can be found by clicking on the Health Data at the bottom bar, and then selecting either the large Nutrition box (for carbohydrates) or smaller Results line (for insulin deliveries and BG results).\n\n\n\n\n\n\n\n\n\nIf you toggle on the \"add to favorites\" slider like the carbohydrates view in the screenshot above, the data from those categories will be added to your Today view for easy quick reference and access.",
            "title": "Health App"
        },
        {
            "location": "/operation/features/healthapp/#health-app",
            "text": "Loop app uses the iPhone's Health app to store BGs, insulin, and carbohydrate data.  Insulin Data is a new feature with iOS 11.  You can check your Health App settings for Loop by opening the Health App, clicking on Sources at the bottom bar, and then clicking on the Loop app.     Summaries of your carbohydrates, insulin, and BG results can be found by clicking on the Health Data at the bottom bar, and then selecting either the large Nutrition box (for carbohydrates) or smaller Results line (for insulin deliveries and BG results).     If you toggle on the \"add to favorites\" slider like the carbohydrates view in the screenshot above, the data from those categories will be added to your Today view for easy quick reference and access.",
            "title": "Health App"
        },
        {
            "location": "/operation/features/widget/",
            "text": "iPhone Widget\n\u2301\n\n\nThe Loop app will automatically build a widget that will be available on your iPhone.  The widget is available in the Today view of your iPhone.  Swipe right on your iPhone homescreen and your widgets will be available.  The Loop widget maybe at the bottom of your widget list.  Scroll down to the bottom of the screen and press the \nedit\n button.  That opens an \"Add Widgets\" screen.  If you hold and drag the three horizontal lines on the Loop widget row, you can drag it up to the order you'd like it to appear on your widget list.",
            "title": "iPhone widget"
        },
        {
            "location": "/operation/features/widget/#iphone-widget",
            "text": "The Loop app will automatically build a widget that will be available on your iPhone.  The widget is available in the Today view of your iPhone.  Swipe right on your iPhone homescreen and your widgets will be available.  The Loop widget maybe at the bottom of your widget list.  Scroll down to the bottom of the screen and press the  edit  button.  That opens an \"Add Widgets\" screen.  If you hold and drag the three horizontal lines on the Loop widget row, you can drag it up to the order you'd like it to appear on your widget list.",
            "title": "iPhone Widget"
        },
        {
            "location": "/operation/features/notifications/",
            "text": "Notifications in Loop\n\u2301\n\n\n\n\n\n\n\n\n\nLoop provides the following local notifications on the Loop iPhone:\n\n\n\n\n\n\nLoop failures:  At 20, 40, 60, and 120 minutes, there is a Loop Failure notification. \n\n\n\n\n\n\nLow Reservoir:  At 20% and 10% remaining reservoir volume, there is a Low Reservoir notification.\n\n\n\n\n\n\nEmpty Reservoir:  Loop will notify when reservoir is empty.\n\n\n\n\n\n\nLow Battery: Loop will notify when battery levels have approximately 8-10 hours of battery life remaining.\n\n\n\n\n\n\nBolus failures:  If Loop detects that a bolus was not able to be delivered, it will provide a notification.  Bolus failures are usually due to stale pump data.  Try fetching recent history from the RileyLink menu to update pump data.  Loop will also notify of partial bolus deliveries.\n\n\n\n\n\n\nLoop does not have remote notification to other devices.  You can read the Remote Notifications section in the Nightscout area of these docs for information about how you can set them up.",
            "title": "Loop Notifications"
        },
        {
            "location": "/operation/features/notifications/#notifications-in-loop",
            "text": "Loop provides the following local notifications on the Loop iPhone:    Loop failures:  At 20, 40, 60, and 120 minutes, there is a Loop Failure notification.     Low Reservoir:  At 20% and 10% remaining reservoir volume, there is a Low Reservoir notification.    Empty Reservoir:  Loop will notify when reservoir is empty.    Low Battery: Loop will notify when battery levels have approximately 8-10 hours of battery life remaining.    Bolus failures:  If Loop detects that a bolus was not able to be delivered, it will provide a notification.  Bolus failures are usually due to stale pump data.  Try fetching recent history from the RileyLink menu to update pump data.  Loop will also notify of partial bolus deliveries.    Loop does not have remote notification to other devices.  You can read the Remote Notifications section in the Nightscout area of these docs for information about how you can set them up.",
            "title": "Notifications in Loop"
        },
        {
            "location": "/operation/features/workout/",
            "text": "Workout mode\n\u2301\n\n\n\n\n\n\n\n\n\nWorkout mode enables an alternate BG target range from what would normally be scheduled at the time. The alternate target can be enabled for 1 hour, 2 hours, or indefinitely. If you want more options for duration, you can customize them during your Loop build.\n\n\nSome people use Workout mode to set temporarily higher targets ahead of exercise that would normally cause BG to drop.  This should give the user less chance of going low during exercise.\n\n\nAnother use for temporary targets is to prebolus for a meal by setting lower targets for an hour before a meal is expected.  Loop will use temp basals matched to the temporary lower target, and then before the meal is entered/bolused, the targets are adjusted back to normal.  This will leave the user with some active IOB going into the meal and help control post-prandial BG spikes.  Loop will account for the IOB when it makes the recommendation for the meal bolus (just remember to have the BG targets set back to normal before entering the meal carbs).\n\n\nFinally, using a lower target for an hour or two (such as 80-80 mg/dl) may help in situations where you are \u201cstuck\u201d on a high BG from some temporary situation such as a bad carb count, slower food absorption, or anxiety from a short-term situation (work meeting, public presentation).",
            "title": "Workout Targets"
        },
        {
            "location": "/operation/features/workout/#workout-mode",
            "text": "Workout mode enables an alternate BG target range from what would normally be scheduled at the time. The alternate target can be enabled for 1 hour, 2 hours, or indefinitely. If you want more options for duration, you can customize them during your Loop build.  Some people use Workout mode to set temporarily higher targets ahead of exercise that would normally cause BG to drop.  This should give the user less chance of going low during exercise.  Another use for temporary targets is to prebolus for a meal by setting lower targets for an hour before a meal is expected.  Loop will use temp basals matched to the temporary lower target, and then before the meal is entered/bolused, the targets are adjusted back to normal.  This will leave the user with some active IOB going into the meal and help control post-prandial BG spikes.  Loop will account for the IOB when it makes the recommendation for the meal bolus (just remember to have the BG targets set back to normal before entering the meal carbs).  Finally, using a lower target for an hour or two (such as 80-80 mg/dl) may help in situations where you are \u201cstuck\u201d on a high BG from some temporary situation such as a bad carb count, slower food absorption, or anxiety from a short-term situation (work meeting, public presentation).",
            "title": "Workout mode"
        },
        {
            "location": "/operation/algorithm/overview/",
            "text": "Overview\n\u2301\n\n\nLoop\u2019s algorithm for adjusting insulin delivery is oriented around making a glucose prediction.  Every five minutes, triggered by new BG data, it generates a new prediction.  Both \nbolus recommendations\n and \ntemporary basal rates\n are set based on this prediction.\n\n\nTerminology\n\u2301\n\n\nThis graph and legend illustrates terms commonly used in discussing Loop's algorithm,\nand shows them in the context of historical and forecasted BG in a style similar to the\nstatus screen of Loop.\n\n\n\n\n\n\nInsulin Action Duration\nA configuration value that provides an estimate of how long insulin stays active after delivery.\n\n\nTarget Range\n\n\nThis is the low and high BG values that Loop will attempt to keep you between.\n\n\nPredicted Glucose\n\n\nLoop makes a prediction of glucose values out for a length of time equal to your Insulin Action Duration.\n\n\nEventual BG\n\n\nThe last value of the prediction.\n\n\nMinimum BG\n\n\nThe lowest glucose value at any point in time within the prediction.\n\n\nMinimum BG Guard\n\n\nA configuration value below which Loop will suspend all insulin delivery.\n\n\nCGM Data\n\n\nActual glucose measurements made by a continuous glucose monitor.\n\n\nInsulin Sensitivity\n\n\nA configuration value that provides an estimate of how much blood glucose will drop given a unit of insulin.",
            "title": "Overview"
        },
        {
            "location": "/operation/algorithm/overview/#overview",
            "text": "Loop\u2019s algorithm for adjusting insulin delivery is oriented around making a glucose prediction.  Every five minutes, triggered by new BG data, it generates a new prediction.  Both  bolus recommendations  and  temporary basal rates  are set based on this prediction.",
            "title": "Overview"
        },
        {
            "location": "/operation/algorithm/overview/#terminology",
            "text": "This graph and legend illustrates terms commonly used in discussing Loop's algorithm,\nand shows them in the context of historical and forecasted BG in a style similar to the\nstatus screen of Loop.    Insulin Action Duration A configuration value that provides an estimate of how long insulin stays active after delivery.  Target Range  This is the low and high BG values that Loop will attempt to keep you between.  Predicted Glucose  Loop makes a prediction of glucose values out for a length of time equal to your Insulin Action Duration.  Eventual BG  The last value of the prediction.  Minimum BG  The lowest glucose value at any point in time within the prediction.  Minimum BG Guard  A configuration value below which Loop will suspend all insulin delivery.  CGM Data  Actual glucose measurements made by a continuous glucose monitor.  Insulin Sensitivity  A configuration value that provides an estimate of how much blood glucose will drop given a unit of insulin.",
            "title": "Terminology"
        },
        {
            "location": "/operation/algorithm/bolus/",
            "text": "Bolus Recommendations\n\u2301\n\n\nLoop also uses the forecast to generate recommendations for bolus amounts. Carbs are not directly used in bolus calculations, but rather indirectly through the forecast. After carbs are entered, the forecast is updated using the carb amounts, and then a recommendation is generated using the forecast.\n\n\nThe forecast used for bolusing is slightly different than the forecast used for adjust temp basals in that positive BG momentum is not included.\n\n\nEventual BG Above Target Range\n\u2301\n\n\n\n\nA bolus recommendation is given if Eventual BG is above Target Range.  The delta between Eventual BG and the top of the Target Range is used, along with your current Insulin Sensitivity to calculate the recommendation.",
            "title": "Bolus Recommendations"
        },
        {
            "location": "/operation/algorithm/bolus/#bolus-recommendations",
            "text": "Loop also uses the forecast to generate recommendations for bolus amounts. Carbs are not directly used in bolus calculations, but rather indirectly through the forecast. After carbs are entered, the forecast is updated using the carb amounts, and then a recommendation is generated using the forecast.  The forecast used for bolusing is slightly different than the forecast used for adjust temp basals in that positive BG momentum is not included.",
            "title": "Bolus Recommendations"
        },
        {
            "location": "/operation/algorithm/bolus/#eventual-bg-above-target-range",
            "text": "A bolus recommendation is given if Eventual BG is above Target Range.  The delta between Eventual BG and the top of the Target Range is used, along with your current Insulin Sensitivity to calculate the recommendation.",
            "title": "Eventual BG Above Target Range"
        },
        {
            "location": "/operation/algorithm/prediction/",
            "text": "Glucose Prediction\n\u2301\n\n\nLoop makes a new glucose prediction every five minutes by computing the effects\nof insulin that has been administered from the pump, and carbohydrate records that\nhave been entered into Loop. Two additional terms, glucose momentum, and optionally\nretrospective correction will also be used.\n\n\nYou can see the individual contributions of these effects by tapping on the\npredicted glucose graph on Loop's status screen.\n\n\nThis section needs to be fleshed out with details of how insulin and carb\neffects are calculated, and how momentum and retrospective correction work. For\nnow, refer to:\n\n\n\n\nCarbStore.getGlucoseEffects()\n\n\nDoseStore.getGlucoseEffects()\n\n\nGlucoseStore.getRecentMomentumEffect()\n\n\nLoopDataManager.updateRetrospectiveGlucoseEffect()",
            "title": "Glucose Prediction"
        },
        {
            "location": "/operation/algorithm/prediction/#glucose-prediction",
            "text": "Loop makes a new glucose prediction every five minutes by computing the effects\nof insulin that has been administered from the pump, and carbohydrate records that\nhave been entered into Loop. Two additional terms, glucose momentum, and optionally\nretrospective correction will also be used.  You can see the individual contributions of these effects by tapping on the\npredicted glucose graph on Loop's status screen.  This section needs to be fleshed out with details of how insulin and carb\neffects are calculated, and how momentum and retrospective correction work. For\nnow, refer to:   CarbStore.getGlucoseEffects()  DoseStore.getGlucoseEffects()  GlucoseStore.getRecentMomentumEffect()  LoopDataManager.updateRetrospectiveGlucoseEffect()",
            "title": "Glucose Prediction"
        },
        {
            "location": "/operation/algorithm/temp_basal/",
            "text": "Temp Basal Adjustments\n\u2301\n\n\nIf blood glucose is predicted to stray outside of the desired target range, Loop will adjust the basal rate temporarily in an attempt to keep actual blood glucose in range.  To illustrate how it does this, we\u2019ll go through a few examples.\n\n\nEventual BG Above Target Range\n\u2301\n\n\n\n\nWhen eventual BG is predicted to go above the current target range, Loop will calculate a delta from eventual bg to the midpoint of the target range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate above your currently scheduled basal rate that would deliver, over 30 minutes, enough insulin to bring glucose levels back into range, capped at the max basal rate.\n\n\nEventual BG Below Target Range\n\u2301\n\n\n\n\nWhen eventual BG is predicted to go below the current target range, Loop will calculate a delta from eventual bg to the midpoint of the target range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate below your currently scheduled basal rate that would reduce insulin delivery, over 30 minutes, enough to bring glucose levels back into range.  It will reduce delivery to zero if needed.\n\n\nTemporary Excursion Below Range\n\u2301\n\n\n\n\nIf the prediction has a temporary excursion below range, but Eventual BG is in range, Loop will revert to using your normal basal schedule, as long as Minimum BG is above the guard.\n\n\nMinimum BG Below Minimum BG Guard\n\u2301\n\n\n\n\nIf Minimum BG drops below Minimum BG Guard, Loop will zero temp your pump regardless of where Eventual BG is.",
            "title": "Temp Basal Adjustments"
        },
        {
            "location": "/operation/algorithm/temp_basal/#temp-basal-adjustments",
            "text": "If blood glucose is predicted to stray outside of the desired target range, Loop will adjust the basal rate temporarily in an attempt to keep actual blood glucose in range.  To illustrate how it does this, we\u2019ll go through a few examples.",
            "title": "Temp Basal Adjustments"
        },
        {
            "location": "/operation/algorithm/temp_basal/#eventual-bg-above-target-range",
            "text": "When eventual BG is predicted to go above the current target range, Loop will calculate a delta from eventual bg to the midpoint of the target range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate above your currently scheduled basal rate that would deliver, over 30 minutes, enough insulin to bring glucose levels back into range, capped at the max basal rate.",
            "title": "Eventual BG Above Target Range"
        },
        {
            "location": "/operation/algorithm/temp_basal/#eventual-bg-below-target-range",
            "text": "When eventual BG is predicted to go below the current target range, Loop will calculate a delta from eventual bg to the midpoint of the target range.  Using the currently scheduled insulin sensitivity factor, loop calculates a temporary basal rate below your currently scheduled basal rate that would reduce insulin delivery, over 30 minutes, enough to bring glucose levels back into range.  It will reduce delivery to zero if needed.",
            "title": "Eventual BG Below Target Range"
        },
        {
            "location": "/operation/algorithm/temp_basal/#temporary-excursion-below-range",
            "text": "If the prediction has a temporary excursion below range, but Eventual BG is in range, Loop will revert to using your normal basal schedule, as long as Minimum BG is above the guard.",
            "title": "Temporary Excursion Below Range"
        },
        {
            "location": "/operation/algorithm/temp_basal/#minimum-bg-below-minimum-bg-guard",
            "text": "If Minimum BG drops below Minimum BG Guard, Loop will zero temp your pump regardless of where Eventual BG is.",
            "title": "Minimum BG Below Minimum BG Guard"
        },
        {
            "location": "/operation/new-version/",
            "text": "Loop v1.5 Features\n\u2301\n\n\nThis is an experimental new page in the docs.  Many people updating are not reading through the docs when they update their Loops, and therefore missing many of the new features (and requirements)...so we are adding a page to try to encourage docs use when updating.\n\n\nAs always though, the \nGitHub page\n still has great release notes about the features and changes since the previous Loop v1.4  (Note: the first notes about watchOS 4 update appears to be incorrect.  And carthage does need some attention as outlined below)\n\n\nBuilding and OS updates\n\u2301\n\n\nIf you are using iOS 11, you will need to update your Apple watch to watchOS 4 for Loop v15.  If you don't do that ahead of building Loop v1.5, your Apple watch will not have Loop available.\n\n\nLoop v1.5 will also required an update to macOS 10.12.6 and Xcode 9.  Because of those updates, some of the old methods of installation (specifically carthage) have caused some build issues in Xcode.  If you originally installed carthage the old way (through carthage.pkg download..like 99% of the people have), you will need to install homebrew now and use two commands in Terminal app prior to building your Loop v1.5.  If you aren't sure how you installed carthage originally...don't fret...it won't hurt anything to run these commands regardless.\n\n\nOpen your Terminal app found in the Applications>>Utilities folder and then enter \n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n  Confirm the homebrew installation by pressing enter, and then typing in your computer password.  When the installation finishes, use the command \nbrew link --overwrite carthage\n.  After those two steps, you can close out Terminal app, return to Xcode and finish the rest of your installation just as always.  If you fail to do these steps, you will likely see this error message when you build.\n\n\n\n\n\n\n\n\n\nOnce you update to Xcode 9, be aware that old versions of Loop will no longer build successfully.\n\n\nLoop Settings\n\u2301\n\n\nThere are name changes to a couple old settings, and a new setting has been added.\n\n\n\n\n\n\n\n\n\n\n\n\n\nCorrection Range\n\u2301\n\n\n\n\nCorrection Range is the new name for what used to be called BG target range.  Reason being...correction range is a little more correct as the phrase represents the targets Loop is trying to correct you too...not necessarily what your ideal BG target range may be.  For example, you may keep a correction target of 100-100 for Loop to aim to, but use a desired BG target range of 90-150 when discussing things with your endo about \"time in range\".  Correction range is just a little more accurate about how the values are used.\n\n\n\n\nSuspend Threshold\n\u2301\n\n\n\n\nSuspend Threshold is the new term for the old Minimum BG Guard.  The name was changed to help people realize that this value is also used in determining when Loop will set zero temp basals (aka suspend basals) as well as its function in bolusing recommendations.  The description below the setting has been updated to help with that understanding.\n\n\n\n\nInsulin Model\n\u2301\n\n\n\n\nThis section is brand new to Loop v1.5.  Loop still has the option for the old model (Walsh curve), as well as three new models.\n\n\nYou can read up on the new curves \nhere\n.  There is also a new customization section for the curves \nhere\n.\n\n\nThese new models are quite a bit different than the Walsh model.  I recommend watching the bolusing recommendations and how meals are behaving with your curve selection.  Because the timing of the peak activity has changed, this will impact how the Loop recommends boluses in some instances.  Overall, most users are finding that the changes have resulted in a bit more conservative bolusing recommendations (less insulin), especially for long slow carb meals.  Developers are looking at options to assess and address that.\n\n\nIf you fail to select an insulin model you will see this error \"Missing data: Glucose effects\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nPre-Meal Override Target\n\u2301\n\n\n\n\n\n\n\n\n\n\n\n\nYou will notice a new logo of a plate with utensils next to the carb entry tool, at the bottom of the Loop main screen.  This icon will remain grey until you go into the Correction Targets area and set the \"pre-meal\" target range.  The pre-meal target is designed to be used to as an easy pre-bolus before a meal (similar to the \"eating-soon\" mode discussed in OpenAPS).\n\n\n\n\n\n\n\n\n\n\n\nIf you set your pre-meal target to 80-80 mg/dl for example, Loop will give you an extra push to get you to the lower target number before the meal.  The pre-meal target, when activated by pressing on the icon, will stay active for one hour, until carbs are entered, or until it is manually cancelled...whichever comes first.\n\n\nLoop will adjust any insulin bolus as needed based on the insulin provided during this pre-meal time.\n\n\n\n\nLoop Use\n\u2301\n\n\nLarge Font\n\u2301\n\n\n\n\nUsers that had noticed increased font size setting in their iPhones were not rendering properly (as shown below)...this has been fixed in Loop v1.5\n\n\n\n\n\n\n\n\n\n\n\n\n\nStarting Bolus Indicator\n\u2301\n\n\n\n\nA new status line will appear when Loop is sending a bolus command to the pump.  Just above the Glucose Chart, you will see a \"stating bolus\" indicator.\n\n\n\n\n\n\n\n\n\n\n\n\n\nAutomatic Dexcom Cloud Fetch\n\u2301\n\n\n\n\nWhen local BG readings aren't being pulled by Loop, but are still fine on the Dexcom app, Loop will automatically switch to fetching from the Dexcom Servers to get BG data.  You will notice a small cloud above the BG reading when this occurs.\n\n\nDeleting your transmitter ID for G5 users is no longer a useful troubleshooting step, since this change makes that switch happen automatically now.\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsulin Delivery in Health App\n\u2301\n\n\n\n\nNew to iOS 11 users, the Apple Health app will now track insulin delivery data.  Loop integrates with that feature.  A new docs page for Health app has been added too.  You can find more about that \nhere",
            "title": "New Version Info"
        },
        {
            "location": "/operation/new-version/#loop-v15-features",
            "text": "This is an experimental new page in the docs.  Many people updating are not reading through the docs when they update their Loops, and therefore missing many of the new features (and requirements)...so we are adding a page to try to encourage docs use when updating.  As always though, the  GitHub page  still has great release notes about the features and changes since the previous Loop v1.4  (Note: the first notes about watchOS 4 update appears to be incorrect.  And carthage does need some attention as outlined below)",
            "title": "Loop v1.5 Features"
        },
        {
            "location": "/operation/new-version/#building-and-os-updates",
            "text": "If you are using iOS 11, you will need to update your Apple watch to watchOS 4 for Loop v15.  If you don't do that ahead of building Loop v1.5, your Apple watch will not have Loop available.  Loop v1.5 will also required an update to macOS 10.12.6 and Xcode 9.  Because of those updates, some of the old methods of installation (specifically carthage) have caused some build issues in Xcode.  If you originally installed carthage the old way (through carthage.pkg download..like 99% of the people have), you will need to install homebrew now and use two commands in Terminal app prior to building your Loop v1.5.  If you aren't sure how you installed carthage originally...don't fret...it won't hurt anything to run these commands regardless.  Open your Terminal app found in the Applications>>Utilities folder and then enter  /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"   Confirm the homebrew installation by pressing enter, and then typing in your computer password.  When the installation finishes, use the command  brew link --overwrite carthage .  After those two steps, you can close out Terminal app, return to Xcode and finish the rest of your installation just as always.  If you fail to do these steps, you will likely see this error message when you build.     Once you update to Xcode 9, be aware that old versions of Loop will no longer build successfully.",
            "title": "Building and OS updates"
        },
        {
            "location": "/operation/new-version/#loop-settings",
            "text": "There are name changes to a couple old settings, and a new setting has been added.",
            "title": "Loop Settings"
        },
        {
            "location": "/operation/new-version/#correction-range",
            "text": "Correction Range is the new name for what used to be called BG target range.  Reason being...correction range is a little more correct as the phrase represents the targets Loop is trying to correct you too...not necessarily what your ideal BG target range may be.  For example, you may keep a correction target of 100-100 for Loop to aim to, but use a desired BG target range of 90-150 when discussing things with your endo about \"time in range\".  Correction range is just a little more accurate about how the values are used.",
            "title": "Correction Range"
        },
        {
            "location": "/operation/new-version/#suspend-threshold",
            "text": "Suspend Threshold is the new term for the old Minimum BG Guard.  The name was changed to help people realize that this value is also used in determining when Loop will set zero temp basals (aka suspend basals) as well as its function in bolusing recommendations.  The description below the setting has been updated to help with that understanding.",
            "title": "Suspend Threshold"
        },
        {
            "location": "/operation/new-version/#insulin-model",
            "text": "This section is brand new to Loop v1.5.  Loop still has the option for the old model (Walsh curve), as well as three new models.  You can read up on the new curves  here .  There is also a new customization section for the curves  here .  These new models are quite a bit different than the Walsh model.  I recommend watching the bolusing recommendations and how meals are behaving with your curve selection.  Because the timing of the peak activity has changed, this will impact how the Loop recommends boluses in some instances.  Overall, most users are finding that the changes have resulted in a bit more conservative bolusing recommendations (less insulin), especially for long slow carb meals.  Developers are looking at options to assess and address that.  If you fail to select an insulin model you will see this error \"Missing data: Glucose effects\"",
            "title": "Insulin Model"
        },
        {
            "location": "/operation/new-version/#pre-meal-override-target",
            "text": "You will notice a new logo of a plate with utensils next to the carb entry tool, at the bottom of the Loop main screen.  This icon will remain grey until you go into the Correction Targets area and set the \"pre-meal\" target range.  The pre-meal target is designed to be used to as an easy pre-bolus before a meal (similar to the \"eating-soon\" mode discussed in OpenAPS).      If you set your pre-meal target to 80-80 mg/dl for example, Loop will give you an extra push to get you to the lower target number before the meal.  The pre-meal target, when activated by pressing on the icon, will stay active for one hour, until carbs are entered, or until it is manually cancelled...whichever comes first.  Loop will adjust any insulin bolus as needed based on the insulin provided during this pre-meal time.",
            "title": "Pre-Meal Override Target"
        },
        {
            "location": "/operation/new-version/#loop-use",
            "text": "",
            "title": "Loop Use"
        },
        {
            "location": "/operation/new-version/#large-font",
            "text": "Users that had noticed increased font size setting in their iPhones were not rendering properly (as shown below)...this has been fixed in Loop v1.5",
            "title": "Large Font"
        },
        {
            "location": "/operation/new-version/#starting-bolus-indicator",
            "text": "A new status line will appear when Loop is sending a bolus command to the pump.  Just above the Glucose Chart, you will see a \"stating bolus\" indicator.",
            "title": "Starting Bolus Indicator"
        },
        {
            "location": "/operation/new-version/#automatic-dexcom-cloud-fetch",
            "text": "When local BG readings aren't being pulled by Loop, but are still fine on the Dexcom app, Loop will automatically switch to fetching from the Dexcom Servers to get BG data.  You will notice a small cloud above the BG reading when this occurs.  Deleting your transmitter ID for G5 users is no longer a useful troubleshooting step, since this change makes that switch happen automatically now.",
            "title": "Automatic Dexcom Cloud Fetch"
        },
        {
            "location": "/operation/new-version/#insulin-delivery-in-health-app",
            "text": "New to iOS 11 users, the Apple Health app will now track insulin delivery data.  Loop integrates with that feature.  A new docs page for Health app has been added too.  You can find more about that  here",
            "title": "Insulin Delivery in Health App"
        },
        {
            "location": "/troubleshooting/overview/",
            "text": "Troubleshooting\n\u2301\n\n\nAfter you have been using Loop for awhile, there's a potential that you will run across a behavior or issue that you wonder if it is normal or intended.  When that happens, there's a few things that we'd recommend doing to resolve the issue.\n\n\nGather information\n\u2301\n\n\nCheck the Docs\n\u2301\n\n\nThe Loop docs are updated regularly.  If you built your Loop app awhile ago, chances are good that more information has been upated and changed since you first read them.  Please can the topics and look for a section that may be applicable.  For example, if your Nightscout isn't working, try looking at the docs there.  A good read of ALL the pages at the beginning of using Loop is encouraged.  Many FAQs from new Loop users are covered in the docs.\n\n\nScreenshots\n\u2301\n\n\nTake a screenshot of your Loop main display screen\n, or other screens (such as Tuning results of RileyLink) that may help troubleshooters better understand your issue.  A lot of times a picture is worth a thousand words.  Being able to see recent Loop basal adjustments, predicted BG curve, and carb entries really helps fill in the full story of the current Loop status.  If you didn't manage to get a screenshot when the issue was happening, you can also go to Nightscout and scroll back over the previous 48 hours to obtain much of the same information.  Try to capture a Nightscout screen from the time period in question.\n\n\nIssue Report\n\u2301\n\n\nUnder the Loop app settings, there is a selection called \nIssue Report\n.  Within the Issue Report is important information about your Loop's actions and status that can be very useful for troubleshooters...particularly with unexplained behaviors.  The upper right corner of the Issue Report includes a button so that you can email the Issue Report to yourself (or others).  If you're seeing something unusual in your Loop, capture an Issue Report while it is happening and save it.  A troubleshooter may want to see that information.\n\n\nCheck Resources\n\u2301\n\n\nGitHub Issues\n\u2301\n\n\nCheck the current list of \nGitHub Loop Issues\n for known issues.  Many times other users have noticed the same issue previously and opened an Issue so that more information can be added to help develop a solution.  If you see your same issue has already been reported, please add to the open issue instead of creating a new one.\n\n\n\n\n\n\n\n\n\nGitter and Facebook\n\u2301\n\n\nSearch in \nGitter\n or \nFacebook\n.  Quite possibly someone else has already posted about the same issue and perhaps a resolution has already been provided.  \n\n\nAsk for Help\n\u2301\n\n\nIf you can't find any information in the Loop docs, GitHub Issues, Gitter, or Faceboook...PLEASE post and ask for help.  GitHub Issues list is an EXCELLENT place to post issues of unexpected Loop behavior (that you believe are errant or need improvement).  However, if you are just seeking clarifications on Loop, but don't necessarily expect that there's a problem with the underlying code, then Facebook and Gitter would be a good place.  For example, Gitter and Facebook are great for asking about bolus strategies or exercise target use...those are not really code issues.\n\n\nWhen you post, provide a description along with any screenshots of the issue you are having.  You don't necessarily have to tag any particular person, the community is fairly active in replying to messages.\n\n\nIf you are posting to GitHub issues list, you can label the Issue appropriately too...such as Bug, Enhancement, or Documentation.",
            "title": "Overview"
        },
        {
            "location": "/troubleshooting/overview/#troubleshooting",
            "text": "After you have been using Loop for awhile, there's a potential that you will run across a behavior or issue that you wonder if it is normal or intended.  When that happens, there's a few things that we'd recommend doing to resolve the issue.",
            "title": "Troubleshooting"
        },
        {
            "location": "/troubleshooting/overview/#gather-information",
            "text": "",
            "title": "Gather information"
        },
        {
            "location": "/troubleshooting/overview/#check-the-docs",
            "text": "The Loop docs are updated regularly.  If you built your Loop app awhile ago, chances are good that more information has been upated and changed since you first read them.  Please can the topics and look for a section that may be applicable.  For example, if your Nightscout isn't working, try looking at the docs there.  A good read of ALL the pages at the beginning of using Loop is encouraged.  Many FAQs from new Loop users are covered in the docs.",
            "title": "Check the Docs"
        },
        {
            "location": "/troubleshooting/overview/#screenshots",
            "text": "Take a screenshot of your Loop main display screen , or other screens (such as Tuning results of RileyLink) that may help troubleshooters better understand your issue.  A lot of times a picture is worth a thousand words.  Being able to see recent Loop basal adjustments, predicted BG curve, and carb entries really helps fill in the full story of the current Loop status.  If you didn't manage to get a screenshot when the issue was happening, you can also go to Nightscout and scroll back over the previous 48 hours to obtain much of the same information.  Try to capture a Nightscout screen from the time period in question.",
            "title": "Screenshots"
        },
        {
            "location": "/troubleshooting/overview/#issue-report",
            "text": "Under the Loop app settings, there is a selection called  Issue Report .  Within the Issue Report is important information about your Loop's actions and status that can be very useful for troubleshooters...particularly with unexplained behaviors.  The upper right corner of the Issue Report includes a button so that you can email the Issue Report to yourself (or others).  If you're seeing something unusual in your Loop, capture an Issue Report while it is happening and save it.  A troubleshooter may want to see that information.",
            "title": "Issue Report"
        },
        {
            "location": "/troubleshooting/overview/#check-resources",
            "text": "",
            "title": "Check Resources"
        },
        {
            "location": "/troubleshooting/overview/#github-issues",
            "text": "Check the current list of  GitHub Loop Issues  for known issues.  Many times other users have noticed the same issue previously and opened an Issue so that more information can be added to help develop a solution.  If you see your same issue has already been reported, please add to the open issue instead of creating a new one.",
            "title": "GitHub Issues"
        },
        {
            "location": "/troubleshooting/overview/#gitter-and-facebook",
            "text": "Search in  Gitter  or  Facebook .  Quite possibly someone else has already posted about the same issue and perhaps a resolution has already been provided.",
            "title": "Gitter and Facebook"
        },
        {
            "location": "/troubleshooting/overview/#ask-for-help",
            "text": "If you can't find any information in the Loop docs, GitHub Issues, Gitter, or Faceboook...PLEASE post and ask for help.  GitHub Issues list is an EXCELLENT place to post issues of unexpected Loop behavior (that you believe are errant or need improvement).  However, if you are just seeking clarifications on Loop, but don't necessarily expect that there's a problem with the underlying code, then Facebook and Gitter would be a good place.  For example, Gitter and Facebook are great for asking about bolus strategies or exercise target use...those are not really code issues.  When you post, provide a description along with any screenshots of the issue you are having.  You don't necessarily have to tag any particular person, the community is fairly active in replying to messages.  If you are posting to GitHub issues list, you can label the Issue appropriately too...such as Bug, Enhancement, or Documentation.",
            "title": "Ask for Help"
        },
        {
            "location": "/troubleshooting/mlab_cleanup/",
            "text": "mLab Database Maintenance\n\u2301\n\n\nRegardless of whether you are on Azure or Heroku for Nightscout, you are using an mLab database for storing your Loop data.  mLab allows you to store up to 500 MB for free.  When you hit that data cap, your NS will stop working.  Your Share Bridge will not pull data and your site will be \u201cstale\u201d.  \n\n\nThe good news?  Loop can still run just fine until you cleanout and/or compact your mLab database.  The bad news?  You just won\u2019t be able to remotely monitor Loop through NS until you clear up some storage space in mLab.\n\n\nNote there are two areas where the 500 MB data limit can be an issue.  One is called the \nsize\n which is the actual data stored in your database.  The other is called \nsize on disk\n which is the virtual space that your database takes up.  As data is written onto your free database, sometimes it is written inefficiently and virtually \"spreads out\" to take up more room.  Depending on where your issue is, you may need to delete or cleanout data (if \nsize\n is the issue) or you may just need to compact data (if \nsize on disk\n is the issue).\n\n\n\n\n\n\n\n\n\nCleanout mLab\n\u2301\n\n\nThere are two ways to cleanout space and delete data in your mLab database:\n\n\n\n\nmLab direct access\n\n\nNightscout admin tools\n\n\n\n\nmLab Direct Access\n\u2301\n\n\n\n\n\n\nLogin to your mLab database.  \n\n\n\n\n\n\nIf you setup your own Azure site and mLab database, go directly to \nmLab\n and login, or\n\n\n\n\n\n\nIf you setup your own Azure site and mLab database, then setup a Heroku account and pointed back to your old mLab database (i.e., copy and pasted the MONGODB_URI from Azure), go directly to \nmLab\n and login, or\n\n\n\n\n\n\nIf you setup a Heroku site and let Heroku setup an mLab database for you (which is typical for new Heroku sites), you will access mLab through your Heroku account main page.   Login to your Heroku account and click on the mLab logo as shown below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(Users coming directly from a Heroku click will see the screen below.  If you had to login to mLab with a name and password, you will first see a line with your MongoDB database.  Click on your database name to see the screen below with all the collection names.) \n\n\nYour various collections are shown, similar to the screen shot below.  The amount of data each collection is using is listed to the far right of each collection\u2019s line.  I recommend emptying the \u201cloop\u201d collection first and then \"devicestatus\" to free up database storage.  If you need any of the information in the database, you may want to do a selective delete of data. For example, if you are headed into an endocrinologist appointment and want to print out recent Nightscout reports to take with you. Eventually you may need to empty more collections.  It should be awhile though, as the other collections are significantly smaller and will take a long time to fill.\n\n\nClick on a collection\u2019s name to open it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the button that says \u201cDelete all documents in collection\u201d and then confirm the deletion.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can confirm that your cleanout has resolved the problem, by checking that your database size is below 500 MB now.  Click on the \nHome\n link in top left.  Then review the size of the database as shown.\n\n\n\n\n\n\n\n\n\n\n\nNightscout Admin Tools\n\u2301\n\n\nIf you go to your Nightscout site's settings (the three horizontal bars in the upper right of your Nightscout site), you will be able to access your Admin Tools for the site.  These include some useful quick mLab actions, includig deleting documents from the devicestatus collection similar to the action we took in the steps above.  But, it's worth noting that if you have errant future data in your Nightscout site that is causing problems (usually during time changes or overseas travel), you can clean-out future entries through this portal, too.\n\n\n\n\n\n\n\n\n\nCompact mLab\n\u2301\n\n\nYou may get an email from mLab, even after cleaning out enough space in your database, alerting you that your \"file size limit\" may have been exceeded. \n\n\n\n\n\n\n\n\n\nTo begin the compaction process, click on your database name.\n\n\n\n\n\n\n\n\n\nThen click on the \nTools\n tab in the screen that opens.  Click on the \ncommands\n button and then select the \nrepairDatabase\n from the dropdown menu of available commands.  At the bottom of the screen, select the \nRun Command\n button. \n\n\n\n\n\n\n\n\n\nReturn to your home screen and you will be able to verify the \nSize on Disk\n has decreased.",
            "title": "mLab"
        },
        {
            "location": "/troubleshooting/mlab_cleanup/#mlab-database-maintenance",
            "text": "Regardless of whether you are on Azure or Heroku for Nightscout, you are using an mLab database for storing your Loop data.  mLab allows you to store up to 500 MB for free.  When you hit that data cap, your NS will stop working.  Your Share Bridge will not pull data and your site will be \u201cstale\u201d.    The good news?  Loop can still run just fine until you cleanout and/or compact your mLab database.  The bad news?  You just won\u2019t be able to remotely monitor Loop through NS until you clear up some storage space in mLab.  Note there are two areas where the 500 MB data limit can be an issue.  One is called the  size  which is the actual data stored in your database.  The other is called  size on disk  which is the virtual space that your database takes up.  As data is written onto your free database, sometimes it is written inefficiently and virtually \"spreads out\" to take up more room.  Depending on where your issue is, you may need to delete or cleanout data (if  size  is the issue) or you may just need to compact data (if  size on disk  is the issue).",
            "title": "mLab Database Maintenance"
        },
        {
            "location": "/troubleshooting/mlab_cleanup/#cleanout-mlab",
            "text": "There are two ways to cleanout space and delete data in your mLab database:   mLab direct access  Nightscout admin tools",
            "title": "Cleanout mLab"
        },
        {
            "location": "/troubleshooting/mlab_cleanup/#mlab-direct-access",
            "text": "Login to your mLab database.      If you setup your own Azure site and mLab database, go directly to  mLab  and login, or    If you setup your own Azure site and mLab database, then setup a Heroku account and pointed back to your old mLab database (i.e., copy and pasted the MONGODB_URI from Azure), go directly to  mLab  and login, or    If you setup a Heroku site and let Heroku setup an mLab database for you (which is typical for new Heroku sites), you will access mLab through your Heroku account main page.   Login to your Heroku account and click on the mLab logo as shown below.           (Users coming directly from a Heroku click will see the screen below.  If you had to login to mLab with a name and password, you will first see a line with your MongoDB database.  Click on your database name to see the screen below with all the collection names.)   Your various collections are shown, similar to the screen shot below.  The amount of data each collection is using is listed to the far right of each collection\u2019s line.  I recommend emptying the \u201cloop\u201d collection first and then \"devicestatus\" to free up database storage.  If you need any of the information in the database, you may want to do a selective delete of data. For example, if you are headed into an endocrinologist appointment and want to print out recent Nightscout reports to take with you. Eventually you may need to empty more collections.  It should be awhile though, as the other collections are significantly smaller and will take a long time to fill.  Click on a collection\u2019s name to open it.        Click on the button that says \u201cDelete all documents in collection\u201d and then confirm the deletion.       You can confirm that your cleanout has resolved the problem, by checking that your database size is below 500 MB now.  Click on the  Home  link in top left.  Then review the size of the database as shown.",
            "title": "mLab Direct Access"
        },
        {
            "location": "/troubleshooting/mlab_cleanup/#nightscout-admin-tools",
            "text": "If you go to your Nightscout site's settings (the three horizontal bars in the upper right of your Nightscout site), you will be able to access your Admin Tools for the site.  These include some useful quick mLab actions, includig deleting documents from the devicestatus collection similar to the action we took in the steps above.  But, it's worth noting that if you have errant future data in your Nightscout site that is causing problems (usually during time changes or overseas travel), you can clean-out future entries through this portal, too.",
            "title": "Nightscout Admin Tools"
        },
        {
            "location": "/troubleshooting/mlab_cleanup/#compact-mlab",
            "text": "You may get an email from mLab, even after cleaning out enough space in your database, alerting you that your \"file size limit\" may have been exceeded.      To begin the compaction process, click on your database name.     Then click on the  Tools  tab in the screen that opens.  Click on the  commands  button and then select the  repairDatabase  from the dropdown menu of available commands.  At the bottom of the screen, select the  Run Command  button.      Return to your home screen and you will be able to verify the  Size on Disk  has decreased.",
            "title": "Compact mLab"
        },
        {
            "location": "/troubleshooting/priming/",
            "text": "Priming and Site Changes\n\u2301\n\n\nLoop uses event history and reservoir levels to determine how much insulin has actually been delivered through the pump, and correspondingly the Insulin On Board (IOB).  \n\n\nSite Changes\n\u2301\n\n\n\n\nLoop v1.3.2 and newer\n\n\nLoop v1.3.2 and newer will automatically detect prime events and that insulin will not be counted to IOB.  You will need to have your Preferred Data Source set to Event History for the automatic detection of primes to work.  Reservoir Volumes will not detect prime events.\n\n\n\n\nIf you are using a version of Loop older than v1.3.2 (or using Preferred Data Source of Reservoir Volume), you will need to be aware of the following regarding prime events at site changes:\n\n\n\n\n\n\nIf you change sites and increase reservoir volume (i.e., start a new reservoir), don't worry. So long as you are putting in a reservoir that has more insulin than the old one, IOB will be accurate in Loop.  When Loop sees a rewind and an increase in reservoir volume, it will not count any tubing primes as IOB.\n\n\n\n\n\n\nIf you change sites but \ndo NOT increase reservoir volume\n (i.e., you keep existing reservoir going), you will need to go into Loop's reservoir history and delete 30 minutes of continuous reservoir history including the prime event.  By deleting 30 minutes of reservoir history, Loop will use Event History to determine insulin deliveries and IOB. If you cannot get the prime to clear from the IOB, operate in Open Loop mode until the insulin action duration time has passed.  Deleting history is done by:\n\n\n(1)  clicking on the Insulin Delivery Chart  \n\n\n(2)  selecting the Reservoir history screen  \n\n\n(3)  swiping to delete individual reservoir readings  \n\n\n(4)  delete at least 30 minutes of reservoir readings, including the readings that involved priming events\n\n\n\n\n\n\nPrime Menu\n\u2301\n\n\n\n\nWarning\n\n\nWhen you prime tubing on a Medtronic pump, make sure to complete the priming menu commands.\n\n\n\n\nIn other words, finish all the prompts so that you get back to the (nearly blank) normal Medtronic pump screen.  If you don't finish the priming menu, the pump will not begin basal insulin delivery, nor does it alarm.  It is equivalent to the pump being suspended...but you won't be able to see any indication of that in Nightscout as a remotely monitoring parent.  Loop will not detect the prime screen issue and will keep sending temp basal messages...but the pump won't enact them.  On Loop, you could notice it by the active IOB continually going down and then eventually negative IOB, as the basal is not delivered and the reservoir level remains constant.  However, the temp basal graph will still show the bars from the temp basal commands loop has been sending.\n\n\nSo, remember to finish those prime menu screens through to the end.",
            "title": "Priming and Sites"
        },
        {
            "location": "/troubleshooting/priming/#priming-and-site-changes",
            "text": "Loop uses event history and reservoir levels to determine how much insulin has actually been delivered through the pump, and correspondingly the Insulin On Board (IOB).",
            "title": "Priming and Site Changes"
        },
        {
            "location": "/troubleshooting/priming/#site-changes",
            "text": "Loop v1.3.2 and newer  Loop v1.3.2 and newer will automatically detect prime events and that insulin will not be counted to IOB.  You will need to have your Preferred Data Source set to Event History for the automatic detection of primes to work.  Reservoir Volumes will not detect prime events.   If you are using a version of Loop older than v1.3.2 (or using Preferred Data Source of Reservoir Volume), you will need to be aware of the following regarding prime events at site changes:    If you change sites and increase reservoir volume (i.e., start a new reservoir), don't worry. So long as you are putting in a reservoir that has more insulin than the old one, IOB will be accurate in Loop.  When Loop sees a rewind and an increase in reservoir volume, it will not count any tubing primes as IOB.    If you change sites but  do NOT increase reservoir volume  (i.e., you keep existing reservoir going), you will need to go into Loop's reservoir history and delete 30 minutes of continuous reservoir history including the prime event.  By deleting 30 minutes of reservoir history, Loop will use Event History to determine insulin deliveries and IOB. If you cannot get the prime to clear from the IOB, operate in Open Loop mode until the insulin action duration time has passed.  Deleting history is done by:  (1)  clicking on the Insulin Delivery Chart    (2)  selecting the Reservoir history screen    (3)  swiping to delete individual reservoir readings    (4)  delete at least 30 minutes of reservoir readings, including the readings that involved priming events",
            "title": "Site Changes"
        },
        {
            "location": "/troubleshooting/priming/#prime-menu",
            "text": "Warning  When you prime tubing on a Medtronic pump, make sure to complete the priming menu commands.   In other words, finish all the prompts so that you get back to the (nearly blank) normal Medtronic pump screen.  If you don't finish the priming menu, the pump will not begin basal insulin delivery, nor does it alarm.  It is equivalent to the pump being suspended...but you won't be able to see any indication of that in Nightscout as a remotely monitoring parent.  Loop will not detect the prime screen issue and will keep sending temp basal messages...but the pump won't enact them.  On Loop, you could notice it by the active IOB continually going down and then eventually negative IOB, as the basal is not delivered and the reservoir level remains constant.  However, the temp basal graph will still show the bars from the temp basal commands loop has been sending.  So, remember to finish those prime menu screens through to the end.",
            "title": "Prime Menu"
        },
        {
            "location": "/troubleshooting/rileylink/",
            "text": "RileyLink\n\u2301\n\n\nTuning the Radio\n\u2301\n\n\nThe RileyLink communicates with the pump through radio frequency communications.  Numerous factors can influence how well those communications can function...interferences from other devices, temperature, physical blocking, etc.\n\n\nKnowing a little about the strength of the radio communications will help you troubleshoot Loop errors.  When you \nTune Radio Frequency\n in the Riley Link menu, it is testing for the strongest frequency to communicate with the pump.  Usually this frequency is pretty constant, but during temperature changes it may be that the best frequency is not the one currently set.  The tuning results also show which frequency is the strongest.\n\n\nFor example, in the screenshot below, the strength of the radio communications with the pump is shown by the last number of the tune.  Frequencies with tuning results of -99 means NO communications were established at that frequency.  RileyLink will use the strongest frequency tune for its pump communications.  In the screenshot, the best frequency returned a result of \n-37\n at a frequency of \n916.60 MHz\n, so RileyLink will set that \n916.60 MHz\n for its pump communications.\n\n\n\n\n\n\n\n\n\nGenerally, if you have tuning in the -90s, your RileyLink-pump communications will not work.  If you have tuning in the -80s, you may have periodic communication failures.  If your tuning is in the -70s or better, your communications should be pretty stable.  \n\n\nExperiment with your RileyLink by moving it closer and farther away from the pump.  Try putting it on the other side of your body, or put it in a purse.  Test the tuning results in real world situations that you think you'd be encountering, such as where you will have the RileyLink placed during overnight charging. Perform tunes at the various distances and situations.  This will help you understand how far from the pump your RileyLink can get before it will affect Loop performance.  \n\n\nBluetooth\n\u2301\n\n\nRileyLink communicates with your iPhone and Loop app through Bluetooth (BT).  If your iPhone has BT issues, your Loop will have failures.  There have been reports of BT audio devices (such as BT pairings in your car or home audio BT speakers) interfering with the Loop.  If you are finding Loop failures frequently happening at a particular location, you may try to troubleshoot if there are BT problems in the area.\n\n\nYour BT signal strength can be seen in the Loop settings, under the RileyLink menu, on the \nSignal Strength\n line.  As you move closer and further away from your phone, you can watch that number dynamically change. This line is \nnot\n displaying the signal strength of your pump communications discussed above (those are shown in the tuning results screen).\n\n\nLights\n\u2301\n\n\nRileyLink has several lights that you may notice from time to time.  There is no 'power' light.  If you suspect that your RileyLink is not being powered, try turning it off and on using the small sliding switch.  You should see lights in the middle of the board flash when you do this.  If they flash, that means the board has power.\n\n\n\n\n\n\nRed light: Charging light.  The red light will remain on while RileyLink is charging, and it will turn off when charging is complete.  You may notice the red light turn on periodically even after charging is complete...it's just \"topping off\".\n\n\n\n\n\n\nGreen light: Bluetooth connection light.  The green light will remain on while you have BT connection with your iPhone.  If that green light fails to stay on, you should troubleshoot your BT connections.  Try restarting BT on your iPhone and/or turning the RileyLink off/on by its power switch.\n\n\n\n\n\n\nBlue light: Pump communications.  If you have an older firmware on your RileyLink, some of the blue and green lights will flash periodically as it is communicating with the pump.  It's just letting you know that it is busy talking and collecting info.\n\n\n\n\n\n\nCharging\n\u2301\n\n\nThe battery that comes with RileyLink is not likely charged completely when it is shipped, so feel free to charge it up.  You'll need a \nmini-USB cable\n and \n0.5A USB charging power supply\n like your iPhone power supply.  RileyLink takes about 2-4 hours to fully charge (the red light will turn off when fully charged, read note above about red light patterns) and should easily last at least a full day of constant Loop use.  Typically, it can go into the 30-hour range without problem.  Most people charge their RileyLink each night when they are sleeping.  You don't have to worry about leaving the RileyLink plugged in \"too long\" for charging.  It will automatically stop charging the battery when it is fully charged.\n\n\nSince the best practice is to charge your RileyLink overnight while you sleep, and the battery lasts safely over 24 hours, there is no battery level indicator for the RileyLink.  The RileyLink's charge level is not viewable on Nightscout, nor within the Loop app.  If you forget to charge your RileyLink overnight, you can recharge it with a portable USB battery in a pinch.  A \nshort mini-USB cable\n could be a good addition to a small gear bag.\n\n\nRange\n\u2301\n\n\nThe range that your RileyLink will function is \nheavily\n dependent on the environment that you are in. Read the section about Tuning to help determine how far your RileyLink can dependably maintain an adequate signal strength in your particular environment.  Most people wear the RileyLink in a pocket or carry a belt holster during the day.  Typically, RileyLink will need to be closer to the pump than the iPhone.  The radio frequency communications will have a shorter range than the BT communications.\n\n\nLipo Battery\n\u2301\n\n\nIf you ordered your RileyLink preassembled, you should plug in the battery cable.  Please make sure your RileyLink\u2019s battery cable is securely pushed all the way into the socket.  Poor battery cable connection can make the Loop communications fail.\n\n\n\n  \n\n  \nRileyLink with loose battery cable.\n\n\n\n\n\n\n  \n\n  \nRileyLink with properly secured battery cable.\n\n\n\n\n\nKeep your RileyLink and lipo battery protected from damage.  Lipo batteries are unsafe when damaged or punctured, so the case is an important part of safe Looping.  If your battery is damaged in some way, please disconnect it immediately, and dispose of it (they should be recycled). You can order new batteries on the \nGetRileyLink website",
            "title": "RileyLink"
        },
        {
            "location": "/troubleshooting/rileylink/#rileylink",
            "text": "",
            "title": "RileyLink"
        },
        {
            "location": "/troubleshooting/rileylink/#tuning-the-radio",
            "text": "The RileyLink communicates with the pump through radio frequency communications.  Numerous factors can influence how well those communications can function...interferences from other devices, temperature, physical blocking, etc.  Knowing a little about the strength of the radio communications will help you troubleshoot Loop errors.  When you  Tune Radio Frequency  in the Riley Link menu, it is testing for the strongest frequency to communicate with the pump.  Usually this frequency is pretty constant, but during temperature changes it may be that the best frequency is not the one currently set.  The tuning results also show which frequency is the strongest.  For example, in the screenshot below, the strength of the radio communications with the pump is shown by the last number of the tune.  Frequencies with tuning results of -99 means NO communications were established at that frequency.  RileyLink will use the strongest frequency tune for its pump communications.  In the screenshot, the best frequency returned a result of  -37  at a frequency of  916.60 MHz , so RileyLink will set that  916.60 MHz  for its pump communications.     Generally, if you have tuning in the -90s, your RileyLink-pump communications will not work.  If you have tuning in the -80s, you may have periodic communication failures.  If your tuning is in the -70s or better, your communications should be pretty stable.    Experiment with your RileyLink by moving it closer and farther away from the pump.  Try putting it on the other side of your body, or put it in a purse.  Test the tuning results in real world situations that you think you'd be encountering, such as where you will have the RileyLink placed during overnight charging. Perform tunes at the various distances and situations.  This will help you understand how far from the pump your RileyLink can get before it will affect Loop performance.",
            "title": "Tuning the Radio"
        },
        {
            "location": "/troubleshooting/rileylink/#bluetooth",
            "text": "RileyLink communicates with your iPhone and Loop app through Bluetooth (BT).  If your iPhone has BT issues, your Loop will have failures.  There have been reports of BT audio devices (such as BT pairings in your car or home audio BT speakers) interfering with the Loop.  If you are finding Loop failures frequently happening at a particular location, you may try to troubleshoot if there are BT problems in the area.  Your BT signal strength can be seen in the Loop settings, under the RileyLink menu, on the  Signal Strength  line.  As you move closer and further away from your phone, you can watch that number dynamically change. This line is  not  displaying the signal strength of your pump communications discussed above (those are shown in the tuning results screen).",
            "title": "Bluetooth"
        },
        {
            "location": "/troubleshooting/rileylink/#lights",
            "text": "RileyLink has several lights that you may notice from time to time.  There is no 'power' light.  If you suspect that your RileyLink is not being powered, try turning it off and on using the small sliding switch.  You should see lights in the middle of the board flash when you do this.  If they flash, that means the board has power.    Red light: Charging light.  The red light will remain on while RileyLink is charging, and it will turn off when charging is complete.  You may notice the red light turn on periodically even after charging is complete...it's just \"topping off\".    Green light: Bluetooth connection light.  The green light will remain on while you have BT connection with your iPhone.  If that green light fails to stay on, you should troubleshoot your BT connections.  Try restarting BT on your iPhone and/or turning the RileyLink off/on by its power switch.    Blue light: Pump communications.  If you have an older firmware on your RileyLink, some of the blue and green lights will flash periodically as it is communicating with the pump.  It's just letting you know that it is busy talking and collecting info.",
            "title": "Lights"
        },
        {
            "location": "/troubleshooting/rileylink/#charging",
            "text": "The battery that comes with RileyLink is not likely charged completely when it is shipped, so feel free to charge it up.  You'll need a  mini-USB cable  and  0.5A USB charging power supply  like your iPhone power supply.  RileyLink takes about 2-4 hours to fully charge (the red light will turn off when fully charged, read note above about red light patterns) and should easily last at least a full day of constant Loop use.  Typically, it can go into the 30-hour range without problem.  Most people charge their RileyLink each night when they are sleeping.  You don't have to worry about leaving the RileyLink plugged in \"too long\" for charging.  It will automatically stop charging the battery when it is fully charged.  Since the best practice is to charge your RileyLink overnight while you sleep, and the battery lasts safely over 24 hours, there is no battery level indicator for the RileyLink.  The RileyLink's charge level is not viewable on Nightscout, nor within the Loop app.  If you forget to charge your RileyLink overnight, you can recharge it with a portable USB battery in a pinch.  A  short mini-USB cable  could be a good addition to a small gear bag.",
            "title": "Charging"
        },
        {
            "location": "/troubleshooting/rileylink/#range",
            "text": "The range that your RileyLink will function is  heavily  dependent on the environment that you are in. Read the section about Tuning to help determine how far your RileyLink can dependably maintain an adequate signal strength in your particular environment.  Most people wear the RileyLink in a pocket or carry a belt holster during the day.  Typically, RileyLink will need to be closer to the pump than the iPhone.  The radio frequency communications will have a shorter range than the BT communications.",
            "title": "Range"
        },
        {
            "location": "/troubleshooting/rileylink/#lipo-battery",
            "text": "If you ordered your RileyLink preassembled, you should plug in the battery cable.  Please make sure your RileyLink\u2019s battery cable is securely pushed all the way into the socket.  Poor battery cable connection can make the Loop communications fail.  \n   \n   RileyLink with loose battery cable.   \n   \n   RileyLink with properly secured battery cable.   Keep your RileyLink and lipo battery protected from damage.  Lipo batteries are unsafe when damaged or punctured, so the case is an important part of safe Looping.  If your battery is damaged in some way, please disconnect it immediately, and dispose of it (they should be recycled). You can order new batteries on the  GetRileyLink website",
            "title": "Lipo Battery"
        },
        {
            "location": "/troubleshooting/time-change/",
            "text": "Time Changes with Loop\n\u2301\n\n\nLoop is built to fully work across time zone and daylight savings time changes as long as a few basic instructions are followed.\n\n\n\n\nIMPORTANT\n\n\nAlways use RileyLink to change pump time.  If you fail to set the pump time by using the RileyLink, Loop will not function properly.\n\n\n\n\n\n\n\n\n\n\n\niPhone\n\u2301\n\n\nLoop will assume your iPhone's time (UTC, not time zone) is always correct. This theoretically may not be the case if a nearby cell tower is improperly configured (though there are likely resilience mechanisms in iOS to handle this). Automatic time setting can always be disabled in Settings.\n\n\nMinimed Pump and CGM\n\u2301\n\n\nThe Minimed pump doesn't expose a universal clock, instead it exposes the components of a date (YMDHIS). It has no concept of political time zones, and just continues to increment its components on schedule. Therefore, Loop assumes that the pump's date, until changed, remains at a fixed offset from UTC.\n\n\nThat offset is stored by Loop the first time the pump ID is changed, and every time the pump's time is changed from the RileyLink Settings screen.\n\n\nDexcom CGM\n\u2301\n\n\nNo particular input is needed on your part for Loop to work with Dexcom CGM data. All times are UTC.  However, at time changes you may want to manually change your G4 receiver time setting just so the time visually appears correct when you are viewing the screen.\n\n\nTraveling across time zones and daylight savings\n\u2301\n\n\nWhen traveling, there is no urgency to update the pump's time to match the wall-clocks in your geography. Configuration schedules\u2014basal rates, target ranges, carb ratios, and insulin sensitivities\u2014will all remain in the pump's time zone. The app's graphs and status will always display in the time zone of the iPhone, and Loop will understand the difference in offset between the two, highlighting it when attempting to change configuration schedules.\n\n\nWhen you're ready to update the pump's time, simply \nuse the Loop's RileyLink \"Change Pump Time\"\n. This will also shift your configuration schedules to the current time zone.",
            "title": "Time Changes"
        },
        {
            "location": "/troubleshooting/time-change/#time-changes-with-loop",
            "text": "Loop is built to fully work across time zone and daylight savings time changes as long as a few basic instructions are followed.   IMPORTANT  Always use RileyLink to change pump time.  If you fail to set the pump time by using the RileyLink, Loop will not function properly.",
            "title": "Time Changes with Loop"
        },
        {
            "location": "/troubleshooting/time-change/#iphone",
            "text": "Loop will assume your iPhone's time (UTC, not time zone) is always correct. This theoretically may not be the case if a nearby cell tower is improperly configured (though there are likely resilience mechanisms in iOS to handle this). Automatic time setting can always be disabled in Settings.",
            "title": "iPhone"
        },
        {
            "location": "/troubleshooting/time-change/#minimed-pump-and-cgm",
            "text": "The Minimed pump doesn't expose a universal clock, instead it exposes the components of a date (YMDHIS). It has no concept of political time zones, and just continues to increment its components on schedule. Therefore, Loop assumes that the pump's date, until changed, remains at a fixed offset from UTC.  That offset is stored by Loop the first time the pump ID is changed, and every time the pump's time is changed from the RileyLink Settings screen.",
            "title": "Minimed Pump and CGM"
        },
        {
            "location": "/troubleshooting/time-change/#dexcom-cgm",
            "text": "No particular input is needed on your part for Loop to work with Dexcom CGM data. All times are UTC.  However, at time changes you may want to manually change your G4 receiver time setting just so the time visually appears correct when you are viewing the screen.",
            "title": "Dexcom CGM"
        },
        {
            "location": "/troubleshooting/time-change/#traveling-across-time-zones-and-daylight-savings",
            "text": "When traveling, there is no urgency to update the pump's time to match the wall-clocks in your geography. Configuration schedules\u2014basal rates, target ranges, carb ratios, and insulin sensitivities\u2014will all remain in the pump's time zone. The app's graphs and status will always display in the time zone of the iPhone, and Loop will understand the difference in offset between the two, highlighting it when attempting to change configuration schedules.  When you're ready to update the pump's time, simply  use the Loop's RileyLink \"Change Pump Time\" . This will also shift your configuration schedules to the current time zone.",
            "title": "Traveling across time zones and daylight savings"
        },
        {
            "location": "/nightscout/overview/",
            "text": "Overview\n\u2301\n\n\nNightscout (NS) is an excellent tool to remotely view Loop's actions.  It allows for easy remote monitoring of Loop activities, troubleshooting of Loop errors, history of CGM, carbs, boluses, & temp basals, reports to analyze data trends and patterns. There is a Nightscout app in your iPhone App Store, or you can use a web browser to view the data.  Setting up Nightscout is free and fairly quick.  Once setup, the site can be accessed by anyone that you share your unique Nightscout URL with.  \n\n\nNightscout is highly recommended for Loop users, especially those using Loop as caregivers to t1ds.  Nightscout displays are often the easiest way to troubleshoot Loop settings, if you are having problems and seeking input from others.  Below is some discussion about the general Nightscout display, as well as some Loop-specific display information.\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlood Glucose\n\n\nYour blood glucose (BG) readings from your CGM are shown in green, yellow, or red in the main graph area of NS.  You can adjust your high and low BG targets in NS (when NS alerts will start for high/low BGs), but those will not affect your Loop performance.  Loop only uses the BG targets given in the Loop app settings.  The main screen of BGs is displaying the time duration you have selected (in the example above, 12 hours of BG history).  The bottom of the screen shows the last 48-hours of BG trends.  You can scan backwards by dragging the bottom timeline to the left, if you want to review specific Loop actions or data in the last two days. \n\n\n\n\nCarbs\n\n\nCarbs are automatically uploaded to NS by the Loop app.  The amount of carbs on board (active carbs or COB) can be seen by clicking the Loop pill.  The size of a white carb dot on the graph is proportional to the amount of carbs entered...bigger meals get bigger dots. Loop does not read carbs from NS for use in looping caluclations, it only uploads carbs to NS that have been entered in the Loop app.\n\n\n\n\nBoluses\n\n\nInsulin boluses are also automatically uploaded to NS by the Loop app.  The bolus is shown as a filled in blue lower-half of the dot, and the specific amount of the bolus is also shown.  There may be a slight delay between when the carbs for a meal are uploaded to NS to when the meal bolus appears.  This is because depending on the pump model and size of bolus, the bolus may take a few minutes to actually be given and then Loop has to perform a pump read to verify the reservoir volume has decreased (i.e., the bolus was given).  As shown in the example above, the meal carbs have been uploaded, but the bolus delivery is still in progress.  Insulin on board (active insulin or IOB) is also shown in the Loop pill.\n\n\n\n\nTemp Basals\n\n\nWithin your NS profile, you will enter in the scheduled basal for your t1d.  This is not automatically updated when you update the Loop app or your pump; you will have to manually update your basal profile in your NS site if you change your basal profile in Loop and/or pump.  If you don't update the NS basal profile, it doesn't cause any problems in Loop function...you simply won't have accurate VISUAL representation of high/low temp basals within NS. The dashed blue line represents the scheduled basal profile (as entered in your NS profile).  The solid blue lines indicate the actual basal amounts set for a given time...so as Loop sets temp basals higher or lower than your scheduled basal rate, the solid blue line will jump above or below your dashed blue line.  There is a slight delay (up to 2-5 minutes) in the rendering of basal changes on the blue lines, so if you want the accurate current basal rate, you can check the Loop pill.\n\n\n\n\nPredicted BG\n\n\nThe purple line to the right of the BG is Loop's predicted BG.  Watching the behavior of that purple line can help you understand why Loop is making decisions regarding high or low temps.  You can read more on that topic in the Algorithm section of these docs.\n\n\n\n\nLoop pill\n\n\nThe Loop pill is the little display box which when hovered over, or clicked, will provide additional information about recent Loop activities and status.  Information included is the last time Loop ran, the temp basal set, IOB, and COB.  Looking at the Loop pill is a quick method for assessing if you loop is currently active, as well.  The small symbols to the right of the word Loop have specific meaning.  The small horizontal lightning bolt, shown in this example, is an active loop which recently enacted a temp basal.  You can read the section on Troubleshooting using the Loop Pill for additional information about the various symbols.\n\n\n\n\nSAGE and CAGE pills\n\n\nThe SAGE and CAGE pills are for Sensor Age and Cannula Age.  These optional pills track the time since your CGM sensor and Pump site were last changed.  You can set up custom alerts to remind you when it is time to change the devices, or simply use the visuals to keep track of your particular timing for site/sensor changes.",
            "title": "Overview"
        },
        {
            "location": "/nightscout/overview/#overview",
            "text": "Nightscout (NS) is an excellent tool to remotely view Loop's actions.  It allows for easy remote monitoring of Loop activities, troubleshooting of Loop errors, history of CGM, carbs, boluses, & temp basals, reports to analyze data trends and patterns. There is a Nightscout app in your iPhone App Store, or you can use a web browser to view the data.  Setting up Nightscout is free and fairly quick.  Once setup, the site can be accessed by anyone that you share your unique Nightscout URL with.    Nightscout is highly recommended for Loop users, especially those using Loop as caregivers to t1ds.  Nightscout displays are often the easiest way to troubleshoot Loop settings, if you are having problems and seeking input from others.  Below is some discussion about the general Nightscout display, as well as some Loop-specific display information.       Blood Glucose  Your blood glucose (BG) readings from your CGM are shown in green, yellow, or red in the main graph area of NS.  You can adjust your high and low BG targets in NS (when NS alerts will start for high/low BGs), but those will not affect your Loop performance.  Loop only uses the BG targets given in the Loop app settings.  The main screen of BGs is displaying the time duration you have selected (in the example above, 12 hours of BG history).  The bottom of the screen shows the last 48-hours of BG trends.  You can scan backwards by dragging the bottom timeline to the left, if you want to review specific Loop actions or data in the last two days.    Carbs  Carbs are automatically uploaded to NS by the Loop app.  The amount of carbs on board (active carbs or COB) can be seen by clicking the Loop pill.  The size of a white carb dot on the graph is proportional to the amount of carbs entered...bigger meals get bigger dots. Loop does not read carbs from NS for use in looping caluclations, it only uploads carbs to NS that have been entered in the Loop app.   Boluses  Insulin boluses are also automatically uploaded to NS by the Loop app.  The bolus is shown as a filled in blue lower-half of the dot, and the specific amount of the bolus is also shown.  There may be a slight delay between when the carbs for a meal are uploaded to NS to when the meal bolus appears.  This is because depending on the pump model and size of bolus, the bolus may take a few minutes to actually be given and then Loop has to perform a pump read to verify the reservoir volume has decreased (i.e., the bolus was given).  As shown in the example above, the meal carbs have been uploaded, but the bolus delivery is still in progress.  Insulin on board (active insulin or IOB) is also shown in the Loop pill.   Temp Basals  Within your NS profile, you will enter in the scheduled basal for your t1d.  This is not automatically updated when you update the Loop app or your pump; you will have to manually update your basal profile in your NS site if you change your basal profile in Loop and/or pump.  If you don't update the NS basal profile, it doesn't cause any problems in Loop function...you simply won't have accurate VISUAL representation of high/low temp basals within NS. The dashed blue line represents the scheduled basal profile (as entered in your NS profile).  The solid blue lines indicate the actual basal amounts set for a given time...so as Loop sets temp basals higher or lower than your scheduled basal rate, the solid blue line will jump above or below your dashed blue line.  There is a slight delay (up to 2-5 minutes) in the rendering of basal changes on the blue lines, so if you want the accurate current basal rate, you can check the Loop pill.   Predicted BG  The purple line to the right of the BG is Loop's predicted BG.  Watching the behavior of that purple line can help you understand why Loop is making decisions regarding high or low temps.  You can read more on that topic in the Algorithm section of these docs.   Loop pill  The Loop pill is the little display box which when hovered over, or clicked, will provide additional information about recent Loop activities and status.  Information included is the last time Loop ran, the temp basal set, IOB, and COB.  Looking at the Loop pill is a quick method for assessing if you loop is currently active, as well.  The small symbols to the right of the word Loop have specific meaning.  The small horizontal lightning bolt, shown in this example, is an active loop which recently enacted a temp basal.  You can read the section on Troubleshooting using the Loop Pill for additional information about the various symbols.   SAGE and CAGE pills  The SAGE and CAGE pills are for Sensor Age and Cannula Age.  These optional pills track the time since your CGM sensor and Pump site were last changed.  You can set up custom alerts to remind you when it is time to change the devices, or simply use the visuals to keep track of your particular timing for site/sensor changes.",
            "title": "Overview"
        },
        {
            "location": "/nightscout/new_user/",
            "text": "New Nightscout Users\n\u2301\n\n\nTwo options exist for easy hosting of NS; Azure or Heroku. Both hosting services are free.  However,  Azure has data quotas monthly and shorter term CPU quotas.  If you exceed those quotas, you may be facing a monthly data-use bill or being locked out of NS for about 12 hours until the quotas reset.  As you start to use NS more intensively for alarms, pebble watches, etc\u2026it is possible that you may exceed your monthly data cap on Azure.  Many Loop users have transitioned their old sites from Azure over to Heroku and have found the hosting change to be beneficial.  Heroku also has some memory limits, but those limits have been more than adequate for Loop users.  Therefore, we recommend new users start with Heroku.\n\n\nHEROKU NIGHTSCOUT SET-UP\n\u2301\n\n\n\n\nCreate an account at \nHeroku\n and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate an account at \nGitHub\n\n\n\n\n\n\nGo to the \nNightscout cgm-remote-monitor repository\n\n\n\n\n\n\nClick the \nFork\n button in the upper right corner\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScroll down until you see the purple \nDeploy to Heroku\n button.  Click that button.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGive your app a name, this will be the prefix of your NS site\u2019s URL. For example, \nhttps://yourappname.herokuapp.com\n\n\n\n\n\n\nFill out the information lines in the \nConfig Variables\n Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.\n\n\n\n\n\n\n\n\n\n\n\n\nKEY\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nAPI_SECRET\n\n\nCreate your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.\n\n\n\n\n\n\nDISPLAY_UNITS\n\n\nenter either mg/dl or mmol\n\n\n\n\n\n\nENABLE\n\n\nbridge loop pump iob cob basal careportal sage cage\n(Enter all of the words without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)\n\n\n\n\n\n\nDISABLE\n\n\nLeave blank\n\n\n\n\n\n\nALARM_TYPES\n\n\nsimple\n\n\n\n\n\n\nBG_HIGH\n\n\nEnter the numeric value of BG you\u2019d like as an urgent high alarm.\n\n\n\n\n\n\nBG_TARGET_TOP\n\n\nEnter the numeric value of the top of your target BG.\n\n\n\n\n\n\nBG_TARGET_BOTTOM\n\n\nEnter the numeric value of the bottom of your target BG.\n\n\n\n\n\n\nBG_LOW\n\n\nEnter the numeric value of the BG you\u2019d like as an urgent low alarm.\n\n\n\n\n\n\nPUSHOVER lines\n\n\nCan be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.\n\n\n\n\n\n\nCUSTOM_TITLE\n\n\nThis will be the text displayed in the upper left part of the NS website.\n\n\n\n\n\n\nTHEME\n\n\nchange from default to colors\n\n\n\n\n\n\nBRIDGE_USER_NAME\n\n\nEnter your Dexcom Share Account login name.  This should be the same account name used in the Share2 or G5 Mobile app.\n\n\n\n\n\n\nBRIDGE_PASSWORD\n\n\nEnter your Dexcom Share Account password.\n\n\n\n\n\n\nBG_TARGET TOP\n\n\nEnter the numeric value of the top of your target BG.\n\n\n\n\n\n\nBG_TARGET_BOTTOM\n\n\nEnter the numeric value of the bottom of your target BG.\n\n\n\n\n\n\n\n\n\nThe remaining variables can be left at their default values.\n\n\n\n\nClick the purple \nDeploy\n button at the bottom of screen\n\n\n\n\n\n\n\n\n\n\n\n\n\nWait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can verify your site\u2019s successful build by clicking \nView\n (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).  \n\n\n\n\n\n\n\n\n\n\n\nYou do not have to enter all the information in the profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the \nBasal Profile\n and \nTimeZone\n at a minimum in order to have your temp basals properly display.  Click \nSave\n when you have entered the information.  You will be prompted to authenticate, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the \nAuthenticate\n link at the bottom of the site, and enter your API_SECRET to complete the authentication.\n\n\n\n\n\n\n\n\n\n\n\nAssuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the \nView\n option, we are going to select the \nManage App\n button. Then, select the \nSettings\n tab near the top of the screen on your Heroku app.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on \nReveal Config  Vars\n. Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKEY\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nDEVICESTATUS_ADVANCED\n\n\ntrue\n\n\n\n\n\n\nPUMP_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nPUMP_RETRO_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\n\n\n\nSHOW_PLUGINS\n\n\nloop pump cob iob sage cage careportal\n\n\n\n\n\n\nPUMP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nPUMP_URGENT_BATT_U\n\n\n30\n(This is the pump battery percentage that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_BATT_V\n\n\n1.25\n(This is the pump battery voltage that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_RES\n\n\n10\n(This is the reservoir volume that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_CLOCK\n\n\n30\n\n\n\n\n\n\nLOOP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nLOOP_WARN\n\n\n20\n(This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)\n\n\n\n\n\n\nLOOP_URGENT\n\n\n60\n(Same as the alert above, but will be red in color and have a shorter snooze option.)\n\n\n\n\n\n\n\n\n\n\n\nClick on \nOpen App\n in the top right corner of your Heroku site.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the settings (those three horizontal lines in upper right corner).  Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then press save. Your NIGHTSCOUT site is all set-up.  Congrats!\n\n\n\n\n\n\n\n\n\n\n\nEVENT HISTORY\n\u2301\n\n\nDon't forget to keep you Loop App's Preferred Source set to \nEvent History\n if you want your NS site to smoothly integrate.  Preferred Source set to \nReservoir\n will result in carbs not being uploaded and temp basals not being displayed.",
            "title": "Setup New Site"
        },
        {
            "location": "/nightscout/new_user/#new-nightscout-users",
            "text": "Two options exist for easy hosting of NS; Azure or Heroku. Both hosting services are free.  However,  Azure has data quotas monthly and shorter term CPU quotas.  If you exceed those quotas, you may be facing a monthly data-use bill or being locked out of NS for about 12 hours until the quotas reset.  As you start to use NS more intensively for alarms, pebble watches, etc\u2026it is possible that you may exceed your monthly data cap on Azure.  Many Loop users have transitioned their old sites from Azure over to Heroku and have found the hosting change to be beneficial.  Heroku also has some memory limits, but those limits have been more than adequate for Loop users.  Therefore, we recommend new users start with Heroku.",
            "title": "New Nightscout Users"
        },
        {
            "location": "/nightscout/new_user/#heroku-nightscout-set-up",
            "text": "Create an account at  Heroku  and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.        Create an account at  GitHub    Go to the  Nightscout cgm-remote-monitor repository    Click the  Fork  button in the upper right corner        Scroll down until you see the purple  Deploy to Heroku  button.  Click that button.        Give your app a name, this will be the prefix of your NS site\u2019s URL. For example,  https://yourappname.herokuapp.com    Fill out the information lines in the  Config Variables  Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.       KEY  VALUE      API_SECRET  Create your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.    DISPLAY_UNITS  enter either mg/dl or mmol    ENABLE  bridge loop pump iob cob basal careportal sage cage (Enter all of the words without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)    DISABLE  Leave blank    ALARM_TYPES  simple    BG_HIGH  Enter the numeric value of BG you\u2019d like as an urgent high alarm.    BG_TARGET_TOP  Enter the numeric value of the top of your target BG.    BG_TARGET_BOTTOM  Enter the numeric value of the bottom of your target BG.    BG_LOW  Enter the numeric value of the BG you\u2019d like as an urgent low alarm.    PUSHOVER lines  Can be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.    CUSTOM_TITLE  This will be the text displayed in the upper left part of the NS website.    THEME  change from default to colors    BRIDGE_USER_NAME  Enter your Dexcom Share Account login name.  This should be the same account name used in the Share2 or G5 Mobile app.    BRIDGE_PASSWORD  Enter your Dexcom Share Account password.    BG_TARGET TOP  Enter the numeric value of the top of your target BG.    BG_TARGET_BOTTOM  Enter the numeric value of the bottom of your target BG.     The remaining variables can be left at their default values.   Click the purple  Deploy  button at the bottom of screen       Wait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.       You can verify your site\u2019s successful build by clicking  View  (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).        You do not have to enter all the information in the profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the  Basal Profile  and  TimeZone  at a minimum in order to have your temp basals properly display.  Click  Save  when you have entered the information.  You will be prompted to authenticate, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the  Authenticate  link at the bottom of the site, and enter your API_SECRET to complete the authentication.      Assuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the  View  option, we are going to select the  Manage App  button. Then, select the  Settings  tab near the top of the screen on your Heroku app.       Click on  Reveal Config  Vars . Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.         KEY  VALUE      DEVICESTATUS_ADVANCED  true    PUMP_FIELDS  battery reservoir clock status    PUMP_RETRO_FIELDS  battery reservoir clock status    SHOW_FORECAST  loop    SHOW_PLUGINS  loop pump cob iob sage cage careportal    PUMP_ENABLE_ALERTS  true    PUMP_URGENT_BATT_U  30 (This is the pump battery percentage that will trigger a red, urgent alert in NS.)    PUMP_URGENT_BATT_V  1.25 (This is the pump battery voltage that will trigger a red, urgent alert in NS.)    PUMP_URGENT_RES  10 (This is the reservoir volume that will trigger a red, urgent alert in NS.)    PUMP_URGENT_CLOCK  30    LOOP_ENABLE_ALERTS  true    LOOP_WARN  20 (This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)    LOOP_URGENT  60 (Same as the alert above, but will be red in color and have a shorter snooze option.)      Click on  Open App  in the top right corner of your Heroku site.       Click on the settings (those three horizontal lines in upper right corner).  Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then press save. Your NIGHTSCOUT site is all set-up.  Congrats!",
            "title": "HEROKU NIGHTSCOUT SET-UP"
        },
        {
            "location": "/nightscout/new_user/#event-history",
            "text": "Don't forget to keep you Loop App's Preferred Source set to  Event History  if you want your NS site to smoothly integrate.  Preferred Source set to  Reservoir  will result in carbs not being uploaded and temp basals not being displayed.",
            "title": "EVENT HISTORY"
        },
        {
            "location": "/nightscout/update_user/",
            "text": "UPDATING NIGHTSCOUT SITE\n\u2301\n\n\nIf you are new to Loop and haven\u2019t updated your NS site since before December 1, 2016, you will want to update your NS site.  You can run either the \"master\" or \"dev\" branches of cgm-remote-monitor with Loop.  To check what version your Nightscout site is running, go to your Nightscout site and pull open the site settings by clicking on the three horizontal lines at the top right of the screen.  Scroll down and see if you are running 0.9.2-dev-20161201 or newer for \"dev\" branch.  Notice the \u201cdev\u201d branch is date stamped 0.9.x-dev-YYYMMDD; or you\u2019ll see version 0.9.2 for \"master\" branch deployments.\n\n\nIf you are a current NS user and simply want to update your site, this procedure will work as well.\n\n\nUpdating your repository in GitHub\n\u2301\n\n\n\n\nCopy, paste, and goto the one of the following links depending on which branch of cgm-remote-monitor you are currently running (replace \nyourgithubname\n with your actual GitHub user name)\n\n\n\n\nfor master branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master\n\n\nFor dev branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev\n\n\n\n\n\n\n\n\n\n\n\nClick the big green \nCreate pull request\n button. Another screen will appear, fill in a title and click button to create the pull request, and then you can \nMerge pull request\n, and finally \nConfirm merge\n.\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\nYour cgm-remote-monitor repository is now up-to-date.  Nice work.\n\n\n\n\n\n\nIf you don\u2019t have your Heroku set-up to automatically update when your repository is updated, you may have to go into your Heroku \nDeploy\n section and manually deploy your branch now that your repository has been updated.  Make sure you are connected to your GitHub cgm-remote-monitor repository.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew Loopers Variables\n\u2301\n\n\nFor new Loopers (but old Nightscout users), you will need to add some variables to your Heroku site to Loop.  \n\n\n\n\nLogin to your Heroku site, select the \nSettings\n tab near the top of the screen on your Heroku app.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on \nReveal Config  Vars\n.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED and ENABLE lines are required, the others just make Nightscout more useful when Looping.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKEY\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nDEVICESTATUS_ADVANCED\n\n\ntrue\n\n\n\n\n\n\nPUMP_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nPUMP_RETRO_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\n\n\n\nSHOW_PLUGINS\n\n\nloop pump cob iob sage cage careportal\n\n\n\n\n\n\nPUMP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nPUMP_URGENT_BATT_U\n\n\n30\n(This is the pump battery percentage that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_BATT_V\n\n\n1.25\n(This is the pump battery voltage that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_RES\n\n\n10\n(This is the reservoir volume that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_CLOCK\n\n\n30\n\n\n\n\n\n\nLOOP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nLOOP_WARN\n\n\n20\n(This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)\n\n\n\n\n\n\nLOOP_URGENT\n\n\n60\n(Same as the alert above, but will be red in color and have a shorter snooze option.)\n\n\n\n\n\n\n\n\n\n\n\nClick on \nOpen App\n in the top right corner of your Heroku site.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the settings (those three horizontal lines in upper right corner).  Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then press save.  Your NIGHTSCOUT site is all set-up.  Congrats!\n\n\n\n\n\n\n\n\n\n\n\n\n\nDouble check that your NS Profile settings are current and that you have a basal profile entered, if you want to see the temp basals that Loop is setting.\n\n\n\n\nEVENT HISTORY\n\u2301\n\n\nDon't forget to keep you Loop App's Preferred Source set to \nEvent History\n if you want your NS site to smoothly integrate.  Preferred Source set to \nReservoir\n will result in carbs not being uploaded and temp basals not being displayed.",
            "title": "Update Site"
        },
        {
            "location": "/nightscout/update_user/#updating-nightscout-site",
            "text": "If you are new to Loop and haven\u2019t updated your NS site since before December 1, 2016, you will want to update your NS site.  You can run either the \"master\" or \"dev\" branches of cgm-remote-monitor with Loop.  To check what version your Nightscout site is running, go to your Nightscout site and pull open the site settings by clicking on the three horizontal lines at the top right of the screen.  Scroll down and see if you are running 0.9.2-dev-20161201 or newer for \"dev\" branch.  Notice the \u201cdev\u201d branch is date stamped 0.9.x-dev-YYYMMDD; or you\u2019ll see version 0.9.2 for \"master\" branch deployments.  If you are a current NS user and simply want to update your site, this procedure will work as well.",
            "title": "UPDATING NIGHTSCOUT SITE"
        },
        {
            "location": "/nightscout/update_user/#updating-your-repository-in-github",
            "text": "Copy, paste, and goto the one of the following links depending on which branch of cgm-remote-monitor you are currently running (replace  yourgithubname  with your actual GitHub user name)   for master branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master  For dev branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev      Click the big green  Create pull request  button. Another screen will appear, fill in a title and click button to create the pull request, and then you can  Merge pull request , and finally  Confirm merge .                        Your cgm-remote-monitor repository is now up-to-date.  Nice work.    If you don\u2019t have your Heroku set-up to automatically update when your repository is updated, you may have to go into your Heroku  Deploy  section and manually deploy your branch now that your repository has been updated.  Make sure you are connected to your GitHub cgm-remote-monitor repository.",
            "title": "Updating your repository in GitHub"
        },
        {
            "location": "/nightscout/update_user/#new-loopers-variables",
            "text": "For new Loopers (but old Nightscout users), you will need to add some variables to your Heroku site to Loop.     Login to your Heroku site, select the  Settings  tab near the top of the screen on your Heroku app.       Click on  Reveal Config  Vars .  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED and ENABLE lines are required, the others just make Nightscout more useful when Looping.         KEY  VALUE      DEVICESTATUS_ADVANCED  true    PUMP_FIELDS  battery reservoir clock status    PUMP_RETRO_FIELDS  battery reservoir clock status    SHOW_FORECAST  loop    SHOW_PLUGINS  loop pump cob iob sage cage careportal    PUMP_ENABLE_ALERTS  true    PUMP_URGENT_BATT_U  30 (This is the pump battery percentage that will trigger a red, urgent alert in NS.)    PUMP_URGENT_BATT_V  1.25 (This is the pump battery voltage that will trigger a red, urgent alert in NS.)    PUMP_URGENT_RES  10 (This is the reservoir volume that will trigger a red, urgent alert in NS.)    PUMP_URGENT_CLOCK  30    LOOP_ENABLE_ALERTS  true    LOOP_WARN  20 (This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)    LOOP_URGENT  60 (Same as the alert above, but will be red in color and have a shorter snooze option.)      Click on  Open App  in the top right corner of your Heroku site.       Click on the settings (those three horizontal lines in upper right corner).  Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then press save.  Your NIGHTSCOUT site is all set-up.  Congrats!       Double check that your NS Profile settings are current and that you have a basal profile entered, if you want to see the temp basals that Loop is setting.",
            "title": "New Loopers Variables"
        },
        {
            "location": "/nightscout/update_user/#event-history",
            "text": "Don't forget to keep you Loop App's Preferred Source set to  Event History  if you want your NS site to smoothly integrate.  Preferred Source set to  Reservoir  will result in carbs not being uploaded and temp basals not being displayed.",
            "title": "EVENT HISTORY"
        },
        {
            "location": "/nightscout/azure_migration/",
            "text": "Migrating from Azure to Heroku\n\u2301\n\n\nIf you are a current Azure user who wants to move to Heroku, but not lose all your old NS data, you will need do the following steps:\n\n\n\n\nupdate your repository in GitHub\n\n\ncreate a new heroku nightscout site\n\n\nmigrate your mLab database to new site\n\n\n\n\nUpdating your repository in GitHub\n\u2301\n\n\n\n\nCopy, paste, and goto the one of the following links depending on which branch of cgm-remote-monitor you are currently running (replace \nyourgithubname\n with your actual GitHub user name)\n\n\n\n\nfor \nmaster\n branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master\n\n\nFor \ndev\n branch deployments:\n\n\nhttps://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev\n\n\n\n\n\n\n\n\n\n\n\nClick the big green \nCreate pull request\n button. Another screen will appear, fill in a title and click button to create the pull request, and then you can \nMerge pull request\n, and finally \nConfirm merge\n.\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nYour cgm-remote-monitor repository is now up-to-date.  Nice work.\n\n\n\n\nHeroku Nightscout Site Setup\n\u2301\n\n\n\n\nCreate an account at \nHeroku\n and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGo to your Nightscout cgm-remote-monitor repository in GitHub (https://github.com/yourGitHubname/cgm-remote-monitor)\n\n\n\n\n\n\nScroll down until you see the purple \nDeploy to Heroku\n button.  Click that button.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGive your app a name, this will be the prefix of your NS site\u2019s URL. For example, \nhttps://yourappname.herokuapp.com\n\n\n\n\n\n\nFill out the information lines in the \nConfig Variables\n Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.\n\n\n\n\n\n\n\n\n\n\n\n\nKEY\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nAPI_SECRET\n\n\nCreate your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.\n\n\n\n\n\n\nDISPLAY_UNITS\n\n\nenter either mg/dl or mmol\n\n\n\n\n\n\nENABLE\n\n\nbridge loop pump iob cob basal careportal sage cage\n(Enter all of the words without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)\n\n\n\n\n\n\nDISABLE\n\n\nLeave blank\n\n\n\n\n\n\nALARM_TYPES\n\n\nsimple\n\n\n\n\n\n\nBG_HIGH\n\n\nEnter the numeric value of BG you\u2019d like as an urgent high alarm.\n\n\n\n\n\n\nBG_TARGET_TOP\n\n\nEnter the numeric value of the top of your target BG.\n\n\n\n\n\n\nBG_TARGET_BOTTOM\n\n\nEnter the numeric value of the bottom of your target BG.\n\n\n\n\n\n\nBG_LOW\n\n\nEnter the numeric value of the BG you\u2019d like as an urgent low alarm.\n\n\n\n\n\n\nPUSHOVER lines\n\n\nCan be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.\n\n\n\n\n\n\nCUSTOM_TITLE\n\n\nThis will be the text displayed in the upper left part of the NS website.\n\n\n\n\n\n\nTHEME\n\n\nchange from default to colors\n\n\n\n\n\n\nBRIDGE_USER_NAME\n\n\nEnter your Dexcom Share Account login name.  This should be the same account name used in the Share2 or G5 Mobile app.\n\n\n\n\n\n\nBRIDGE_PASSWORD\n\n\nEnter your Dexcom Share Account password.\n\n\n\n\n\n\nBG_TARGET TOP\n\n\nEnter the numeric value of the top of your target BG.\n\n\n\n\n\n\nBG_TARGET_BOTTOM\n\n\nEnter the numeric value of the bottom of your target BG.\n\n\n\n\n\n\n\n\n\nThe remaining variables can be left at their default values.\n\n\n\n\nClick the purple \nDeploy\n button at the bottom of screen\n\n\n\n\n\n\n\n\n\n\n\n\n\nWait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can verify your site\u2019s successful build by clicking \nView\n (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).  \n\n\n\n\n\n\n\n\n\n\n\nYou do not have to enter all the information in the profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the \nBasal Profile\n and \nTimeZone\n at a minimum in order to have your temp basals properly display.  Click \nSave\n when you have entered the information.  You will be prompted to authenticate, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the \nAuthenticate\n link at the bottom of the site, and enter your API_SECRET to complete the authentication.\n\n\n\n\n\n\n\n\n\n\n\nAssuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the \nView\n option, we are going to select the \nManage App\n button. Then, select the \nSettings\n tab near the top of the screen on your Heroku app.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on \nReveal Config  Vars\n. Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKEY\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nDEVICESTATUS_ADVANCED\n\n\ntrue\n\n\n\n\n\n\nPUMP_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nPUMP_RETRO_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\n\n\n\nSHOW_PLUGINS\n\n\nloop pump cob iob sage cage careportal\n\n\n\n\n\n\nPUMP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nPUMP_URGENT_BATT_U\n\n\n30\n(This is the pump battery percentage that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_BATT_V\n\n\n1.25\n(This is the pump battery voltage that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_RES\n\n\n10\n(This is the reservoir volume that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_CLOCK\n\n\n30\n\n\n\n\n\n\nLOOP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nLOOP_WARN\n\n\n20\n(This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)\n\n\n\n\n\n\nLOOP_URGENT\n\n\n60\n(Same as the alert above, but will be red in color and have a shorter snooze option.)\n\n\n\n\n\n\n\n\n\nThe remaining variables can be left at their default values.\n\n\n\n\nClick on \nOpen App\n in the top right corner of your Heroku site.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the settings (those three horizontal lines in upper right corner).  Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then press save. Your new Nightscout site is all set-up.  Congrats!\n\n\n\n\n\n\n\n\n\n\n\nMigrate mLab database\n\u2301\n\n\nIf you\u2019d like to seamlessly keep all your old Azure NS data showing in your new Heroku NS site, you\u2019ll need to copy and paste your old \nMONGODB\n string from your Azure site.  Find it in either Application Settings or Connection strings in your Azure control panel and then go to Heroku\u2019s \nMONGODB_URI\n line.  Replace the content with your copied string from Azure.  Double check that your Azure collection used the \u201centries\u201d name\u2026if it doesn\u2019t, then you will need to update that variable in Heroku to match as well.\n\n\n\n\n\n\n\n\n\nEVENT HISTORY\n\u2301\n\n\nDon't forget to keep you Loop App's Preferred Source set to \nEvent History\n if you want your NS site to smoothly integrate.  Preferred Source set to \nReservoir\n will result in carbs not being uploaded and temp basals not being displayed.",
            "title": "Azure to Heroku"
        },
        {
            "location": "/nightscout/azure_migration/#migrating-from-azure-to-heroku",
            "text": "If you are a current Azure user who wants to move to Heroku, but not lose all your old NS data, you will need do the following steps:   update your repository in GitHub  create a new heroku nightscout site  migrate your mLab database to new site",
            "title": "Migrating from Azure to Heroku"
        },
        {
            "location": "/nightscout/azure_migration/#updating-your-repository-in-github",
            "text": "Copy, paste, and goto the one of the following links depending on which branch of cgm-remote-monitor you are currently running (replace  yourgithubname  with your actual GitHub user name)   for  master  branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/master...nightscout:master  For  dev  branch deployments:  https://github.com/yourgithubname/cgm-remote-monitor/compare/dev...nightscout:dev      Click the big green  Create pull request  button. Another screen will appear, fill in a title and click button to create the pull request, and then you can  Merge pull request , and finally  Confirm merge .                       Your cgm-remote-monitor repository is now up-to-date.  Nice work.",
            "title": "Updating your repository in GitHub"
        },
        {
            "location": "/nightscout/azure_migration/#heroku-nightscout-site-setup",
            "text": "Create an account at  Heroku  and choose the Primary Development Language to be Node.js when you create your account.  You\u2019re going to use a free account, but you will still need to enter credit card information for your account setup.  Don\u2019t forget to check your email to confirm your Heroku account.        Go to your Nightscout cgm-remote-monitor repository in GitHub (https://github.com/yourGitHubname/cgm-remote-monitor)    Scroll down until you see the purple  Deploy to Heroku  button.  Click that button.         Give your app a name, this will be the prefix of your NS site\u2019s URL. For example,  https://yourappname.herokuapp.com    Fill out the information lines in the  Config Variables  Section of that page, as shown below.  Some of the lines can stay with the default entries already provided.       KEY  VALUE      API_SECRET  Create your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the `@` symbol.    DISPLAY_UNITS  enter either mg/dl or mmol    ENABLE  bridge loop pump iob cob basal careportal sage cage (Enter all of the words without commas.  Just a single space between each word. Make sure autocorrect does not add space between careportal)    DISABLE  Leave blank    ALARM_TYPES  simple    BG_HIGH  Enter the numeric value of BG you\u2019d like as an urgent high alarm.    BG_TARGET_TOP  Enter the numeric value of the top of your target BG.    BG_TARGET_BOTTOM  Enter the numeric value of the bottom of your target BG.    BG_LOW  Enter the numeric value of the BG you\u2019d like as an urgent low alarm.    PUSHOVER lines  Can be left blank for now.   See PUSHOVER section if you want to integrate PUSHOVER notifications with NS later.    CUSTOM_TITLE  This will be the text displayed in the upper left part of the NS website.    THEME  change from default to colors    BRIDGE_USER_NAME  Enter your Dexcom Share Account login name.  This should be the same account name used in the Share2 or G5 Mobile app.    BRIDGE_PASSWORD  Enter your Dexcom Share Account password.    BG_TARGET TOP  Enter the numeric value of the top of your target BG.    BG_TARGET_BOTTOM  Enter the numeric value of the bottom of your target BG.     The remaining variables can be left at their default values.   Click the purple  Deploy  button at the bottom of screen       Wait a little bit while Heroku builds your NS app.  You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the NS app was successfully deployed.       You can verify your site\u2019s successful build by clicking  View  (you should see black site with a profile warning).  You will be redirected to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage).        You do not have to enter all the information in the profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the  Basal Profile  and  TimeZone  at a minimum in order to have your temp basals properly display.  Click  Save  when you have entered the information.  You will be prompted to authenticate, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the  Authenticate  link at the bottom of the site, and enter your API_SECRET to complete the authentication.      Assuming your previous browser tab is still open for \"Create a new App | Heroku\", let's go back to that tab.  This time instead of choosing the  View  option, we are going to select the  Manage App  button. Then, select the  Settings  tab near the top of the screen on your Heroku app.       Click on  Reveal Config  Vars . Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED is a required line, the others just make Nightscout more useful when Looping.         KEY  VALUE      DEVICESTATUS_ADVANCED  true    PUMP_FIELDS  battery reservoir clock status    PUMP_RETRO_FIELDS  battery reservoir clock status    SHOW_FORECAST  loop    SHOW_PLUGINS  loop pump cob iob sage cage careportal    PUMP_ENABLE_ALERTS  true    PUMP_URGENT_BATT_U  30 (This is the pump battery percentage that will trigger a red, urgent alert in NS.)    PUMP_URGENT_BATT_V  1.25 (This is the pump battery voltage that will trigger a red, urgent alert in NS.)    PUMP_URGENT_RES  10 (This is the reservoir volume that will trigger a red, urgent alert in NS.)    PUMP_URGENT_CLOCK  30    LOOP_ENABLE_ALERTS  true    LOOP_WARN  20 (This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)    LOOP_URGENT  60 (Same as the alert above, but will be red in color and have a shorter snooze option.)     The remaining variables can be left at their default values.   Click on  Open App  in the top right corner of your Heroku site.       Click on the settings (those three horizontal lines in upper right corner).  Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then press save. Your new Nightscout site is all set-up.  Congrats!",
            "title": "Heroku Nightscout Site Setup"
        },
        {
            "location": "/nightscout/azure_migration/#migrate-mlab-database",
            "text": "If you\u2019d like to seamlessly keep all your old Azure NS data showing in your new Heroku NS site, you\u2019ll need to copy and paste your old  MONGODB  string from your Azure site.  Find it in either Application Settings or Connection strings in your Azure control panel and then go to Heroku\u2019s  MONGODB_URI  line.  Replace the content with your copied string from Azure.  Double check that your Azure collection used the \u201centries\u201d name\u2026if it doesn\u2019t, then you will need to update that variable in Heroku to match as well.",
            "title": "Migrate mLab database"
        },
        {
            "location": "/nightscout/azure_migration/#event-history",
            "text": "Don't forget to keep you Loop App's Preferred Source set to  Event History  if you want your NS site to smoothly integrate.  Preferred Source set to  Reservoir  will result in carbs not being uploaded and temp basals not being displayed.",
            "title": "EVENT HISTORY"
        },
        {
            "location": "/nightscout/loop_pill/",
            "text": "Loop Pill in Nightscout \u00a0 \n\u2301\n\n\nThe Loop pill in Nightscout provides Loop status at a glance, including how many minutes ago the status was received.\n\n\nStatus Indicator\n\u2301\n\n\nA small icon in the middle of the pill indicates the latest known status.\n\n\n\n\nStatus indicator symbols\n\n\nX\n \u00a0\nError in Loop\n\n\n\u03d5\n \u00a0\nRecommending basal, but not enacting (open loop or pump suspended)\n\n\n\u2301\n \u00a0\nEnacted a new temp basal\n\n\n\u21bb\n \u00a0\nLoop is continuing with last temp basal, no change\n\n\n\u26a0\n \u00a0\nWarning (Loop has not completed since since the time set on your LOOP_WARN setting in NS)\n\n\n\n\nStatus Information\n\u2301\n\n\nMouseover or Touch the Loop pill to view a tool tip containing one or more of the latest status messages. For example:\n\n\n\n\n\n\nTroubleshooting Loop\n\u2301\n\n\nIf you are getting unexpected status, review the \nGetting a Green Loop\n page. To find a specific error message, search the site for all or part of the message.",
            "title": "Loop Pill"
        },
        {
            "location": "/nightscout/loop_pill/#loop-pill-in-nightscout",
            "text": "The Loop pill in Nightscout provides Loop status at a glance, including how many minutes ago the status was received.",
            "title": "Loop Pill in Nightscout &nbsp; "
        },
        {
            "location": "/nightscout/loop_pill/#status-indicator",
            "text": "A small icon in the middle of the pill indicates the latest known status.   Status indicator symbols  X  \u00a0\nError in Loop  \u03d5  \u00a0\nRecommending basal, but not enacting (open loop or pump suspended)  \u2301  \u00a0\nEnacted a new temp basal  \u21bb  \u00a0\nLoop is continuing with last temp basal, no change  \u26a0  \u00a0\nWarning (Loop has not completed since since the time set on your LOOP_WARN setting in NS)",
            "title": "Status Indicator"
        },
        {
            "location": "/nightscout/loop_pill/#status-information",
            "text": "Mouseover or Touch the Loop pill to view a tool tip containing one or more of the latest status messages. For example:",
            "title": "Status Information"
        },
        {
            "location": "/nightscout/loop_pill/#troubleshooting-loop",
            "text": "If you are getting unexpected status, review the  Getting a Green Loop  page. To find a specific error message, search the site for all or part of the message.",
            "title": "Troubleshooting Loop"
        },
        {
            "location": "/nightscout/ifttt/",
            "text": "IFTTT Integration\n\u2301\n\n\nIf This, Then That (IFTTT) is a useful Nightscout integration.  By using IFTTT, you can have single button presses that you can deploy from your iPhone to put a note in your NS site, enter low treatments, log a site change, or log a sensor change. \n\n\nIFTTT Setup for phones\n\u2301\n\n\n\n\nFirst we need to gather one thing called your \"hashed API Secret\". In your internet browser, open a console window while viewing your Nightscout site.  Make sure you have \"authenticated\" your site by using your API secret in the Nightscout settings area (hint: if you see a little padlock in the upper left corner of the site, you haven't authenticated it).  Refresh the site and your hashed secret key will be shown as \"apisecrethash: \"xxxxxxxxxx...\"\"  For Safari users on Mac, you can open the console window by selecting \"Develop\" from the Safari top menu, and then \"Show Page Source\" (if you do not see \"Develop\" in the top menu, activate it by going to Safari > Preferences... > Advanced, and checking the \"Show Develop menu in menu bar\" option).  If you're having problems seeing the apisecrethash, click the little grey triangle next to the \"status isAuthenticated\" line and the objects below it will display (see screenshot).  Your hashed API secret can be copied and pasted from that line, as shown below.  Save that somewhere easy to get to again, because you will be using it later.\n\n\n\n\n\n\n\n\n\n\n\n\n\nGet an \nIFTTT account\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nLogin to your IFTTT.com account and select the \"New Applet\" button.\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the screen that appears, click on the blue \"+this\" part of the screen\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the next screen, type \"button\" in the search field and then click on the red box labelled \"ButtonWidget\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nConnect the buttonwidget by clicking on the large red \"connect\" button (You will only have to \"connect\" the widgets for the first applet you make.  After that the widgets will already connected to your IFTTT account.)\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the large red \"button press\" box \n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the blue \"+that\" text\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnter \"maker\" in the search field and click on the Maker Webhooks app\n\n\n\n\n\n\n\n\n\n\n\n\n\nConnect the Maker Webhooks app\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the green \"Make a Web Request\" box\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow you will have a blank web request template to complete.  \n\n\n\n\n\n\n\n\n\n\n\nThe following info should be filled in:\n\n\nURL: https://yoursite.herokuapp.com/api/v1/treatments.json (change the \"yoursite\" part to your NS info)\n\n\nMethod: POST\n\n\nContent Type: application/json\n\n\nBody:  The content of the body will depend on the action that you would like this particular button press to perform.  You can only do ONE of the actions per button.  Some sample content:\n\n\nPump Site Change\n\n\n{\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Site Change\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\n\n\nCGM Sensor Start\n\n\n{\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Sensor Start\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\n\n\nNote\n\n\n{\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Note\", \"notes\": \"Hi mom, starting track practice!\", \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\n\n\nLow Treatment\n\n\n{\"enteredBy\": \"IFTTT-button\", \"reason\": \"low treatment\", \"carbs\": 15, \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\n\n\n\n\n\n\nClick the \nCreate Action\n button on the bottom of the screen when you finish.\n\n\n\n\n\n\nNow is your chance to change the title of your Applet now to something meaningful.  You can turn on notifications, too, using the slider shown.  If you turn on the notifications, you will get an alert on your phone and pebble watch when the button press has been successfully deployed.  Finish the IFTTT button by clicking on the Finish button that appears.  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRepeat the setup for New Applets for as many automated actions as you would like to setup.\n\n\n\n\n\n\n\n\n\n\n\nEnable IFTTT in your Nightscout site\n\u2301\n\n\n\n\nFind your Maker Key by going to your IFTTT account, Services and then clicking on Maker, then Maker settings.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nYou will see your Maker Key as the last part of the URL; copy and paste that last part (the red underlined part as shown)\n\n\n\n\n\n\n\n\n\n\n\n\n\nLogin to your Nightscout site host (azure or heroku) and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstall IFTTT app on your iPhone/Android\n\u2301\n\n\n\n\n\n\nDownload the IFTTT app on your phone and log in.\n\n\n\n\n\n\nYou can add homescreen quick buttons.  Click on your IFTTT app and login, click on My Applets in the bottom right corner, and then click on the applet that you'd like to work with.  From the the middle of the applet, click on the Widget Settings, and then click on the Add button for the Homescreen Icon.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor iPhone users, if you downswipe from the top of your iPhone screen, you will have the Today view or Notifications showing.  They are separate pages; Today view is on the left, Notifications is on the right.  You can left/right swipe to go between them.  Go into the Today view and scroll to the bottom, click \"edit\". This should show a list of existing widgets, followed by a list of \"more widgets\" with green + signs.  Click on the IFTTT's green circle and the widget will be moved to the top, active widgets area.  You can hold your finger on the three left lines of the IFTTT widget row to drag it to the top of your widget panel, if you prefer to have it as the top-most widget. \n\n\n\n\n\n\n\n\n\n\n\nIf you end up with more than four IFTTT applets, they will appear in reverse-order of when they were created...which may not be the same as you'd prefer them to appear on your widget bar.  If you'd like to reorder them:\n\n\n\n\ngo into your iPhone's IFTTT app\n\n\nclick on My Applets\n\n\nclick on the gear icon in upper left of screen\n\n\nclick on Widgets\n\n\nclick on the pencil icon in upper right of screen\n\n\nclick and hold the three lines that appear on the right side of the widget that you want to move.  Drag the widget to the order in the list that you'd like it to appear in your widget quickscreen.\n\n\n\n\n\n\n\n\n\n\n\nAlexa integration\n\u2301\n\n\n\n\nSince you have IFTTT/Maker requests working, you can get it to work with anything that supports IFTTT, including Alexa. You will need to add \"alexa\" to your ENABLE line in your Nightscout host settings (azure) or config vars (heroku).  And then repeat the steps above, but instead of using \"ButtonWidget\" service we started with earlier (the \"+if\" part of the setup)...you will use the \"AmazonAlexa\" service.\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlexa requests do not need underscores, FYI.",
            "title": "IFTTT"
        },
        {
            "location": "/nightscout/ifttt/#ifttt-integration",
            "text": "If This, Then That (IFTTT) is a useful Nightscout integration.  By using IFTTT, you can have single button presses that you can deploy from your iPhone to put a note in your NS site, enter low treatments, log a site change, or log a sensor change.",
            "title": "IFTTT Integration"
        },
        {
            "location": "/nightscout/ifttt/#ifttt-setup-for-phones",
            "text": "First we need to gather one thing called your \"hashed API Secret\". In your internet browser, open a console window while viewing your Nightscout site.  Make sure you have \"authenticated\" your site by using your API secret in the Nightscout settings area (hint: if you see a little padlock in the upper left corner of the site, you haven't authenticated it).  Refresh the site and your hashed secret key will be shown as \"apisecrethash: \"xxxxxxxxxx...\"\"  For Safari users on Mac, you can open the console window by selecting \"Develop\" from the Safari top menu, and then \"Show Page Source\" (if you do not see \"Develop\" in the top menu, activate it by going to Safari > Preferences... > Advanced, and checking the \"Show Develop menu in menu bar\" option).  If you're having problems seeing the apisecrethash, click the little grey triangle next to the \"status isAuthenticated\" line and the objects below it will display (see screenshot).  Your hashed API secret can be copied and pasted from that line, as shown below.  Save that somewhere easy to get to again, because you will be using it later.       Get an  IFTTT account         Login to your IFTTT.com account and select the \"New Applet\" button.       In the screen that appears, click on the blue \"+this\" part of the screen       In the next screen, type \"button\" in the search field and then click on the red box labelled \"ButtonWidget\"       Connect the buttonwidget by clicking on the large red \"connect\" button (You will only have to \"connect\" the widgets for the first applet you make.  After that the widgets will already connected to your IFTTT account.)       Click on the large red \"button press\" box        Click on the blue \"+that\" text       Enter \"maker\" in the search field and click on the Maker Webhooks app       Connect the Maker Webhooks app       Select the green \"Make a Web Request\" box       Now you will have a blank web request template to complete.        The following info should be filled in:  URL: https://yoursite.herokuapp.com/api/v1/treatments.json (change the \"yoursite\" part to your NS info)  Method: POST  Content Type: application/json  Body:  The content of the body will depend on the action that you would like this particular button press to perform.  You can only do ONE of the actions per button.  Some sample content:  Pump Site Change  {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Site Change\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"}  CGM Sensor Start  {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Sensor Start\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"}  Note  {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Note\", \"notes\": \"Hi mom, starting track practice!\", \"secret\": \"your_hashed_api_goes_here!!!\"}  Low Treatment  {\"enteredBy\": \"IFTTT-button\", \"reason\": \"low treatment\", \"carbs\": 15, \"secret\": \"your_hashed_api_goes_here!!!\"}    Click the  Create Action  button on the bottom of the screen when you finish.    Now is your chance to change the title of your Applet now to something meaningful.  You can turn on notifications, too, using the slider shown.  If you turn on the notifications, you will get an alert on your phone and pebble watch when the button press has been successfully deployed.  Finish the IFTTT button by clicking on the Finish button that appears.          Repeat the setup for New Applets for as many automated actions as you would like to setup.",
            "title": "IFTTT Setup for phones"
        },
        {
            "location": "/nightscout/ifttt/#enable-ifttt-in-your-nightscout-site",
            "text": "Find your Maker Key by going to your IFTTT account, Services and then clicking on Maker, then Maker settings.             You will see your Maker Key as the last part of the URL; copy and paste that last part (the red underlined part as shown)       Login to your Nightscout site host (azure or heroku) and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.",
            "title": "Enable IFTTT in your Nightscout site"
        },
        {
            "location": "/nightscout/ifttt/#install-ifttt-app-on-your-iphoneandroid",
            "text": "Download the IFTTT app on your phone and log in.    You can add homescreen quick buttons.  Click on your IFTTT app and login, click on My Applets in the bottom right corner, and then click on the applet that you'd like to work with.  From the the middle of the applet, click on the Widget Settings, and then click on the Add button for the Homescreen Icon.        For iPhone users, if you downswipe from the top of your iPhone screen, you will have the Today view or Notifications showing.  They are separate pages; Today view is on the left, Notifications is on the right.  You can left/right swipe to go between them.  Go into the Today view and scroll to the bottom, click \"edit\". This should show a list of existing widgets, followed by a list of \"more widgets\" with green + signs.  Click on the IFTTT's green circle and the widget will be moved to the top, active widgets area.  You can hold your finger on the three left lines of the IFTTT widget row to drag it to the top of your widget panel, if you prefer to have it as the top-most widget.       If you end up with more than four IFTTT applets, they will appear in reverse-order of when they were created...which may not be the same as you'd prefer them to appear on your widget bar.  If you'd like to reorder them:   go into your iPhone's IFTTT app  click on My Applets  click on the gear icon in upper left of screen  click on Widgets  click on the pencil icon in upper right of screen  click and hold the three lines that appear on the right side of the widget that you want to move.  Drag the widget to the order in the list that you'd like it to appear in your widget quickscreen.",
            "title": "Install IFTTT app on your iPhone/Android"
        },
        {
            "location": "/nightscout/ifttt/#alexa-integration",
            "text": "Since you have IFTTT/Maker requests working, you can get it to work with anything that supports IFTTT, including Alexa. You will need to add \"alexa\" to your ENABLE line in your Nightscout host settings (azure) or config vars (heroku).  And then repeat the steps above, but instead of using \"ButtonWidget\" service we started with earlier (the \"+if\" part of the setup)...you will use the \"AmazonAlexa\" service.       Alexa requests do not need underscores, FYI.",
            "title": "Alexa integration"
        },
        {
            "location": "/nightscout/pebble/",
            "text": "Pebble Watchface\n\u2301\n\n\nThe Pebble Watchface called \nSkyLoop Predict\n can be used with either Loop or OpenAPS systems.  You will need to have a Nightscout website setup and integrated in order for the watchface to work.  Simply use your Pebble app to search for the watchface and install it.  In the watchface settings, enter your Nightscout URL in the Data Endpoint field, select Loop for the system, and enter \niob\n in the T1 Name field.  By entering \niob\n, the watchface will display the iob on the watchface.  In addition to the information dispalyed on the main watchface screen, shaking your wrist will bring up information about the pump battery and reservoir levels.",
            "title": "Pebble"
        },
        {
            "location": "/nightscout/pebble/#pebble-watchface",
            "text": "The Pebble Watchface called  SkyLoop Predict  can be used with either Loop or OpenAPS systems.  You will need to have a Nightscout website setup and integrated in order for the watchface to work.  Simply use your Pebble app to search for the watchface and install it.  In the watchface settings, enter your Nightscout URL in the Data Endpoint field, select Loop for the system, and enter  iob  in the T1 Name field.  By entering  iob , the watchface will display the iob on the watchface.  In addition to the information dispalyed on the main watchface screen, shaking your wrist will bring up information about the pump battery and reservoir levels.",
            "title": "Pebble Watchface"
        },
        {
            "location": "/nightscout/pushover/",
            "text": "Remote notifications\n\u2301\n\n\nWhile Loop app currently sends notifications locally on Loop user's iPhone, parents and caregivers likely want those messages on their phones, too.\n\n\nCurrently we can achieve this via 2 options:\n\n\n\n\nPushover service, or\n\n\nLoop Follow app\n\n\n\n\nPushover\n\u2301\n\n\nPushover is a paid service (but has a free 7-day trial period).  The cost is currently $4.99 flat, one-time fee per platform.  You can use it across all your personal devices (iPhones, iPads, etc) for the one fee per platform .  Android and iPhones and Desktop computers are on separate platforms.  So if your house has both Androids and iPhones that you wanted to receive notifications on, you would have to pay two flat fees.  \n\n\nYou can follow this \nguide\n for general Pushover setup with NS.  You will have to make some specific modifications for Loop-related alarms.\n\n\n\n\n\n\nSignup for a \nPushover Account\n\n\n\n\n\n\nVerify your account from the email they will send you\n\n\n\n\n\n\nDownload the Pushover App to your iPhone or Android and allow notifications from the app\n\n\n\n\n\n\nAdd \npushover\n to your existing ENABLE line on NS connection strings\n\n\n\n\n\n\nAdd any alerts you'd like to your connection strings (Azure) or config vars (Heroku), if you haven't already.\n\n\n\n\n\n\nAdd the \nPUSHOVER_ANNOUNCEMENT_KEY\n and \nPUSHOVER_API_TOKEN\n from your Pushover account to the lines in your connection strings in order to determine what types of notifications you would like to receive.  Screenshot below has a brief description of the various alerts you enable by having the line populated...you can customize as you wish.  The example shows the \nPUSHOVER_USER_KEY\n line as being populated, but for Loop users this means you would get a notification every time a temp basal is set by Loop.  Most Loopers would probably get notification fatigue by that...so if you leave that line blank, you will not get those notifications (and that's a good thing).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoop Follow\n\u2301\n\n\nThe Loop Follow application is a simple iOS app written in Swift that accepts notifications from Loop and is powered by Azure. The setup for the Loop Follow application iOS portion is a little more involved than setting up the Loop application.  \n\n\nFor more background read this \nblog post\n\n\n\n\n\n\nIt's more challenging to setup Loop-Follow due to the nature of using Push notifications and requiring some special provisioning on both the iOS side and the Azure configuration so they talk to each other.\n\n\nFor future releases, the Loop Follow developers are planning to use a shared Push notification service hosted on NightScout Foundation Azure subscription to simplify the process and make it available to Loop users not using Azure and also a free service comparing to Push Over with more flexibility!\n\n\nFor instructions go to \nwiki\n or join the conversation on \ngitter",
            "title": "Remote Notifications"
        },
        {
            "location": "/nightscout/pushover/#remote-notifications",
            "text": "While Loop app currently sends notifications locally on Loop user's iPhone, parents and caregivers likely want those messages on their phones, too.  Currently we can achieve this via 2 options:   Pushover service, or  Loop Follow app",
            "title": "Remote notifications"
        },
        {
            "location": "/nightscout/pushover/#pushover",
            "text": "Pushover is a paid service (but has a free 7-day trial period).  The cost is currently $4.99 flat, one-time fee per platform.  You can use it across all your personal devices (iPhones, iPads, etc) for the one fee per platform .  Android and iPhones and Desktop computers are on separate platforms.  So if your house has both Androids and iPhones that you wanted to receive notifications on, you would have to pay two flat fees.    You can follow this  guide  for general Pushover setup with NS.  You will have to make some specific modifications for Loop-related alarms.    Signup for a  Pushover Account    Verify your account from the email they will send you    Download the Pushover App to your iPhone or Android and allow notifications from the app    Add  pushover  to your existing ENABLE line on NS connection strings    Add any alerts you'd like to your connection strings (Azure) or config vars (Heroku), if you haven't already.    Add the  PUSHOVER_ANNOUNCEMENT_KEY  and  PUSHOVER_API_TOKEN  from your Pushover account to the lines in your connection strings in order to determine what types of notifications you would like to receive.  Screenshot below has a brief description of the various alerts you enable by having the line populated...you can customize as you wish.  The example shows the  PUSHOVER_USER_KEY  line as being populated, but for Loop users this means you would get a notification every time a temp basal is set by Loop.  Most Loopers would probably get notification fatigue by that...so if you leave that line blank, you will not get those notifications (and that's a good thing).",
            "title": "Pushover"
        },
        {
            "location": "/nightscout/pushover/#loop-follow",
            "text": "The Loop Follow application is a simple iOS app written in Swift that accepts notifications from Loop and is powered by Azure. The setup for the Loop Follow application iOS portion is a little more involved than setting up the Loop application.    For more background read this  blog post    It's more challenging to setup Loop-Follow due to the nature of using Push notifications and requiring some special provisioning on both the iOS side and the Azure configuration so they talk to each other.  For future releases, the Loop Follow developers are planning to use a shared Push notification service hosted on NightScout Foundation Azure subscription to simplify the process and make it available to Loop users not using Azure and also a free service comparing to Push Over with more flexibility!  For instructions go to  wiki  or join the conversation on  gitter",
            "title": "Loop Follow"
        },
        {
            "location": "/nightscout/reports/",
            "text": "Reports\n\u2301\n\n\nNightscout offer some fantastic data-crunching report tools in the settings area (the upper right corner, three horizontal lines).  You can play around with various date ranges, target ranges, and provide reports to your endocrinologist to review.",
            "title": "Reports"
        },
        {
            "location": "/nightscout/reports/#reports",
            "text": "Nightscout offer some fantastic data-crunching report tools in the settings area (the upper right corner, three horizontal lines).  You can play around with various date ranges, target ranges, and provide reports to your endocrinologist to review.",
            "title": "Reports"
        }
    ]
}